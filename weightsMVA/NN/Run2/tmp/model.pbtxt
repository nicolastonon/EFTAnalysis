node {
  name: "MYINPUT"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "Feature_normalization/Cast"
  op: "Cast"
  input: "MYINPUT"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Feature_normalization/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "\000\000\000@\326\274U@\000\000\000\000oG\234\277\000\000\000\2007=\373?\000\000\000 \240\266\000@\000\000\000\240\024\201\007@\000\000\000\240\240vf\277\000\000\000\240\261\217[@\000\000\000 _\037\372?\000\000\000 \223\272\361?\000\000\000\240S3P@"
      }
    }
  }
}
node {
  name: "Feature_normalization/sub"
  op: "Sub"
  input: "Feature_normalization/Cast"
  input: "Feature_normalization/sub/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Feature_normalization/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "\000\000\000\320_\tv@\000\000\000\036\n\301\005@\000\000\000@\275 \371?0333\211\257\370?\000\000\000\240=<\001@\000\000(H9\225\007@`ff>4ct@\350\377\377/\201\363\n@\000\000\000`\244\006\376?$33SEZS@"
      }
    }
  }
}
node {
  name: "Feature_normalization/truediv"
  op: "RealDiv"
  input: "Feature_normalization/sub"
  input: "Feature_normalization/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
        tensor_content: "2+\342\276i`\344\276\024f\321\274\220\255\302\276\313h\'?\203}n\276\314\203\240\275\277tN<>\317\'\277y\330 ?\236\377\226\276\311\314?>-i\202\276\017\203\331>_^W\276\035$P>\206\354n>\207\307\022?\027\261\036\277\373\274\300>\310\221\001\277\211\004I?\216\005\005\277\367\220\000?\202.\242\276\246\035\020=\327&??\275\222\205\276\374p\276>\330\202w\276\365\254\226\276\337\321\271\276\0207\035\277\216\304\322\275\007\347e>S\271\270=O`\307;\3442\032\276\261\t\327={\225h\276\211\342\375:\204\024\303\276Q\021\222\276+\351\003\277\215\355\300\2762\226Y\275|7\205=Ge\005\277sM\335\276\326\335\224\275C\376+?\353\347G>\225M\301\276L\014\345>\223\320\350>\2051\002\276\262>\020?\035\020\324\275^<F?\177\352\357>E\241\253=\353\314\247>\033 \n\277\325\3224?%<m\277Xh\237>\220n\261>\023\374\010?\230-$=\270\373X\277\262mW>\002\360\034=C\322\002\277C@~?\322\001\003?\207x.\275\321n\374;\\{\312=\373\202\205>\006Z\262>X\341\020\277Y\273?\276\217\273\254\276Q\004(\276\224L\311>\314a\367\276%\307\247\275\365\000\300>i\314?\275yF\273>]q\213>d6\014?Z*\221>|\363S\277\353T\274=,\346\254\276E2\037\275x\246E>T\240<?\007\357\267\276\200v\252\276\251,\371\275\334r*>a\031c\276\314\3078?\352&\017?\t7\010=\375\377\317\276\344\324N\2773uj\273\347\242\367>\312\030\365>K\010\225\275\332\034\310\276d!\237>+/:\277\207\272f>e\2145>\241\364f\276\177ae?\271i\227>^\376I>\363\277K\276\330@\260\276,\337K?\213\213\005?3\037o=A\327\233>\007I\016?\314\367+?\272\301\234>\250\353\223>\200\336\220>\310@(?G\316<>\035\277^?\226\356\020>\211\241?\276KtY?\216\303&?e\000\220\275H\365\267>\265Q\004\277\372a\267\275\204\224d?\360\201\005?\343\201\013?\031\227\004?\324\302\\?G\030\224>-\3524\276\002:2\277\222\004\010\277\313+0?qu\374\276`\006;\277u\217\247>Rv\222=\004~A?a?5\277\253A=?\272\027\023?\264\263\343\276\347\032G>H\300\026\274pUe\2763oD\277v\3515\276\313\031\360\276\233\002y\277\212\233\000>q\0172>=\335e=\014\014\230><\301\203>\035 \266\276\017\t\014\277o\247^\276\302\240\031=\372\216\017>V\312 \276\244\367\204=1\231l\274s!v\276\020\000<\277\232G\033\277/\261=\276\237\232*\277\010\314V?\240\356R\277i\226m\277x`F?{\221\202=\206\362\031\277\223\013\375\276\366h\'\277\0303*>\360\345\335\276\355\330g\276\3708\017?\252\2072>%\202o>\36199?\313+\316\2760\374\216>\025\204\227>\203\213\216=\215#Q\276\330\003\317\276\007\006\3169\215\2324\276\"|\003>Z\027\217>\231\246\241\275k\353^\276&\3475>\347\327\231\275\325\232\275=\306\210\217><EN?\260\023\262=\256\214\261\275v5\362>\335\304;?\307\252\017\277z=[\276@\200\"\276\033\371\n\277@\262\177?\254C\r\277.\001j\274r{\005=\265i9?\300\257\013?\355n~=q\341\246\276\226\025\020\276^\303\255\276s\000*\276\031\363\204=\224\362\014=\tL\027\277_!\004>\372s\200\277fe\234>\001\244\212=.D\312\276\021r\005?Ww&\277\365\235\004?\221\317\202\276\327}H\276\274\310\346>\377\266^\276?2\341>\311\224\376\276\366\307\350>\2746Z?ke\210\276@\2016?\341\355\031>\313\320u\276\366p4\277|\0015\273\027\253\226\276\'k\346\276\330\332\217>1\215#\277lWA\277_\326\">[v0=vw\374<x\364\021\276\030\231\014>H\351\251>o\023\242\276M\357\013?\325\307\203\276\222>A?\330\2671>\014\3743>\2776\r\276H\360\033\277\256\336:\276\255\266\305>\003\365&\276h\353\253>\016>\373\2758\016\347\276U\323-=9\0215?\215\214\027\277\334\\%\275\000\035\224>JIN\277]\270\375>\002\013\036\276]MB?.\337\007\277C[\345>x\364\000\277X\271\016>\276\347\274>A\254\327=\205\341\207=s\216*\276}@\227>\242\311\035?\272=d\277\3220\261\276L\275w\276\rZ*?\352 \317\2741\005H>\tj\315\274\336\275<>\217\204h>\214\327\n?^;<>\2375\314\276\241-\023>\274\235\233>ON(\276\312\330R?\2372\277<[by>\023@\260>U\204\233>\361\3106=\255\n\024?3<\251\276\252nc\276\273)\036\277\271\252\335>\240NM?\352G\010\277\214@~\277\177\030\026?W\306\021\276\300\317\212\274\033\353\001=\021\241\251> \263\235>_z\331>\nx\303\276\232k\231=\242\361\013=\367\323T>\377\275\233\275)\355X\277A\234\026=\346QM\276\302\353P=\356}\001\277\375\364\016?\217V\230>\374\302.\277\200\307\'?H?}?T\262\366\276\177\217\334\276\035\230w=l\t2>\330\020\375>\3543\034\277\231\266\315>\270\314\027\276\032p\314\2736a\210<\241v7\276\353\303\007\277\000\033?\276h\361\037>*\327\246\276O\304\004\276K\255\016\275~\252Y?\334Q\245\275V\0213?\017N\376\2765w\204\274\360\362\207>\210\277x\276\257X\243\276A<\372> \016\210\275\335\324\036\277i@\214\276vc\217>:\347\022\277\210\333\255\276\334\250x>f\236l=\340R\253\276\361\005\036?`\373\315\276\323\301\224\276::<\277\217\346V?\017\033<?\010/\205\276\214\363\355\274Y\002\275\275KG\003?IX\332\274\177\343\327>\346W\320>\232\325#\276\247\302>?\004\n\025?\205\366\001=\276\2651?\352\354\211=+sr\274,\250!<\243%o\277sO\037\276\022gD?\241\351t?_\352L?\337\002\223>\216\234Y?\n\r^?\031\314(?\207\202%=9\255V>\210\235X>\200\273\277\276\210\237>\277\350\247\256\275\374\304\267\276\326\310=\277\355\275\026\277\n>\016\274\237\210\014\277\272\342\'>\016%\307\275\302v\316\276)\014\203\276\345`\000\275\324\300\333=\271\257\345\275\033\347&\277\3066\\\277\274^&\277\323\r\310>\341\352W\277\223@I>\2121\315>\357u\317>VY\t>\343\346(\277\241\022\304>\247\007\200\276\010\004\246\275\254\033\305<e\200\312=@\371t\276\0104#>\223\230\251\275\036+\335>\335\243\032\277\353\220=<\257\323\373>\310\331E>\233\253\'>P\326\202\276\265\342\314<,\263I>\331r\370\275N\n\220\276\256\231_\277\2253\224\276\234C\265>b\327\004?\243\302\003\277\267\203\361>\315w$\277jw\230>\277\333\203>\035\371\300\276a_2\277\027H\022?\353\220\007\277\366\342\351>d\346z>t\003\333\276\277`0>+\034\217=g\3658;\242\000\235>\341\036\270>\"si\275\033O2\277b\313}\276\037k\032\276\034\255\036=|\372\014?\276\271=?\023f\311\276"
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "dC\374;\270\355\330:\311\361\346;a\247`;*\363J\273\267-\327;\035\300\242\273(\212\254\273\223\200\210\273\364sz;R\366j;\"I\235;i\363\256\273\220\216\031<_\311\020\274\331\201\r\274\2220\017<\216dj\273\237\341\n\274\335_\314\272\240\233.8Yn\234;\304U7;{\311\332\273GC\016<V\317\363\273\242\256\023;f\256\256;9#\031;\211A\320;\004\267\272\273\254\360\360;oO\030\274\354\001\340;T]\343\273\257\307\311;\223\320\335;\\\251\362\273\021\215\2009\'\355\021\274p\273|:_^l:\311\362\366\272Y\350\346;\302\210\255;\241d\270\273\241\311=;\023\375\246\273\253\316\262\273\354,\241;"
      }
    }
  }
}
node {
  name: "dense/Cast"
  op: "Cast"
  input: "Feature_normalization/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "dense/Cast"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Tanh"
  op: "Tanh"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "N\333\200?We\200?\355\367}?\253\276~?|\037\177?\307\244~?\323\014~?%L\177?$:\201?\272\254~?q6\200?c\265\177?1\275}?\027\273}?\315f~?\356\034\201?)L~?\010\257}?\"b\200?\344`\200?\3100\201? b\200?\310\264\200?\252\264~?\374\333\200?\206\004~?\312\271\177?\262\036~?\\;~?%\030\177?~P~?\0243\201?\230d\200?^\'~?,s\177?\353\233\200?\002\271\177?w\334\200?\n\001\201?b\367\200?\275H~?\n\345\200?\324\241\200?x\342\200?\243Z\177?+\276}?\034k\177?\t\330}?\307\262\200?`\311}?"
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\240\253\323;\327\010\250;\316`\206;\230[\272\27317\374\273\267\202\216:\330lE;\200\327\224\273r\207\251\273z&f;\326\316\r<\306\\d\273\022\357\234;\031\314z;\361-\255\273x\212\260\273\323\300\224;\253\217\230;\177g\334;\245<\253;\344\321\334;\351\257\022<!\222Y;L\271\212\272-p\225;\315\003\337;_\324\335;x\037\231\273\363b\255\273?\r\262;\227\341\023\273~\222\324;[\264\025<\377N\311\273$\321\374;J.\372\273\337\007\242;}\037o;iO\233;m\t\325;~\t\231;\014\321\024;9-\253\273\203E\267:\227o\256\273\312\230l\272q!\216\273\031\336U;\007\302\267;[X%\273"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "9\004o\275j\356\321\274\275\022\300;\350\022\021\274}\323]=\227\374\211;\350\312\277\273\r\245\204={\317\005<0\r\007=iO\013\275v\273\204=\224\277\257\273\360X\217=\273\035^\275\242\007\017\273\220|\246<\246~\233=#\321\013\273\217\351\"\274\217\312\030\275\026v\271=\'\242\t\274\203\262\213=p^\242\274u\322\230<\023k\314=\246Y\367\273\333\270\367;\275\223/\274=\237z\275$5X\275*>\331\275\353\002\016\274)\210\034=\221\255\241\2740\321\232\275j`\246\271\037E*\274\216\3566\275\305\004\001<?\223\334;\261\314\264\274.\\\237\273[\016)\275\371a)\274\325\036)\275\257\016G\275\\\253\240<\261nC\274"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\030\366\302>\263\347\333>B\010\346>\000*\356>\200\374\344>\241\032\347>=\314\337>\264\320\366>gl\037?\267t\361>*;\376>\2400\352>\222|\341>*\261\346>\223\234\366>T\331\007?\255\351\345>\274\177\326>\242?\340>\247\307\020?\\\325\300>\203\222\330>o\364\355>\320E\021?\027\302\006?\207\013\277>\246d\362>\006\211\333>Q\346\002?\n\245\343>\230O\311>\360L\320>\237n\376>O\204\334>;j\013?\356\306\365>\254\352\304>\304M\375>\245\314\007?\2624\356>\245\021\376>,\222\006?(c\277>\005j\036?\261\374\016?`q\330>\276A\321>\234\374\006?\037@\034?P\354\016?"
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization/batchnorm/ReadVariableOp"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "dense/Tanh"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/batchnorm/ReadVariableOp_1"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/batchnorm/ReadVariableOp_2"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 50
          }
        }
        tensor_content: "\300I,>,\2133\274L\030\263\276\003f\007>\216\346\326;\324\2754=\240\326\322\276P\253I=\2442\217;\307\233\205\276\363\230i=^\234_=\371,$\276\350\221\273>\326\332\273\275\032\305\306=\226\311\034\276\342\305\236=\271;\003>\010\372\241\274k\324\265>\340\353\027\276\375n\300\276\3369\216\276\371_\266\275\004\334\354\275W\211h\276 \216+:\022\270\211>?\306\326\276!>\366\2737!\203=t0`\276\0227\267\276\257\330D=\311I\031\276\345\275\332=\245a:\276\375\306<\2759\036T\276\360\226:>\242\270\242\275\312\325I\273\026\317B\273\353U+\275\250\362\264>\r\226\260\276M\366\023\275wU\264=\323\235\265\276\336\204\030\275\016\363\303\275Y\232u>\343qD\275A\224\264<\331\321\377\275w\371\343\276\232\216\207>!\002\250>2_q\276\257\377r>L\004\314\276\254\236/\276\252\373|<\202\254\036\276\374:\252\275\200/\210\276\270\363\317>\002p8>\234+F\276\211N\203\274\035\252C>b8\020\276\277\'}=\306\352l>!\312Q\275j\017\317<\327\257a>\325\266p>_\205\320\275\035\236%\276e\256\002\276\311\262\343>kJ\213\274\300\326\347\276.\2126\276U\246\271\275\273rq\276\335\315\246>\334\271\034=\220\373\020\276hT\324\274\036\323@\276\\_\200\276\027\344\250=D^\327\274\242\247\331\276\034\260\'\276\232\013>\276\302#H\274\324\242\316\276\312\3376>\304\227\262>\001\032\273\275\355W\035\276\"\2304>\255\300\177\276S\022M\276\216\377\361\275\366\026\216\276\322\351\003\276\256\314W>{\205D\275oC;\276\252\314\201\275E\376\203\276\314\202\025\276\301\266-\276\032I:\276\263\357\253=\235\242\325>\222V\014=\315.\247>PM=\276wT\007>gq\302>s\355\020\276\332\005.=\036\005\345\276@g\242=\305$\210>K\211\265>LJ\222\275\226x\305\274\3313Q=v\220\216\274\352z0\276\263a\224\276L\323\254>\0026\211>\266j\204=\272\273\203\275\232M\333\276\316U\246\274p\370\312\274\233\211&=\353\321\316>p\310\017\276 \352\344=~^d>!\345\364\275K\220h>y[\267\276\373^]>ASg\276\026<\361=\026\001\207>\300Z{\276MY0\276z\216\270=\002H\272\276Ij\354<A\227 >\007\334X=\317@Y>B\251\213\275\262\311F<\256l\307=\025p\036>\317\374\276>g\257;>s\rc\276\rb\267=\247\261\205\275\260\224\212>\201N\276\276\322S\211\276\360\327+=\234\217\265\275?\243\217>\215\344\004>Kv\352\274\333\275\020=\322\370Y\275\tM/>\342\022D\276\254\340@>u\343\306\275\225\020\033>\022H\213=gm\351=\233\226\313\275\202\352{>\303\332#=\304\355\261=_-\t\276\227a\303>k;x\276\323\023\235\275q\026R\276\276\266\274\275m\346\333\274m\342\224\276\010@\243\275*\244\271\2766oO\276}f\006>\253\021\230\275\242U\223\275;\024\254\275\362\212\253>!\"L>u\263\272\274\211\324\246=\236\023\301>\245\240\300\276Z\211!\276\302f\215>\207\240\326\276\"}\023<q-\202=\244\325\220<:\210\311\276\211\240T=\203\305>\276\355\324=>GEi>\363*G\276~\246\244\274A\252\317\275\"W_\275\205\370\263=p\314\212>{\\\210>\005k\254\2755\376\010\275\352\342N\276\023u\245>\205k\204=\326u\377=\205\277\302\276\362G[\276\024\354%>\273\211\037>\033*I=\006\253\264=}\t\013\276\211-\201\276\241\0252\276Y\317h>\004\204\222>\260nO=\245\312\316=\213/\037\276\373U[>\254\017\230=\211\330m>\0052D\276\026b2\276\241MJ>\217D\317=K\2649>h\254\004\276\375\007B\276/\376\177=\346g;\276&].\276 \224n\275>\322N\276e?\223\276\224`+\276\267\205\222\275o\350b\275\356\037\274>0\0332>\324(6<&\364\030>\211\221<\276\035\262\016=\373\326\003>$\342\312>\025\363H\276b\375\307=xr)\276\337\306\351\276\203\016\205\276\232\343\006>\316\254\341\276(E\255\276\013D\363\275\373\005\320\276F\334k\2760\234\266>\013\207\270\274?@\250\276a\014\016\276\256ny>\n\177u\276C\207;>D9\200>\227\245\030>e\374)\276/\216s=E\371>>\371Z@\276\261\226\337\276T\212B\276\276W\200\276\021\346\354\274F\231\300>\026\234]\276\270\241`\275Q\375k=\202\221\303=\r0\221>\277*\366\275 \213\273=\223\246\277\275\343\312x=K\350\262\275\2276\201\276\342\334t>\347\200\350\273:9`\276^\345\023\275\203\264\303=\323\2649>\221\335\210>\234\332z\275@=P>\3419\247>\327\361\203\2760\025\364<\246\256\374\2749\214\'=\026\371\215\273\035\313\344=\210\225<\276\342\326\342\275\2755\325>{<9>\254\245\003=lo\277\273\276\257\261=\032\330\225\276\361\246E\275\273Ij=.\271\024\276\340\270G\276[\3562>y\020[\276\272P\341=\265\256n\276\335\221M>\021\200 \273\237!\376=\253\317\034\2763\211\245>\276\301\221\274\242kh>sc\205=\037N8\276\005\002\322\273\006\033_>U\236\300\276y\023B\275\035\263\332\276\343\246\241<rO\n\276\336R\010\275\023\310\235>\007_}\276\320=\333=\251A\301>\260\245\313\276\t\243\226\276\315\202\014>\030\021~\273\373\3168>\246/`\276\373\235B>\341C\272>\201A\t\276n\346\353\275c\214W>.O\343=JI\256\275\215\203\226>,\023\325<\244\245\234\274\\\334\212\2769\305\010\276\304\301\242\275\273\243s\276\344\222\262=\362\262C\275\nQ\353=\311\233q\275\203KP>\222\333\242>t^->\211\341\036=\226\322\264=\374\331\355\275\360T\031=\351\253+\276\250\265\'\274P\036\226\276\023@\311\275\001BA\276\006\022\244\275\300\226\323>\375\351\036\275\r9\232>\'\016\260>0G\224\275\343\275\364=\245\333\">\317E\023\276\300\343\274>\244\322\271\275\2637\037>\361\003Q>\206\013\201\276\336\224\242\276\304R\266<\370\250Z\276\215K\322\275\307]\022\276\020\223\031\276\035\202\t\276x\2278>\027\334==\022\217\350=k#\267\275M\303\n>\273\227E\276\335\004\305=K\275R>\014%\237>\230\266\221>\307#\350\275\253\304\240>\014\305C>\326\244C=\226\312\315\275\346\020\346\275\244\017p\276pa\224>xb1=\207\324A>\241\345\235>F\214\222=\014Z2\276\320\260\272\276.\021x=uv\324=\337=\306>a\207X\275\344-\276>\'\315+=\007\212\223\275$\215\315\276,W\323=\227\363?>\300\346w\275\362f\263>5-\227\276\316S\003>\362[I\276\315O\223>\361\352\013\276\313\240H\275g\224\"\2762\327\365\275\231e\321\275\2637\230\276\177\345U\276\325\2344\276\251b \276*\255\246>\201\224w\275\031_\210=\3038D\276m\300\255\276H\312\263\274\237M1=\233\366\351=\007\320\353\275w\363\355<U\362\222\2767\316m>\325\0234>\006\311\016\276\367\354\353\273\356\252\250\276\375\366F\276\332\2248\276$\2320=\022\1772>\327)\003<Z&)>(\005\353=$\001\237\275=\354\311>i\243\267\276\324\235\326\276(\237\373=\026^t>i\025\332>\215*\244\276\317\362\266\275\300\347\321\276\304\200\033\274-34\276o\354\350\275\362\347\246\274\371U5>\262#\000>\370\335\246>Qp\351=\327d\231>\364\376\233=\026\207\277>\356\240\024\275q%r>+fX\276\247\217\t\276\024\036\241>~5B>\201\377\263>2\355\350\276\353\244\025\276\277\316\006\276>\246F>\355\026\351<\312\003\255\275\220\206\264<\260\315\243\276}i\225\276\261@f>i\2614\276<\242G>\216\345\220>b\273#\276J\374\340<\022M\240=oF\027\275\021H\227\276\357a@=\'h\023\275\223q\330\2758]\252>J\351\211\275\311\336v\274\017\224\236\275ON\324>\364\001T>X\033\275=iE\246\275\333\317&>\025@d\274\202\244p\276\177\310o>\007-\367\274\270\240\277<goU\276t\032\226\275\n\235F>p~\371\275\276PM\275\177\246\247>M\240(\276\342\020\261=\334{\346=$\274\007\275(\276\363=\314\300M\276\340#\035>\"\257\'\276\033\036W>`\006\321\276\r\274\331>\357\322\227\275\336\326\254>e\232S\2766\245A=\236\271\230\276A3\333>K\310\203=t\364\024>\231\240\212\274\361\212\005\276\027s\010=\253\312\260\276\361M\230>\316 \205>w\227\247<{D\235\276\314\'\034>\362\037\007>\350.T>\307\020\022\276\257\305{\275\216\036\347>!\206\000\276\324C\332\2761 m<\3545L>\332\"T\276\363\260\240<\376\223\205>\2066\307\276\306\023\363=\253r\353;\006\377t>\t\342->\311[\307\275\323\202\323=\342:\230\275\245\004\230\275\202\027\007=\300\023\204\275\357%\353=\261\020\200\276h8\177\275\256\210\224\275\304X\022\276A\320Y\276\336\265\026\274\277(\036\276\r\301\335\275\343\254\216\276)\275\217\276b\233\000=4\310\271\276\2574m>G\265\244\276\363\034\226=\010j+>\266\265.\276\246\031s\274\016q\233\276\022\231\017<oc\260\275\344\2108\2761k?\276tS[=\315\364\227=T7\260\2752\247\251\276!\277\312>;(\032\276\344\317)>\244\265\323\276[~\213=:\035\032\276\010{\201>\230\317\'=*\006\364=\376<\214\276\270\221.\276E/\266\276\310\272b\276\327\350\235>1\261\312=\257\316\225=R\333\201\274\215:N>\000\223L>N\227\001\276\221\225Z;\354\0050=_OI>\223\024\202\276\371Q\005>HR\r>|\325^>\214d\303\276I\250q\275\254\350c=2\310\257\276P\371\263\275\277\"\037\276Bm\327>^\023\030>\275v\202>d\020d>\351\022,>\340K3>\324!\312=\214\310\002\276\265U\207>\300\355\036=A\316\207>\025\346\311\275\366`a>\202i_=@\265.\276\253\001m<\373\306\350\275I\360\337\274!\\\006>C$k={\346B\275\240\301)\276iN\327\276Y\332\316=lJ\307=\223\344\243\275\351\216G>\030\311[>\317\023n>8\253\253\275\0260f>\310{\307\276l\341\023<\270R\206>N\236<\276X\324\211>/\327\215>\016dC\27606\233>\023\354\031\274]u\247>\327\245\177>\356=\202=\030\344\204\276\270\016\365=\030\337|>i>0\273\311\nP>\233/\000\276\257\344\317>+o\342>\n\254\211\275\006\370\004\275\213S%\275\206\252\212\275+\357b\274\373\272<>\0034\255\275&\355g\276&\321\263>6\350\303\276\207\3066\276\021\217\350\276\301\313\034\276+:\263\275\017\216\374<:\325I\276\327UU\276~R\035>\345\244+\275\'\235\312\275Y\352\343\275\2043O>\"I\245\276\326j\350=\004\340T=\"{n=\303\214\321<\215&C\276\357\201r\276\356W\001>\361\372B\276\322\260 \276\371\210\221\275\0139\230=\267\366\214=\260\237\260\275\247n_\274pI\204\2730\224\235>s\r\027\276\tL\311\275\361\252\311=~\236 \276\014\230\032>5\037\217\274ak\273=n\376(\274r\2069\276\325g\224>\232\300f>nI\372=>t\005>\206\337\203\276O\374\250>2\367\350=\244!|\276\264\262\'\276<\220B>l\374\227\275pU\006;Y\212<>\037\207\332=\343\302\232\276\2622\343>%/\277<\310\nK\276K\232\002\276\3112\265\275FS\025\275\323MU>%j2>Z\301\201\276\"O\202\276\032\371\r\275\312/\271=E\275\267\276\237\337K>\344\227\233=\246~:>5\034B>\313\225_>\024|\204\276\t\"\205\276S\305\245=\3516\252\276>:R\275\352\314\365=\300\035\217\276\370\252<\276R\362\317\276\37446>8\030@\275\037\353k\276C\033\332\275\216.\211\276\035\261z\276\021\324x\276G\221K>\243\177\'\276W\274?>\221\224\r>\301\253q\275\375^\365=\337\033\223=\211\334\207\276\027\243M\274;\204\023=\364\227\035>\277;\256>\2000f\276\214c\031=\321*5>X\241\274=\240\032\023\276\250o$>$\216(\275-\220\333=\023\260U\276\235k\202>;\327\214\276e\350\341=\251\3744\276\256\366\374=\270\003M>\311t\201=\004P\305>K\025&\276\355\224\262=\240L\263\275Bp\036>\217\336\355\275\032\377\276=O\357\254>%]\343>e\213\004>\244\016a\276\2657\261=c#\205\275o\020\236\276\274\325\317\276\000\201;\276,\307\004=g\240\330=\230\254\215=\262\027i\276Q3Y\276`\027\227\271\303\330{>oFm\276\277\252\265=k=\323=\315\354\202\276\216[\365\275iKy=\\N\206\275e\207\016\276\304[[>\340\247\317=\215\003\360=\313`\231\275\326Q\237=\322\241\344\275\030^3\276$0\r>wl\360\275?\260\357=E\033\027\276Pf\334\275\237\255\321;\375\203\023\276v\n\276<+>\356\275@\035\302=\334\336\302\274\365%\212>\017r\034>\271,L\276\260\003\345=\360\220\014\275]_Z<5\320\275\275\210g\247>y\211\273=\327\004\270>\276\315\214>\243\227i>\030\370G>c\276\216<\027\327\023>\'\237\357\275\342\003\371\275\347\333\010>\201Zm>%O\022;\212e\275<\251\216\024>\222\221~\276?,\261\275k/\216=\333\002V\276gn\260>9G1>\345\312\243>\350\315\004;\033\275\203\275\210\370\002>\266\367\320>\361\244b\274\231Z\230\276\262\363\223\276\266It>k\253\310>A\004\224=4eV\276\013\252\214\275\032e9>\251#[>q\033\210\273\236\255\212=~\030O=zA\213\276C\220\221\276\013\200#\276\321?\237=\245\325\"\276\375\255->NEi>N\354\207>\033\350G\276C\340S\276Z\030\323\276\251\341\267=\320\302S>\336\376\356\275N\323\037\276\231[\332>\356s\362\275n\006\246<\321(\001>%\002;\276C$4\276\203\302\035>J^\261>\274\252\246>\374%4\276\301\330\363=\371\230\342>N\256\270>2\305M>\330\222\352\275{\264\027>\262\364\305=oF\036\276U\223\242\276\240\007\'>X/_\276\025\316\217\274\377\021\244=\261\232o>/\022\010>\373r\342<\356\255\031=\320\254\214=\304\202\356\274\367\006\344\275i\351\237>Ah\254>\340E\230>\006!\200\276p\316\232\275K\2568\276=\243\375\275\342\312\035\274o\362/>\t\220\376=\022=\241\276\311\022s\273Z\201X\2764@\236>T\223d\275n\027\027<XKI>\340\234T\274\250\271\007\275\013\377\254>\276\276\203\275\360\017\004\276\235\r4\276\343.\311>&\277\364\275\2327\201\2758\347\031>O\373\244=t7\267\275\0311\320<\271\\\203\276p\333\332>\033\352\024>\214\037\264\271\217)\230\276\342S\242\276\353d*\275\360\030\267<\311\005G>\033n]>!I\000\276\346Q\320=B\357\254\2760HO\276\252\220\017\276\301\215\274\274Q\260&\276\017\222\t\276 I!=!N$\275\340I\243\275l^]\275\327\254\235=\361O\033>\303\027\202\276\223\260\031>\252\273\232\276l_<>\367\241\364=(\271t=\033\340A>\036tj\276\013J&>i\336\016\2764\237\321\276\250t\022=;\024\"\276\251\2140>\367v\356\275\372\\I\276\375\004\342\275q5,>qx\274\276X>\255=\376\3009\275\024\311\321\273\177<\350\275\0168\234\276\314z\277\276\323\232Y\275\304\363\320\2754\027\002\276\202\010Y>S\035\230\276\023\324\264>es\335\2758\277X\276\221j\272\276\031\241\024\275\227L\353\275\264\273\241=\232cA\276\307 \225=L\252C>rH0\274\354}\213>\334\204\230=\244l\221\276\356\205!>L\275\212>c\371\262\275\022\364\000>-\314\237=P\234\302\276\025\231->\002\3319>QP\336\276[\240E\276\255\355\244=$,\307>\261FI\274N\360B>+\0369>\267\265\230=IK=>\213&\031\275\240\nm>7w\361\275Os\201>\005_k\275\177\226\312=B\2077\275\030G\004>\n\271\002\275\370\024\333\275\"\213\332>\316\322\240>\036\241\207\275\010ez\276\341s\025\276\307,\222>\351A\342\275vce\276\221\001\303\276;\273\274\276d\214\323\276\236\242\372\275\311\023\333>\214{\000\276H\331\031\275\326\332G>j_\226\276\375\303\233\276\311g\205=\313\367\250>#\247a\276\335\033N>j\352\020>K3_:P\360\235\275+8B\276\276-\021\276,\255\007>\317\353\267\275\017\034\016\276v\254D\275\346\364\201\276\304\275\370\275o\267\261\276\230\206?\276]\024\244>u\276\323\276\036\226]>\005(V>w\373>\276[\312\226\275l\375\313>\026\330\224>\006\317\354=\202\257\261=d_n\276:8\325\274r\232D<PB\343=\302\376\017\276\373!\203=\3222\210=\321\307@\276\310\244\025\276l\334\203\276\324`\372=t\327|>\3653\031>\253\340\026\2763)\017\276\030\262k\276%\027n\276e.\316>N]0>`!\267\274\337\003\216\276\207g\246>9\225\272\275U\"\357\275W`\275>\341z\227\276\220\307\320=\201\204\027>\301=r\276\204\366\375\275\335&\014\276{\241\013>.\364\243\276xq(>\225\233~>o\206\247>\342\371v>qk\367\274\371\033\275\275\3007\370=\257Ca>\310\3770\276iS\220>T\314\224\2762\204\363<\276n\212>XS\"\275m\320\223\274\273\000\377\274\023=\206>s\265G>\214\366\335<\367q\226\276\235\374\276>\277\350K\276\255\364\214\275N9 =\231\313\372\275\n\030\234=\226\341j>\303\216L\276n2r=\020P\217>\374BU\274\216\351w>\\\321\r>\0015\317\274Qu\224\275\317\255.<x\260\320>\306\327t>\035\222c\276\266\261G>.\016\006\276\306\345s=X(\351\275\241\323\210>\264m\027>wU\223\275\24220\276\232\255\273\275J\016\250\275\002Z\270\275\372\371\263\274C\003\203>\r\211\257\275\246Y\272\276\341a\325>\244\226\233>\341\357G>\'(\304\276ee\221\276+\233d\276^\222&=\024\353y\272\271\346o\276@\273\263\275\023n\365\275\360T\022>\276\'4>\245\301V>\002B\225\276\020\305\270\2754,\236\276+\013\035\275\334\342\264\275+q\001>\257\025_>\330p#>l/0=w)\005\273\205\241\006\276B\237\252=r(\256>\016\350E;So\371\275\025\036>=\004\227\255=\005L\264>3\300\200\276\253\237G=|.\211\276\276j\322\276\270\251(>\242\206\\\276\322\354\014\276E/\266\274\3216\307=\217\206.>\323\026:<\227\302n>1cJ\276>}\230>\363\201\256=(a\036>Z\234<;t\rp\274\264\020Q>\323+\235\274\234\325->i\306\232<#\364\262\275:,\376\271\006\217\267:\210!\230\275\035r\373\274O\002\223\276\233\377V>\035\362\020>\226\237\221\275\225\024\362=\330\326\216=1\022k\276\301\036\241>\254\030\256>\200\333L>\375q\214\276\357\240A\276\250\223T\276\0258q\275&V\213>6\303g\276\013Q\353\274\254C\004\276x\200?\276g\267Q=\273\206W\275\034\306\003\276\004\2556=CE\202\275\030B\211>vS\002\276\320e\303\276+\257\362\275J;\020\276\004\007\220\274\025\000d\276h\200\013\276I\326\022=\257En>^\361\306\275\205\232\302\276l3g>\315=\275\275\2354\021=\215\364\023>\207\3735\276\\\313_\276v\222\274=\233\242I=\250k\356\275\306\356\031\274\330L\256\275\032k\307>\333\276r\276ks3=!\263\035\276\357\357\330=p\271R<\225\250\265=\342\355\245\275z\344\216>ol\037>Er\013\275\014\023g\275\016\344\014\275\262=\030\276\275\006\025=\340,n>\215\332x\276\321\231\365=\026X\300>\312\t\342==C$\275W\024\036=\301\204\001>\262\251r>|\316\300=\220\272\013\276&\302i=t\203\345\275\315\374\026=\266\316\304\274~\327t>\273R\241<\254\317\277=4f\027\276x{?\273\275\221\001\276\225\330\212\275y_q\275*\210\350\275\262\263G>\\\311\\>Q\266\232>s\227\224=\003\275\250\276utD>\340F\000\276D\314\313\275Q_\251\276I\034I\276Q\230\263\276\370\226\320>\302\211\211;\025\271\025\276u\255->F\376\237\276-\010\270\276\342\237\231\276:\023\314=\362\240-\276h\3265\275\303>\336>>\361g\273\221,Z\276\367y\017>\021@T\274\207\331\025>\213Q\231=\'\334== \236(>\024\306\035\276\370G\203\276:f\314;>1\037\276T\216\237=F\237G>u6B\276\031\363\201>\306\353\355=M\222\340=\343C\227<@M\026\275\202q&=l\333\036\276IH\203>7j\253>\371\322\222=&A\017\276\22381\276.T+\276\257\335]>0_\235>\026\031\334>\n<\034\276\360\301\270;w\347\303=\233h~\275\303F\035=\235\323\352>\177\033\204>\'XC>\201x\">P\204{\276~\314`<\274\273\375\275\t\276\250;b\224\023<\312z\321\276\334\026\023\276\250vt>\237-\346=\357\303\304\275Q?\235\276\374\007\271\276\030\352\207\276\036 \273>\025\022\262\276}$\252>\272\217\255<\261\302$\276\306Y\240=\227k\006=5\353\206\275Ut\024>\374OU>\370\023e>\240>*<\314\224\314=\377\272r>\240{r>\311\n\246>D\334\002\276d\370\271\276\245\030\205;+,\241\275?\311\211\275\035\232\222\275x\2547>\230\331g\276\350\261\347=\244Cx>\371\314\241\275\026t%\276\022\337\330\275\013\277\350\275\267\353\037\276:\203\365=o\212j\275\003\247!\276\257\366\322=\270\207Q\276\035i\250<\177\322^<3Sz\276=%\003>\340nV=\377\307\305\275\025\351\312<\224\244\213>\272\355P\276\0247N\276\014\206\210>OX8>%\006\240>H\331\306=\202\201[\276\234\353\217=\230\3513>t\3275>\326\355\304<\274\305\276\275\263\352\353\273\376\375\213=~\001\247<\360\344\205>\321\200I\276\313\346\375=\235\260\215=\025\271\000>\033\036j>-\212\321=\262\316N\276\336\340\245>\337\302\236<,\243f\2766VY\275\215E\206\276I\027\221\276\313\363\314\276#\374t>u\257h\276\336\2259\275\336Y\217\276z\374h>{\274\232>\251m\352\275%E\252<\357\350\t\275\\\244q\276\222w4=\021W\224<\353j\316\276\022\200\214\275aLn\275\213\253\204;\2135\203=K\024\356\274u\251\305>hlU>*F\372\275e\277\313\276\271\350/\276]\3528\276d\272\267\275\017\3654=\217\'\251\275\230\032&>\245\352\240\274\353\025\317\275\005\r\374<\274\252Y>@b\240\275\271w\377=\375O\247>Q51>\234\260\357=\351Xl>h\005\341\274\240Q\332\275\023S\252\276\020*,\274\377A\243\276\367\034\010\276\265\344\">Bq\021\275f\321\245\276\320\314\206=\306h\352=\267-i\276\030\220=\2769\277e>\202\277\326\276)$\013\2766q\326\273\231\242\227>%<i=\235\241\010\276\316\367\233\276\375_@\275\350\354m\276\025\370\033=\026\023s\276\027a\363\275\010\270<\276\223\304L>\250\357-\276\307[\216>\373\234\301>\220c\325\276\3559&>{X\230>\343!\231>\\P\203\276\005\210O>\032|\021=\260]\215<\034\200\234\275\227\002\013>\316\025\257\2758\371\301>y\327\252\276\267c\212\276=nl\276\206,\362=\217\217M>Gts\276\317\277\003>i\216V>$\270\275<\262\022D\275\027\350G\276\245\241\357=j\t)\2767\375\242>\002\302\244>\313\036\035=\224\215\032\275\251[\332;\364\270\340\275\237\250t>\\\314\201=\341\333q>V\303\036=\024[\037\276\306\214\345=\231\033\206\275\332\246\252=E\250\314\276\345\207>>\224\326\034\276\002\352\014\276\360r\223>\262]\246>\371\312\325\276\273\372\357=\303\351\240\275\266\331O=\243y\366=fn&<1\221\260>\263b|>\223\337\341\275:$u\276\275\265.=(\320\230\276\2336\320\275o\024\304>\r6\216;\306aM>\202\363\213\275\315\304\201=\255\376\016>fD\202=c\254\305\276\2158k\276\370\202\320\276QN\023>R\327\334\276\201\266T=$\205\003>M\306\017\276\245\2421\276w\245\204=\375\023\017\276\237\271\226\276\320@\202=\363\236\212>\264\336\344\275\\\273\316\276Ai\322\274\254+i\2766\007g=D1\334>\007X\211\276{b\247\276\373\316\205\276q\035\254\275\276k\300\275g\215\342\274\317\306\222>\017\002\245>\013\240\365\2752g\343\275\262\246\234>\271\335\300\276694>\331J\271>\310\336\010>\030\201\316\276\240\302]>)\3355\276\212\205\274\276\247ki\276b\271\271=\253\313p\276\343\261b\276XP\213>\027\322\016=\022ig=d\\j=\002\365\227\275\366\342\340\275a\230\252=\007\n\002>\200f\322\275X}\244\276Iq\270\276\265p$\275\377\376A\276\223\252e\276\010\212\223>\307\357n\275\030lY>\021\273\206\276:\215\302\274\366|,\276\204\032N\275=\342x;h9f>E/6\276_\235\333\274\345\344\363\275M\200\036>%\243\332<o\333\032\276E}\326=\323\250\363\274\004\326\221\274\365\311a>\343\304\024\276\253\240\313\275\377\000\315\276^\002\\>\215\363\200\276\004\303\255>e\337\211>\245\n\260=\321R\022>R\345\261\274\304\336\251>\014i\230>\260\213\204>/O\224>\022\221P<-\243\020\2767\260\220=\333\370\312>B\253F>#\303\276=\365\374\220=\204\336a\275\321\272)=\365\317?>\207\334\201>\215\372\200=n\340\213=N\213z=KNE>Zqj\274dI\'>\365g0=\356\247\321=\226\225|\275\203\023b>\215\231Q>/\2305\273[\001o=b\n\312\275B\343,>\311I\202>\001\230l>A\376\024=\006\002,>[\347(>\232\253\216=\370s)\276\201\214\245:E\240\372=\032\302\304\274\362\252.\276\264C\221\275!\310\310=\316\313!>u3\367\275\272 \324>\362\335>\276\271\225\315\275R\236\356<\004\220)\274vG\205\276fw\217\274\231\2408\276\276\231S\276D\265\310=\321\361\231\275\207>V=\331\242\266=\235\2365\275\243\242\372=\256\236\030\276\335\036\260\274_\336\023\276\244\212\250\275\030\217_\276t\357\004>\215\021\342>Bg\366<0\274F=\017\264\\>\205\237\314=\274\022\317\275\034\3521\276\001\267\320\275\21039>\025A\240<\352\245\000\275\220\236\250>\221\004\031\276.\211\214\276.|\010=W\323\234\275\231F\371=\231~\010>m\374\321\276*\031\377\275\003\270\010\276R:\372\2744\177\221>\235\320\201\275\\$)>f\026\302>\216\n\325\2760\342;>*\025\033>\001\311\212\276\312\360\227\2765\211\277\276\016\315\342=E\017\351=\256\014\237\275\234g`=\213\342\243\275C\"\002>\355x\313\276\237^r\275 b\226=~C,>\221\222\342\274\224\322F>.g|>\0369\\>\374\336w>\026\347/\276\016\312\005>\347\375\202\276\272\t\214\276\222G\213\276k\354i>y\\+>\210\3439>\330\037\342\276\327\311\034:\377@\266\275\265\010\364\275\"\266\202>\010\200\352=\034\341Z>\271P_\275k\024&>\205`\252<\337\026\276<2\317\223>\250\3433\276\365\326\354\275\035\277]=$\177\220\275\220\223w>7bW>\301,S>\253\373\030>\227:\002>E\333\030\276\320\014\222>\347)\356\275\035\024\347>\370\323\252>\205\371E\275\030v\036\276\266\355\257=\262zG>?\210\262\276\234\020\003\276\364\317\020\276\001\345d>b\023$\276\256)>>0\341L>X\243\022\275<RD\275\211\233E\276w\301\000>\200\033\332\275\262\357\361=\272\316i=mu\347\274\273t\037\276\224\235\374=\211\\y\276\343\0220\276\373\004=\276\332K\337=\345\345\303>\266c\243\275\004\235i\275GC4\275E\260\302=3z2>~\245\251\275\234\320p\276\257$p\276\257\020\210\273\273%/\276\202\263#\274I._;\336\013s\276\037\023\200>\350\212\374\274(\313\337=-V\270\272\376NF\275\267\261\274<hoz>\264\265\037>\304\204\020\276\230\211~=\332\r\010>\241x\332=\203\017\312<5\253O>\247\347K>a\327<=\362\225\020\276\006\247\025\276\177M\251>\274 \271\276\n2\324;:%\021\276\240\025\372=e\365\026\276\224\2173\275\307F\031\2755\335\037\276\nH$>\240\273\000\275\273b\210>\361\010\241\276\247\272\357;$\227y\276\234\365\234\276D\302@>\231\332\351=\245l\321>Y\006f\275\233Y\016=\343\217\237\276^\350\221\276\377=\300\276\032\334\314\276\265%\302>\222/\224=\371\031\245\275\374\311V\275)\204J;\370\270\266>Q\315[>\230)\242\276\036\225\022\275\334\264\367\274F\303\243>l\004\216>Q\025D>\325\242\014\276Q\357}\276\177\301\354\275\r\241\253=S,Z\276eL\330=\311l\026=\372\344\370=\216\337\013>-\2203\276\204\353\321<\365\303\251\275u?\017>\350a\226>\0302i\275\240O\304=\375Oe<\374\344\246\275`?j\276\333e\376\274\037\205\201\276YV?\275@\206g\276\252\212\205<\250T\210\276\n\261.>\250!\n\276|\000\213\276#~\200\276\3307\245\276\033\215;>\373\327]>_\004G\276\330\313\267=\303M%>e\211t>\2050~>\267\331\253\276-\032\207=}\204\340\275s\255\266\275h\234\334=\226|\237;\233\357\251\275|0-\275`?\323=\352\"\226\276\221\346\233\276y1\200>\034\215\021>8\n5\2765\234\202>\361o\212>\003S\306=\017\355\241\275<\236D=\231\315p\276\204,y\276KZ\245<\244NA\276d\373\207=\351\000u\276\276\010b\276\241\"\177>P\264\200>\021`H\276G\025i=\020\272\371\275\010\3061\276\350\316I>!\276\221=\303>\227>\247\"\340=\216<\013\275\327\235;>\023F\206\276\301\334\202=\251|\002\275\246\307\251>\362\330\255\276\221\006\224=\231X\251\276\272rL=\001h!\276\0307\353\275\013\027\032\276\225\375[\276P\036\233=\310\350\003><\311\204\276O3\267\275n7\246;\222\246\001>\262\372\034>>\231.>\237\217W\276\3516\223<\377<0>\373\202\276>\343\225D\276N\374\235\275\34165\274\177\2608\276\237H\254>\215\\\242\276w\212x<\307\014\026\276\366Hd\276&\237o\276(\352-;>\326\225\275\274\304\234\276k\217\027>\216\246\t>\366Cc\274\275\023\334>\026\025v\276\3476\332>\246\306\241=\032]&>\330n\220>\205\037K\274\371\377\246>\213\201\216\275\004\277\246\274\300p\215>h\257\035\276\027\376]\275\301\031\216>\304\205\241=\363l\\>\333\374\016>X\252h=\221\276\306\276\300\377\232\276\225\0231\276\217\241\247\275|V\320=\210\334u\276Uk\022>K\037\325\275\275o\262\275\265u\030\274=1\330=p\t\210>K.#>B\003\243=g\225\326\276\313o\246=L\352\030>\302\275{=\220\010\243>w#8>~k\\>\312\260\036\275\354\r\266>\200\323\247\276\257-\340\276\365^\265>W\345K\276\217\305&\276P\273\007>\272\252\'\273\264\001\032\276\275\333\324\273\206\013\335\275\341\244\013\276\311&3>\247\355\003>y\266,>\247\255\301<$\306^\276\270\001;>HgT\275K\272\252\275\275\326\333\275`\345\022>[x\267>]o\213\273\262\036\343\274F\215m\275\332fh>\364?\020>\031K\201=\017~\333\276F!\210\276\017\207\017\276\033F.>\374\014\320=\3224e\275\326\225\256\275\313s\206\275\016\230;>E\177\313<%\300\372=\214\002\'=\243\350\210=\367\'\370<]\223\241\2751\354\013>9f\217\273\266\017\201=\001\302\n=i\351k<\321s\352>\222\275G>\322\364a\276p-\220\274C\314\201>ky[\276`B\207\276\235\3255>\331\035x>\266\317s>\260\344\014>\301\346\037>\342\372\224\275\177R\013>8\261\243=\223:\243>`\352\214>\313\t\225=\353\202+>\017u\204>\374\005$\276O\016S>\026\353\232<IS\221\275\236\275\t>\271NQ>\352O\231=\\8*\276fQ~\275p\302\264\276\036\370\257>\350yi9~-\216\276\2329R\276-\255\260>+\351o\276\365#\303\273\242D\320\275\360\353\372=\234\364 \276\244\311_\274\216\251\371\274f\220\345\276V\335\207;5\376n>yp\321\275\213)H>\204\037\002\276\031)\250>\275\211\201<\272\367\037\276WU7>\263lN>w92\276F\313x>\335\313u>F4\026>\030\355\030\275&\221\227\274\316lm<\303\322S\276xJh>\035\372\220\275\341U\312>\345\014e=\301:\341>[\002\227>\234M\374\274\3341\004\276\232%\200=\376e\310\274\360\333\370<\265\204\036\275\r\357\225>Y\334#\275\331\220Y>\2229\t=\360=\311>w\344\013\276#c\211\276j~`\276c\342#=\242\346O\276\277W\025\275\211\331\253\274i\3225\275\221\301\254>\225\241Y>\"\373\025>\265\213S=\351Z\026\276x\371\217\275\310,\002>\203;\000\276\'\331\025>\225\241\r\275j\256@>\273\375\264\275I\000\010\276\300[\023>\371b1<\213\035q=<\231&\274\246\202\263\275S\255\214>\245\371\231\276\021)\214>\030\253\213>\254\346e\276\223\027\376=\\\201A\276\354\305\235>.\313\366\275)<d>E0\246<\035l\313>K\233\305\276v\224;=_Q\033>\234d:=\337\263\225\276\021U\036>\374\034\035=\314\253\322\276\'\375\237>Wq\225>G}\240\276\350\243~\2756\237\311=QAm=\207g\'\276\230\022\306\275\254\342&>\010\370\244\275\362\024\014\276\325\360\234>\255\373\313>\277\007&\276+\326\010>\353\263\003\276\327o\355\275\256\204p>k\301n=\345\2435\276vC,\276\247ZE>\2768\271=\0267\241=*]R>-\036\215>\366W\211\276\352\241A>\263<\017>b\035\250\276\221>n>\210&\310\275n\335\205\276\310\373\223=^Py\275\276\376\267=T}\254\275\214 \257=\256\205\237;\000G\036>*\376F>n\303s>D.#\276\004\342K>\374\332c>i\035_\276/\356\002\276\007e\331\275\353)\211>2u\313\275\002\270D=\005\361e>j\241o>5{\265\276\346\271\220>\000+\212\276QU\341<,{\337>\256\007X>\372H\245=\347\274\256=\373\251B\276d\032\272\275\000,%\2766\007\221\276r\273\"\275V\343<>\004\222\344>\311\3019\276\267\237\233\2768ie\276\024\037A=&\200\267\276\241\347\032=4\276\313=\202\330\230\276\257P\245>K\347\007>\014\352\332=\357oC>\331?{<]\242\224>\344B\247\275F\230\353<G7\267\276\260\377\333\276\364\362S>\216\034\332=\211\317\336\275\201o\371\275%&\300>\327\022P\275!\245V>\374\003\261>\004k\320<\024u\000>\332\354\247\276\251\372\275\275E\364*\276zl\213>\227\374\010\274P&+\275A\366\241\274W\336\036\275l\021\275=\3706{>Q\342^\276#|\010\276\205{D\274O\304\332=\246TX>HB]>\302K\207=\215\267\250\275\237\030 \276\316\334\231\275M\356\355<\261\237B=\\\177^\276,\020\237\276\235;x\276\272W\321\276\264\004\251=:1i\275\2538\355=\272\323\031=\274>\263<L\266\316\275\226P\276\276\002<\245>\256\'\250=h\t\330>\266?\222=a\267\031\276g\212c\276\0035\034\276\\\356\247\275\371H\331\275\036oQ=\274b\321\274\260\332\212\275\245\262,\276\266_\223>dm\212>\023 \364<\257a#\276w\035\367\275\204}w>\\a4\274P}\374\274\262S\351<\216D\202<%]\314\276\257\314)\276\301\no\276\343\037<>\034\250\027>tX\216=\232~\241\275"
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: ",\266\257:~`\016<3\236\234;\214\370-;m\377\252:\326Uu;\316\310\241\2735j\334;\374\362\037\274|/X;\316\243\014\274\257\001\250\273iY\254;\245\345i\273@\346k:\216\221\240\273\353\301\246;\207\177\217;\375?\315;\371\02708A\033\247;\002iv\272\365v\324\273\370\316\212\273\3376\004\274\227\216\013\273\263\215\205\273\330\000\260;\355\\\215\273\343S\311;\257/\262\272Z\025\246\273\242\005\017\274=\360\230\272\216\362\363\273\005c\371:v$\333;\034\243\353\2739\324\256\272\265D\343\273\251>\2439\260\013\356;\023L\350\273\251\r\241;\366\255\032\274g\252\002\274\242\341\030\272\177\177\027\274\'\275\230;\336C\233:"
      }
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "batch_normalization/batchnorm/add_1"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\265O~?\236\360\200?\2532\177?\237\366\200?\340\236\177?\033\234\200?\200\252\200?;\336}?/\323\200?-\361\200?\361\355\200?3P\200?C\277\200?\026\306}?\367\224~?D!~?{\266}?G\031\177?\324\277\200?\303\007\201?I%\201?\3206\200?\301,\200?6\262\177?\242\024\200?|\334~?\2417~?Y\314\200?j%\200?\016\020\201?^A\177?\325\233\200?\021q\200?p\000~?\266b\177?\327T\200?\216\035\177?\026\026~?\241%~?\315\356\200?K?~?\257b\200?F\r\177?\335-\201?\177\"~?K^\200?\013\321\200?\2117~?\376\333\200?#F\200?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\031\206\035;\317\"\024<W\365\020\274\275\345\345;\222j\235;<\006\335\273\277\242\341\273\014t\363\273T\372\240;sR\037\272\024R\355;\222\317\016<?\242\227;\340\003\231\273\335\327\270\273\2778\372;=\265D\273\213\031\261\273:wU\273\243\\9\273\205W\030<\322@\r<\200\374\003\274 \306\347;\2015\371:\341a\270\2725\256\233:x\2155\273\272FI;0\021\246\273;\303\251\272^\254\242\272\023Z\026;\264\236\322\2734_*:,\325\260\273\226\214\311:)\365\370;\365\016\354;\231I\027\274\221E\361;\300\253\365\273\333\n-\274@\340\273\273\216\304\343;.\242\017<\255W2;\243>\370;\240s\023\274\363\342\033\273"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\307\014]\273\363\003<\273IwV\275\010\236\001\274R\267\016\271!N\333;\367\005\313\274\023,m:\241\n\372\271\246\004\244;\372\"\305\273\306#\'<\035\022{;m+n;^C:\273\033x\211<\267\017\211<\327 \266\274zW*;\324nl<\304F&\274dS\236:-)\027\274\253n\274\274\344\363\n\274\310\275\361\274\256\034\237:eN1<F\3610<\\\322\006<\252\014\003\274\210\333S\273}4\"\274(IV\274\340\033\274\274\342\025\325<\3013\207<T\230|\274\211Rn9v9\020\274\252\263\215<\305t\371;\355\216\314\2748\315d\271\334!\243\274\r\266(<p\207\247\273(\021\307\273k\334\026:l\330\003\274"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\261\3246?\313\001,?\356.??\362>4?\352\226A?X&\023?K\026E?\326G\013?\nb>?s\3261?\252\353:?\031\3301?\304 %?5pF?\305+$?\222\004C?hJY?\362\331O?\354\2179?\307@7?\032\2139?\177\354I?\340xO?kv9?@%F?z\2458?g\322\034?\036U/?\006PW?\013\316P?\300\3112?\273k9?\371\007]?\266\376\'?\317cR?9\233G?U\036:?DGY?*\327+?\222<$?\350\004K?\213\177#?\005GA?\307o\034?S\251]?\267l\036?\276\032F?\362\t/?ph\036?\2162@?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/ReadVariableOp"
  input: "batch_normalization_1/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_1/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  input: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_1"
  op: "Mul"
  input: "dense_1/Tanh"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  input: "batch_normalization_1/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/mul_1"
  input: "batch_normalization_1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 50
          }
        }
        tensor_content: "]\035\221=9Mg\276z\256\006\276l\345\021>I\214f\276\306`\270> \r\257=g\225\346\276\322\212\226>\231\224\232=\036\034\267>\003\345{\275\302\013[=\255<\300>W$^=\357\364\243\276m\030\001\275H\025g\276K\351\264\276\002\363k\272\302e\256>|\211\202=.\357\241\276\225\215\021>\357\020f>\311\250k\275Y\r\241\276\355\003\227\275\276`\214=\221\241\004\276\276\225\r\276\276\327\213\275\362\351\004>\262V\013=\337\320\245>\376\217\362\274\006X\253\2760\207M\276\014{\231\275Z\377\235\275\033@\345=\217\003\245\276Q\255N>\214\265#\276\364+\323\2758\255\026\276\350AD\276\260)\342\276u\031\262=#\252\214\275Q\002\005>~\337\006\274*&\234\276*\332K=\177sU>\036\376\317\275\377\221\205\276=\242\031\276^#T\275\275\367\030\276\0075\211>4r\335=\221\303\205\276\222\201]<k4\016\276\335%\344\276\250\366T\276L\206\005=\325s\222\276`\314\205>\365Ss>\004LG\275\351?\007>\014\347V>7\242\006\276\372\027\307<!\344\020=\215Sk\275\330\343/>\212\313\215\276\236\302\025\276\323e\034\276}\006\340=\234\227;=\320\017n=9\364\210>S&\215\275\204\230\345\275\262\024E=\330m\"\276\337UZ\276\317c\254\275i\033\307\275\274\035\366\275\312\373?\276\006\272c\276\2034.>\013\307^>\347\325@\275\350\224\203\276\026/\257>d\010\n\276\262\217\201<\230\030\344\2743o\013\276\316u=\276\273sC\274\374\036)\276\367\217V>I\263\263\276D:\333\2756d\002>\036X~>\331K\020>\335\343\303=\025\235\025>\363-E>\000\313\017\2756\202\355=5\0132\276\261\375\266=\312ja>\242^\260\275#i\021>m\206\005\276H\364\020>\336\346\227>\275\177.\276\023a\026\276\003\340y>*\032g\276\240H\202>u4\313\275{\035\263>GI\222>p\006\267\276E\311\270\275\0042\373<$\271\270=\243\345\">\224\265\327=\361\263h\275\263\024\232<\230\020\232\276\263\350Q\275\277>\260=\024\372A\275\346P\265><\207T\275i$\216\274C\350.\276`\311\271=\321\213\264\276\353\001\201\276\360u*=_c\274=\255\016\225=\0342\003\275\354\037\257\275\371kN\276\221\260\217\275\274\212\264\276\351\261g>\377\302\314\276HA\">\\\242,\276\274\036\316\276}\010\010>.\355\256\275R\264\021=\r\036\364\275\364\315p=\213\221\031>U\220\307=\355\215(\276\275\333\207<\310\355\t=Qd\207><\333#>\356#\347=\3157\027\276\267\374\350=gYD>}Ix>QN1>zj\346\273\250\250\304>\220%\037>\234\225q=g\311\350\275\037\035O\275\205O\322=\307\334\263>\236`\006\276T\226[><\0213\276J\026{>\305|\215>\303\241?\275F\002\232\275\235\244,>\242%\005>a\210\031\276\326)\250\276\032\206B=\030\307\034\276\010 \336\276\327\313\330\275~\"\245\274<\264\273\276]\235G\276{N\027\276\311\373\200=P\262\270\275\251\234\033>\361\037\333>\321r\036> \245\243=\244\300<=\315\226\215>\023\313!=/$s>\206\310\222\276\312i\033>\325}\322\275E\342\247\274J\017-\276\002\233[\276\277;\271>\324\010\'\276x\357\237<\321\004X>\271\0327\276q\014K>t\266#>\227Y\230\275\334\216\234>W.\231\274h\341\300\275\306\0011=\253\324\023\276\361\205\347=34A>\001t\205\276q\202\245\276oM\207\276\204\366\032>t\262\253\276\341=;\272\245\016H>g\311\344\275\254\345\375\275\013\006\275\276\304\267<\275\0028\221>rD\214>\030\246\340\275m\265N\276\312\007k\276VA6>\253\035u>\203@<>\367\256\253>\226\337\027>\030\224\002>\277\222\255\276\333\221\246\2762\343\235>\001z\332\275\310l\347\275\177\230\250=d\037)\276\320\257\200\276\243\n\253=\275\267\227=\344\027\332\275>\022\276=\202\201\257=\254&\342\274\214V\036\276\323z\217\275\271\303\"\276\2159D\276\302-\263= \366\216>\211\\\375=\331\366\201\276L\273C\276\260\004\273>\036k\231=c\335\027>\345\331n\276\005\221\307>\305|\214\276X\237s\276a?\274<\235\377W\276g\206\277>\217H\257>\025\031a>\356lt\275\354\245g\276\335\007\'>!\205\226>\334}\275\275\222\020>\275\355j\276>\251\237p\275$IO\275x{\210\276\321\315(>\036\322\242>\351\217\013>\213Q\'>\016\003Z\276\017\277\254>\354\313 \274\335\256J>\212\037{\276\330-\350\275\305O\267\276\371F\333\275+\317\240=\024\275\207\275\257\254\236>WC\252=\300\331o>\263}N\276&g\244>-m\344=9|\204\276I>\266=\333\331\201\276\\\354\246\276@\220V>\257_q=\246\177r<\373\253\212\275\035\035L<$~\213\276\tMO\275\232\323P>\233\201\233>\017f*>\253\326\304<1>]=\031\361<=\277u\264>t\273\265>\347+u\275\254I\276\276\037\367\177>%N\225\276\204\373\311=\\\312\325>\214\316\332=M\376]>\n\376\321\2746\002\304=m\026\256<\032\376\221=J\326\200=\377w\225>\324\025k>\320=u\275\202\202Z>\377\365\221\274/\003U\276a\020l>\004r.\276.\302\326\276\314]\255\275\032\213d>T\366-\276\376\347\200\276\262\272\332\276\376\306\265\276H\212\332>5@\035>QB\246\275\0166\311\276\351\315\357=\t\377G\275\301>\375=\261\307E>\217\3440\276\032Ve\276e\"\330\276\013\205E\275^\234\236\275Z\201\265\276$\266\357<{\2321>\356\001\241\276c\230\336<\263\251\257>\025KK>\266\362\217\276\322\017\252><\\\000>\035cU>\275cM=\327\335\321>\340\350\034=\257\224A\276\004[J\276\276Z\225<z\253Q\276\250\312*>\331\370\270>\230\261\t\276\266\355\207\276\210\3226\276\367\221%=\355\354\252>\322\211\212\276\250\3674>\263R\210=\206\317\363\274!4\256\27605\022\276V\327\014\276\230\247\237\276\367Z;\276\002&\316>\341W\247;\266\351\241\276M\313\377<3\347\305>5\373\254<\2433\010>k\253U\276\343Gs>\212\025\305>\245\310K\276.\352\273\276xg\304\275&\030\301\276\200\373*\276\037$\305\275t\214E\275\n\201\267\276x;\310>\370\320\033>y\245\177>WU\344\276\256\t\232=\245\272\354=\277S\034\275\272\177i>\277\2333\276c*\230>\001>/=\332\024\023\275~\323\\=\367>\231\276\361\212\266\276\357~\316<\202\272\376\2746\322\240=\007{\275>|\034\272\276\343G\027=\017\345\261\276-[\220=\210 \204\276\346.\220\275\365\242\300\276\307jm=V\250\003<Dk\301>\341\363D\275\255\363R>@f4>\210\261\303\276y\215Y\276\0355\236=\341S\032>9b\226\276\302B\213\276\226\232\017\276*\255\223=T2\365=X\372\255:Rx\247>\020N%\276\241\346\233<c8\265\276u\217\321\274Z\334 \2764.\017\276\023\322\220>\013\257\027<G\0000\276C\377u\276Q=2>\2323u>6\031\304<e\356\207<ij\253\276}@\230>:\372\274=<$\274\274P\341\255>3E\010\275&\2604=\\\262c\276Z\177\240=1\344\260\276\267\234V\275\323\355\264=\231\000\003\274L\277c\276\214&\271\275Sl\215\273\225!\217\275D\215\251\275P\030\007\276\\\253\036=L\304f\276\276\230~\276\374\247\370\275\"\354R\2762\346\257>o\330\366\274K^O>\336~\300\275\240\225J=\212=]>\203\020~<\177\252i>~\360\260=/v\031>\005\006F\2768\235T<\317\270\372<@\246!\274\001r\212>\345\217\200\274u\r\253=8^\225>))@\276F\265\324\276\230\230$>P>\022\276\302y\023>\205\311\221>\205\240\253\274\211C\006\276]\177\022\275\212\316\345\275iB\005=\271\231\010\276\212T\003<\335\340\013>0*\326\276\247l\334\275\332\266\236>l\235\\\2761\2605>\1774\313>\007u\332\276\034%\275=fC\261\276\337(\221\274$\252\231\276\'\355\033\276\260\246\242\276\271\233H\276\260\322p>\253i\232\276\301HG\276\247O\335\276\352\346\325\276\345\210 \275?\225\213\276\351\005\003=u\334$\276?\211F=\315\254\205\276^^\005\276\256k\230=N\206\254>\004 \037>\002i\255>\206\257\222>/\312\026\276\"\264)<\312\330\322\275Z\251\276\274\362\267e>\200\256\031>\312\265M=4\377\211\276\363J\374=Kh\207>\326\224\322=\346H\355\275\325\200\332=6A\201:R\005\217>\347\302d\276\370\203\373\275\007\274\036\276\334\223:>\241YQ>\341_I\276\317\013G>\205\365\263>\231C/\275~\034!\276\234\233\313\275\253\024f=\025=C\275\036fX\276Z\\\035\276t\236\317\275#\351\235>\237J%\276W\375\216\2763[\363\275\2550\321\275L3\344=\352\231\205\275S\316\034\275Y\214+>\307\252\016\274Qb\250=r\031\302\275d8\037\276$\n\251\274q\324\337=\331\201\270\275\203\r\005>\024h\">\354\246\221=\256\202\017=~i\205=\3021\227\276\037\271\220;S\013\023>W\032\255>G\017\236\276\373\032\323>\032\360r=\270\2216>\365<y>\321\303X\274\240h\213\275\272x\272=&A\320>\022\033\347\275\337\3623\276!\214f\276\333\360\340\276\014f\006>\332>\217>\253-S>\\\353\017\276.\276\207>\342\031\007\276f\216\311\276\306\340 \276\262O\002\276\030%`\276r\014\320=\360\343#>\302\244\255>\273\321w>u\251\230\276\263\367O>\264:\220\275\333\244\030\276\2516\236>\214,l>[\034\217\276M11\276^\035\306\276\317\265\333\274~\313\225>\001\001\257>\205]\205\274\303\375\243\275Tt^\275\274F\357=!\210u\275\370\305P\276\240\215\021>\364t@=\232\347\365=|C\000>\307)\217=\177|\245\274\320\243_\276\343^\214>\236\327\300\275\237\275\251\276\333rI>\362)b\275\024\021\357\275\300|[>\313\001\n\275Y\302\023\276\346\314\r\276\332\265K\274@\027&>\303A\r>\"\306\306\275\361\210\324\274\341\342\206>\254,\256>\033\006@\275?\214d\276\245\343\236=\213\217(\276\317\"C\276\303\024\236\275\250\013\024\275\232?\017>0\256\244=\036w\365\275\205\360\257\276\300\020\224>\347 a>\025\354b>\206\344|=I\323\276\276\002\346Y\276\266\321\243>&MZ\276c\2770\276e\321\342=\263n\273=\372\276\255\272\246\214\236>\030v\252\276D\351\222>\267q\271=*1\203=\032+\227>/s\225=\010\306\024\276\316\225j>\2514M\276\nJ\221>s\354\017>\217\270\002>\234@\341=yRb\276\347v\221=S\034S>\333)>\276\234\220\340\274\321K\252\275\n\346\020=If\256\275\244\207\215\276\271\325\214=\250\252\265\276\207V\350=\363\365\327\275\226\371\345\276\324\210n\276\270\t\207\276\203\\\220\276\t\332\"\275\246\004\260\276P\362\031>D\251\205\272\250\r\257>N\360\206>\362ls\275\307qm\276\2554M\276L$\376\275#\343\347\275N\312\362\274\246\352\247>\302\275\277>GCT\276\262\022n>\223\363\234\276\024m\355\274\003\000\342\276C\'\241\276P\223\214\275\356\0246<y\253\200>>\221\222\276\300j\311=\005\347\003\275\300\337\317\276s\031&\276\324\021\306>\313\243f\276\014\223~\273!}n\276$\346n\275sO\254=\005E\354=\340\312\301>\345\214\315\275f\002b\276\273/\363\274\222,\246<\373\032\334\276\2549&\2768\375\235=\200\241H\276\317[\203>MNr>\233\007\313\275&\340u>\241\334j>\257\326\307\275\300\273\354<\006\325\350\275$b\225>.\310\236>\013\245\214>jl\227>\315a\254\273\225\270N>`2\036\276\027\313\n\2767\350\212;\304\341\">\321\3251\276\\\205Z>\371\257\357\275`\245V>e\300\312\275\037\334\256>\345\346\256\276z\271i>\375\356\256\275>~\274<0\234\243\276?g\342=\240O?=\272\321\376=\017\372\327=D\240u<j\302s\2757\2362>\201\013\216\276\2051\204\274\216i\346=I\250h<\222&\220\276\004\372\225\276\036\331\225=3\236\232>\310\370\235\275t\035\314\274\202\264\036\276\032?\006>\000\253J\276qKA\276\3643\033\276\261\010]\276A\347\374=I\216\010\276\310\226\322;\220,\234>m9\013>\344\364\302\276\031\0162\276\017v\214\275\301\3120\276:\270\204>\3505\324\275\316aN\276\314\340\330=\360p\007>\024\276=\276$\007\342=\305t\260\276\361\353\n\276\366\374\256\2740{R>\235\205\223>\030\336\342\274cas\275\376\027\212\276t\323\221\275\032\236\215>\350]\362\274/\026Q;I\037{\274\307/\355=\311W\203\276s\025w>U\266)<\364p\231=\005v\244\276\220\256\260;\214&{=*\234\270>\266\215?\275B\257m\276\337k\276\276z\307\005>\017=\273=>\335\"\276\034&\001=\266{\210>\251?\000>\001\266/\273\000\362\326\275F\343K\276\275F}\274\300+\202>X\246\323>\020p\213>\200]6\276q\001\212\276|\230\251>\020Y\224\274\305\034\275>w\251R>\020\203\212=\364j\305>\372\241/\275\214\t\344;\010\230\212\276\307g}>\213\274D\276Y_\360\274\035M\272\275\327\240\327=\351&\213\276\324Q\263\275\250\0033><*\260>\234\212|\275\303\032\257\276\372\032\213\275\002\276\027>Tv^\276\332@\272\276\342u\257\274\363\001g\2767\233\366\272\372\213\274=\366T\331>5\275\221=Wu\247=\357\031[>h\037\205\276B\303\211>\017\324:>~\240\302\276Y\376\006\276E\344\264\272\3257\266\276\267\264,=\006\335\301\275c\230\275\276\352\361A>tuF>\204\224\273\276\020\230\022>\226\214?>\360?\t\275\014\232\030\276?\260\201\2768\3728\276\350\220\353>\352\276\244=u\367\222>\234\027(\275\277\375\270\275\006\rL\275\001!\023=:dC\276\t\347\021\276\272\272\275=\323C\267\275\267Y<\276\374\004\333=\017\300\262>\235\323\336=M\334\304>8=\262\273\244d\005\276S\235\326=DRE>\204\227\271\276\326\271\n>H\031x\276\"\257b>\273\354\226\275K\373\203\276_\362\206\276\014\022\375;\302u\203\276\345\037s>\362\205y>0\\\341\276o\370\340=\024\251\216\276\340\035Z>\207\233m=0F\245\275~\323\316\274\314\024\212\276x\242\226=\241\255\320\274Q\"\242\276\\\246)\276Q\246\260=\264:\224<\224\270\004>\232\201\260\275\303\307 \276\325N\273\275\235\207(= \320\007>\362\307\230>u\312\211\276\353\276\257>,\315c\276\322\331\234>\356\201x>\023c\352;h\225m\275\250\\\225=\311\214>\276\311\2447>\n\311\320=e95\276q#\276=\321\001+\275W\260\264=M\237\267\276J\222\021\276\263a\275\273\252\302\367\274\374\327\220\274\177\371\022>\365`\024<e\307\266\275\205\377\353<$\230\024\274\325A\235\276\270Y\034\276\025Z\245\273\332\277\316=\243\260\321\2766\023=\276\362\376\324\276M]%\274%\307\237\276\320Z\313>\246\216{\274{.\272\276\272\377\331=\000.\005\276\346\367\226\276\231\002\202\275\326\325\226=\207\260\363=\271\343A>\033\235D>\335\020\026\273\\@\342<\256\355\002=\273\205\201>\222\373F=\255\243G=\373\241\377<\325%\000=\363\377\276\275\366Q\325\275\211\223k=\271\306v\276\270\031\273=\247\347\203\275\253\325\234=UZ\247>\344\000\314<F\201\240>\233\003\276\276\r\261Q\276\310v\255>-&+>\3242O>\207\203\227\275\326\003\345<F9\222\276W\300\251\274\027A\240\275\245\347^>\014\357\322\2765\237<>\024U\227\276\353\205\204>\375P|>\245\334\311\275e\245~>6)\000>\217\300\205>\324\3634>+\373(>\362\016\330\275 &\334>x\325\266>\235\305\205\276\244\277\006\275j\254\346<Ttf\275\rO\266\275\3515\251>\302\220X\275\325\212\335>\215\016(>k\241\302\276\304\346\247<\006\023\272=M\233\002>9u\257\275]b?\276\334\370\302\276\360\030+\276E\206\245\275SN\003>\020\263\276>\343\337\221=\206G`\276\247\002\025=\237`F>\301\004\234=\n]\014\276\371N\276>\262]\207\274q\366\277=W\363\214\275\300\263\217\274\305)\225>\264\017\330<3\013\301>%A\244=\241]\236\275\032~\350>h\212\327=\375\270\207\276\276\306\355=\377\237\304\276*\373\217\275/_,>\376\307\225\276\345\366N=\315\231\366\275\342\373p\276\007jn>8\267\302\272*\\\215\276\343M\307\276>(\257\275\272\005\004>\nf\211\276FS\255<q9\201>\256\334?<\340\236\200\274z(\361<h\251/\274\270\215\214\276\203~M>\253\354P=q\245C>\347.&>\363\372\247\275\374\230\247\276\270\353\220\27616\303=\2241\304<\313\032\326\2758\\R=\211j\036\275\373\033~\276qjV>F\234o=\256\273\r\275\005\344\374=\246\310u>vP[\276\2161\205>O\265\334<g\200\3369\337y\242\275d?\221\275\354\340\214\275\017\223[=B\241\226\275\333\361/>\031\224\337\275\275\231\314\276%\344\357=\300?\203>\243\373\321<\244\327\251\272jT\202>\'(\026\276\267\006\210>\215\240\326>\020\300\r\276\366\305\222>\242S\301\275\364\311\001\276\305x\205\275\312\225i\276F\025\200\276\210\361s>9\323\214>NBu\276 \355\372\274\236\237\342\275V\230C\275P+\235\273(\334o\276D\361U\276CK\010\276\366u\246\274\221\250k\276\004\301\216=G\346v\276\226\253;\276\367\220->\202\364\306=[q_=!H\245\275\342\275\010\276\r\367\230>\306-\247\275\\\t\271<3q\264\276\010\353m>\230\261}\274;8\261<w]\266\275\037\215\020>I\022\372={\247c\276l+\240\276fa\221>\356Pd\276a\221\230\276\203\317\300>\352\373\376\275a\376\305>\362\317\324=\t\006y<_\021\341=\246\251\002\276\325a\351\276\203-\343=\307\301\014\275P\227\222>\3212\301=\022Y\257\274\017\222[>f\2546<[7+\276Mz\242=\037\377\334=5\227\315=\226\207z\276\263<N;\360\026\262>\304>\333\276I \310\275\304\nN\276\002H\204\276\242\314\n\275Mk\306\275?\243\222\276\213\365\250\276\315\310V\276\245\222\001>c\261\222>\246!\335\275\017\342\206\276|\014v>\005\312j\276\252\257\355<\006<\305>\214M\200\275Gp\350\276\217\211\272\275OCB\276j]~\276F\035\260>R\264P=\010\377\020\276\017+1\276\020\t+\276\313\001J\276\374@A>\271\366\370\273\256\312w=V\310\235=\307{\306=\375\270o\276\212\210V>e\227k\276\010\010\037\2767\271U\275_\234G>\354W4\276\377-\230\276\277\213\031<W\224R\276\237\225\023>\"\036\263\276\361k7\276\360.\203\276\230+\005\275\317\177\226\276FJ\342>\371/\377<\006Z\367\274\316\236\312=\"\216B\276\270\344\214>\322-\020>\033\333_\2769\\\314=;\375<\276\366\351\204\275\236{i>\353\315\343;\342qM\276\210K\022=\350D?>D\023L>\013\n\247>\032\217\350\275\234\352\233\276\003\224\023\276\363\203\234=\246\302\375\274;\354\350=*\302;\276\266\300\334\276\330F\357\275\377\326\256>R\022\200\275\363\236\002>\336\366\256\276;e\027>\350kP\276\311^&=\272\2774\276\024Mu\275\215\377\212\275\034|\340>\017\223c\276Za5>X\017|\276b\035\251\273\034\313\030\276E\365\210>\231T\032\275D\313\200\276}\337\005\276*_&\275$\203\372\2752X\324>_\002\307=\203*5>\302\236\240\274\305\370\225>?^-\276\363\305\347\275!?\246>m\223\355\275\371 \344=W\202\231>|\037\241\275\272\371\227=Q\026\346\275\314\253\242\276Q\312\277=7(\215=!\230c>\221\246H>\326\360;\275f\311\216\274\322\366\003\276:\236\003\276\237\207->j\217\200\276L\323\306\271b\225\360\275Q\314\240\275\355\017\177\276\030\013\346\275\016Jh\276\302\351\034\275O`I\276H\240\000=\034gM>\241[l>u\036I\276\231:\026>\313\037\263=7`\205\273B\236\215<\014\024\003>,\322\017>l\366E;\354up>X\260;\275 \307m=\343\342\220=VQ\371=w\303\022\276+\244S>\204\341C>o\002\222>\227\256\336=x\351\254=\216X\223\276\0252\023>F\240\314\276\221\010\271>\223\007\201>B\304\234>\003\\\235\275we\021\275\341\315\004\276\230\004\312>\024\260\230\274\244[\216=\247<\023\276\307\367Z\276$_\333>S\243D>\265\303t>-\316\232<\355\224\224>\024\033\244\276\344t\334\276f\200b>\304i\221>4\344\213\276\235\217\037>2\222A\276\340J\303=\003j\252>$c\263\274\\\261O\275\245\217\336\275\202\242\260=q\266x>,\336T>,0\232>\361\365\226>\005\312\033\276\304\357\207\276\257\244\000\276X\371\261=\240m\231=\267[\221\273D&\334>\240Q~>\340\327\235\275\365\2678>~T?\276\"\214\002\276c\270\240>\307\333j\276rKr>5\0059>\242k{>R\266|=\344\320\257>\3034\265\275`\324\022\276u\213I\274v\377\335\275vU\260\276\374\027\267>\351\360k\275\274G\216<\323\357\263=\026\n\024; ^\310\276\245\2024\276N\267&\276\242\227\230\276\277~\240\274\217\217\307=o\254~>\241\204\360\275\r\357\032>\0244\036=\017v\256>\376&\357\275\n\"B\276\367\022\235=n\005\301\275sn\000=\265\354\341>\331\267\217\276\345\202\203=\2509\272>\335^\036\274R\356y>QGA\275\270L\005\275g,\202\275\370x\371=\203\254e>\2748?\276\033[\376\274\003\006\216\2753h\306=\377\356^\275\314\324\017\276\226\333\264\2761D\322<$\251(>Z\236<=Kjx\276\232N:\276\251\277`=p\311}>S\212\271;1\\8>\311\230M=b\343\231=\211\334\327\275\354sE>\224\375#\273\275\002E\276}\360\264=\034n\203\273\333\334\262=\030\364\204>\253\361\230:\355\363\002=\240\346D\276z\256\257\275\355wS\274\331\322\252\274/sJ=\006\035m\276\037r<\275\034\366\203=Vb\255=\242\345\226<\333>\377<\325\016\"\276qV\235\276=l\357\273\323\016\311\276uN\205>\223,\n\276\272\356\313\276\t\321\250>\272\367\031\276\203)\226\276C\332\254\274\302\247\031\276V\303l=\355i\031\275\377\031H\275\251\217}\274\364\305\244\275\304\006\241>J|\311=w\275\347=@N\017\276_\375w>\345\177]\276\336\374\326\275\001\324\277<g\333\023>\203+\037\276-\272\227\276=%\022>C\240x\276=\260\030>\323\337<>\247\300[\276\354\010\324\273\020i\036>\273\354#>\224\357\021\276\265\014Z\275S\277s>\275\300\270\274\353\376\033;\1772\016\275K\377\265=\021\267\014\274\317M\271\276\3555\260>\273c6\276I\217\210\276\313\310\021>U\352Y<\337\225i\275\0211\364=O>i\276P\377\276\275*\210\241=\234\265b\276*\376*\276|\320\225\274\2075F\2767\002\215\276\316C\232>\254\021\037= \261\310=_*\r\276\212o\242=o\206\220=\351\324_\276\330=\232>\266\317\'>\030\177u>\236\366\276\274\027\017\204\276\217p>>i\255\235>\355g[<pj\314=cAW\275V\002s\276\264\365\037>8D\326=(\034\336\276\204\253\313\276\264\007\214>\275\312C\276\215wF>\200\324\236>\021\223Z=\313x\013>\000e\034>\333\367\303\276\354\375\265>\260\313\271\275\330Xe\2763\217P>\3777.\276\321\013\343\274(\311\334\276\206\225\257\275\\\377\204\274\365Y\t\276\020\243/\276\322\220\227>\252\354\250>\271\240Y>DX\244=\201r\203\275v4\354=\202\016=>\3111\017\276y\033\231=\300\2040\276\371j\211\276P\276\320\274\250\036\274=\"\"\362<P\257\226\275\237\254\251\275\255\364a\276\334Y\212\275\323!X=\301\221h\275\314\033y=1\250\236\275\\\356\251\275GA\263>\251\304\211;g\014n>C\023<<\346\211\365=\374\341\242\274\333\272\254\276\304\301\026>\220B\220\275e\244\024>\n#\n\274\n\002Q>m\351\330=D\026\333\275\013\022\202>\033\"o\275\245\351\226\275\334\202i\276\360BX=L\341\344>\360\342Q\275\003\215\020\276\025r1\276\364\361\243\276l\230\245\274q\n\264\275\035\350\226>\357|\230\276v\242\252>9\322\016\276\3143c>\353\216\320\276\360.\347=-\345\267<\007\214\235\276`\240\207;_\372\355=\322\017\213\273m}\320>P\241\n\276\325Vf\276^7\241\275|M\250=\254\2505\275\357\002i>\022j8>\373\240\216>\033\335\007\275\021Q\375\275I\250\373\275\320\366\222=\255&)>\376x3>\344\314\005\276\345\020l\275\260\0331>\225\247j\275d\334C>ss\270<\206NE\276\215q\010\275\216\2565\276\276\210\337<E\020M>%M\251>\310\251\214<\253\302&>\\9->\007>\251=A\210)\276`\t4>\233Z\352=\024f\330\275\301\202\002\276\240Q;\276\331:\207\275\215\315Y\276\337\226V=\255c\020\275\323N\010\275\327+\034>\336{\206\276\332\316\214=\010J\240>\375\\\036\276\262\022\214\276\363\362B\276\233\372Z\275\373\256(>\353\340\246=zj\335\276]\373\036=VA\212\276W\373\027\275E\267\264>\227x=\276\026(\022\276\214\327\372\275)\036\236\276&\261\031=\244\255\211\276\3409=>%{\341\276\343\273h\275\377l!\276\255\352o>1\000<\275rF\324=9\224<>H\3557=\316f\322=\333p|=\234$\276\275\267\250\272\274C\374\367\275cq%>\204\2004\276\247.r\2763\227f>K@9\276tP\213\276O\210\032\274\347\005\017\2765\234\214>\324C\'\275,\017?\276\03623>\275xX\276pi(\276`R&\276G\023\217>Z\330\272>\356i\000>\000\321,>\260J\226\2762L\340>\013\366\204=\007=\207=d\2502>f\325\331\275x\240\325=bW\235>\267\235/=\236O\245>\014\032\"\275\\\354s\276O\262v>\302\233k\276\375\024\360\275\330A3\276X_S>\306\002\267>\341\\\224\276\000/R=\362\305\302\273\245c\322>\225\237\324\275E\271\347\275\267U\016=>&\334\275g\220\261\276kz\203\275\263\005\360=\266\027+>\331[\305=\250\371\020>\'\016\203=K\232\030\276\236{e>V!\271\276+\017\317\276\205\335\271<\201m0\276=\360$\276k;\232\276\354\034+\276M\t\306>\320\273\246\276\2225\234\275\207#\225\276h\001\007\276\302\031%\276\315C\313\275\221\352\232\276\251j\023\275\230}]<.\003e\276\032\377\262\276\207\024\225=\254+\213=\n@\200>\210\207\271=ql\312>\020z\237=3l\254\274r\021\033=F^\010\276\240vt>8\342\266>\355\353\023\276;x\310<\251\312\264>\0169\214>\303\332\251\275\005\243q>1+\251\276\207\251\317<\253\362k>\256\355\214<\351\006\245\275\254\236G>!n\256>\327>\271\273i\3144\276\216Q\213=\331\365t=C\311\246\275\311\031\362\275\022id\276\302\222\262\276\376-\330\275\230\006\270\273\236\372\237>\265\214\350\275\250\205\276=\255=\326=\353\337\302=\227\210\322\276\277\264V>;\255O>\021{\255>5\337\337=\347\200Y=\034\334>>\007\2636\276\324\350\013>W\314\330>\271\264G=n\331\370=g\3676>a\263\204\274PC >`\225\312=\300\005\221=\272\241R>\361B7\276\251\331\034>6v\200\275$\326\211\276#\255 >\320\225\260=\3718\306\276\\<r\276\353\032->+\256\002<\326\214\305;\n\316$\276\230R\243\276}\233\205\275\24197>\3031\321=`\375\'\276\332\005\223=\030\355\276\276+\243(>\255\246\260\275\033\223\377={\\\304\276\216\316\007>^j\210\276]\232\210\276v\237\224\2766\260\306=\3110{=.3\367=D\034<>G\004\223\2754sz\2755k\261\276\340|\252\276\353\2056\275\206T\237=_\260\270\274.\274\212\274\0051\'\276&z\035<\246\370\254\275\222\356\233>^\333\225=\241\264Q>neO\276\035\310i==\367\223\275\335\262N>\250p\240=[\315\353\274\214~\025=\201\330\376=u\330\220\275\232O\210>\251\365\007\276y\205q>\2003\241>\220\034L\276=o\254=\262ON>\220\301A>]\222\300\275\013{\000=Q\371\217\276\323X\360\275\027\030\025\276\342nO>\205$:<\261h\020\276\004\177\006\275\201\250\003\276;r\320;\277cr\274\272\264\355\275\342z\340<\357\006\215\275\244{\220\275\255/\302=\032\365\220\276\351]x>\007\203\200>\364\237z\276\255\332\371=\343\036u\276w\316\334\276\225q\037>\001k\304>v$\031\276\032\035\022=\234H\317\276\215\202\240\275\005\250\206>\351`\230=\376nZ>q(N\276\366\262\245\276A0X\276Y\215R=G\025\244\275\203\004;>\211\247X>O\2506\276|@\251\275[y\254=\260\335!=sc\n\276\256=\020\276o\006\027>\025\305\345\275Q\305\320=\032\316\t\276.A\017\276\221\001\037\274/;y>\367~w>2\302\032\276\346\231\302>\244\324\340>\350\340\263\276a,a\276j\374\221\274@\325\354=\"\026\251>\267\204\276\276\034\216\227\274\327\235\300=0\304\276\275\375J\035>%\322\t>\313Gz\276SC:>\377\216d=\200C\262<\037\300\357\275=\211\220>v?-\276z\266\244>\276zz>G-\255<\251\243\010\276\224\372d>\034\252\301=\360\215\316=\000\372\233=`\354Z\276)\270\216\2766\277C\276<8\007>t\263\237\275\302\347\277>0\305y\275\370@*=\203\005\225=\351\231L=Q)<\276\017B\305>h\347\203<N(F\276\230\235\315\275P \013>*k\211\276\031\3623>U\304\243>\260\200\235\276x\375`\276\323N\221>%\256\267=s\210\204\275u8\350>w\'Y\275\271\207\314>\204\022\236\276a\302\332\276?\213\026>\310\022\216>-\237\300>\005\216\217>\355\n\361<\236\335\261\275\224\367\320=\376\262\265\275I\324\245>\302\017d>\255\021/\275\264\016\037\276 \260\245>\335\353\306<\030=\016=\303\n\002\276\233\306\240\276Z\200\376=/\014f\276\315\271\350<(3;\276T4\240\276\332\223\352=\345\326\004\276\322;\205\276w\267\215\276\244\353\032>LhE>|\232\r=+\305\232>\256\025b\275\010\261+>\276\301.\276\271\357\255=,\374\217>:3\232\275SD\331=e0\233>\267 t=2\371\004\276\351\203\035>\035\331\262<wa\336\274\271\251\034\276ATD>\177H\237\276\312 N>\354\353\217=]B\252\276\020$\221>\263\376\255>\003\t\346>l\033\223\274\216\204\327=\006\337\274=\330\311\311\276F\256\315=Am\230=\273N\270>\307\037\234\273\237[F\276\223\266\000\276\006y\217>\036`m>\006/|\276F\312=\274\354F\262>\025\301\255\275\341f\224>\353\2572>\037Ej>m\212\005\276,F&\2763u\337=\364\034\271>\250\354\200=\370\332\205=\014\230\323;\207\3651\276\016\364\212=1\352\366=\345(\327\276\240\301=>\0147@\276s\275s\276N\372\210>\237A\177>\310\336\017=\037m\275\276\337N\220\276Zs\020\276\305\326\264\274\365E\230>\267;\020=z\3117\276\364\325\030\275\323\233\326=l\361\000>\"\274\002\276\220\346\005\275K\225@=\363\343\245\276\265\022$\276\304\200\315;\233f\222>\307\223\322>\255cN>\202\202\200\275 t\032\276\207\'A=\301J\350\275\330\206\215;#A\364=KF\303<T\320\034\276\036k\241=\020\335\233>\375\364(=[R\231\275\014q\223\276\314Y7\276H\341&\276\274j{\275\244\262O\273>\336\226\275\305\233\301\276\031\234\251=\354%\036\276\027\373\224=\370\022\022\276\213\230\202>fj2>r\235\207\275\230\027\322=\242\201\023=i(8\276\270n\225=J\363\204=\341\246\261>\034\362\357<\367\300K\276\353\224z\276E3\335\276\327\344O=\"\305\236=\027JH\276T\205\222\275\306\255\226>K\032X>\340\313Y\276\021\373\320\276\001E \275\270\213\212=S\306\256>\'-;>\263>\224=\026\376Q\276\354\\\317\275\225GT\276\215\201\006=\343\305+>\203\037\346\274`&@<\241\312\013\276\232\274\r\276qa\225=\\\341\320\274cv\333\276)\\\222\275n\275\375=<v\332\274p\220a<\263\235\033\275\020\260Q\276;\000\311\2748/#\275\220\020N>z\327\255\276\r \306\275x\350\301\275\214\3469>\010\000\275\275\337\3140=\nnx\271J\245\345>\017\201k\275\361B\324>\ti6\276\307\016^\276I\325\240\276=\237\363=Lx\216\276\353x3>\371\034*=L\263%\276\267:\260>\230\233\231\276\035LA>d\177\305\274\250\266\234\276a\321\253>\363X\306\276\031\322D\276\365\037\217\276\025W\"\276\020w$\275\364\207\021>\375y\027<\261\033\201>\247\203B\276Gv\234\276+4\225<\006\314\201\276\244\266^\276/\214\335=\337\347j\2757\273F>\253\215\241\276\034\2018\273vu#\276\322 r=Z\273\277=\026p\002\276\010G\016=\257!\274>\010r9>\372\327\216\274\330[%\274P\250\317\276\313\202h>\272x\311\276i\300j\276\010v\337\275\2028\202>.\224\001>\222\031\254\275jdN>\225}+\274\\n\">U\371\211<\356\245\t\2765]U\276\214\264\234\276}A\200>\301OQ=\310\244\317=\343l\024=\344\343\330;\275\236\255\275\3674\000\274\'xj\275\tD9<\212\230\341=\225\003i>\032\333+<5E\203>\270\032\037\275\002[\273\2762V\220\276\272>\255\276x\264\207=E\"\277=\"\244\013>\254\210\212\276\034\274A\276\210\302<\275\216\227\360\274\332)j\276\301$\221>?b\240=\266,\303>\240\002\263\276S\213}\275z%\307\276-\'V\276\237(\025\274\313\304->(\226\245\274g\310\224=\211+L\276\313\005\234\276\357:\227\275\216b\001=\030\300\345\276\234]\274\275\350:\335=E\0006\276\356)E\274.\352\207\276-\211\240>\373\"\212\276%\332\250>\214\243\231=\350\316O\275QZ\211=9\024)\276\3448\350>$\3767>\335\356{=\220\177\321>\372g\037\276M\356D;\326#\337=}1\217=\027\315\037>\003\354\007>\217R)\275\211\n\025>u\323\250>\365W\270>=l\031;\305\226U\275dC\223=\272\342/>\036\223\303\275\324\017\220=\3559f\275\016Z\324\276\363f\211>a/\314\275~S\351=\332pJ\275\302J\264<\033Z+\276\261\231S<kv\277\274a^\231\276\r\361\203\276k%,\276\255r\363=\006\030|\275\\\035\347\273XA\001\275\254\024\322=\226.\205\276V\210\032\276\"\347\202\276\222y-;\241\324\322\273Y\263\232>\235\312\321=\220$\034\275\251\343\360\275\302?\230\275an\000\276\252P&\276nK\336\274\363\334\317=\2448\240\275l\204o>M.\247\274\177\251q>Vi\020\275EZ\205\2761\024I\276\014>\343\275\347q\202>\212\t\230=\2142\220\276B\372+>s\206T\276\277\n\253\275\006\211\237<\333\026\205>\342\313\351=q\217\375<\007\272Z\276W\232\017\275\266\344\207\276\361u(<\361\260%>\321\217\013>\354\246x\276A\016\036\275\376\335\032\276jm\221\275\376\024r\276\232A\017>9e\212\276\250\264\374=\266\257\014\276YT\225>\321\343\273\275\035\024\240>&o\206>\0233\347\276\360<\275\276\325j\267\275\373\307\177>L\375\254=\027\024,\276\027?\006>\356\272\016>c\362R\276\037\010\242>y[\333=\000R\350\274a9N\273F#\264\276Dl\002>\250\367\321\275\345\333\017\276"
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\234\027\272:\235\326\234;p*b;\273\031<;\350\2357;I\300\240:\030\021\356\273\234Zw\273\t\3236\273\005\307Z\273\254\2760\273\234^[;9D\006\274%\300Y\273\365\316\027;N]\367\273\347c\024\274\246\216\037\272j\246\233;\314\330\343;h\205&;\n\305\243\273\202\342\206\273K\206\031\274\016\236\017\272\222\275\206;k;\'\273\2232b;:\302`;\344\345\361;9\256\256\272\005\357\237\273\212N\325;\036\204I;\255\225\271:\275\033\246;\340s\240\273\245r\353;l\320\243\2723\005\361;^]\343\2736]\261;\017n\201;\017\033\234;\254\204\020\274\330\235\266;\261\364\335;Q5\324\273O\001\336\273\262i\232:"
      }
    }
  }
}
node {
  name: "dense_2/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Tanh"
  op: "Tanh"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: ")\274}?\200\216~?x\023~?\262f\200?5\337\200?\010\363\200?\247\221~?b\032\200?\205\246~?\221s\200?\247R\200??~\200?\247\373~?\336\"\201?\333\271}?\334\351~?\201\272}?C\340\200?)\345\200?\023*\201?;\022~?D_\177?=,\200?+$\200?\317\334\200?\262)\200?\251\241\177?i\367\200?\251\316~?\216\"\201?\236\340\200?\204\010\177?\360I~?\253\261~?\3479~?\261\342\200?\252H\201?\262\256}?\313\261}?\321%\201?a\252~?\0211\200?H\246\200?n\251\177?\002\253~?M\030~?\307\267\200?:\247\200?\262\261\200?]\343\200?"
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\034\023\240\273\025@\231;>\241\243\273\363\377\242;&\351\225\273\035\246\246\273\235\272\241\273\255\230\237\273\357\221\242\273\211\332\226;\350\352\241\273\301R\234;\017\215\236\2734s\234;!\334v\273B\232\235\273}W\237\273W\023\241;q\370\236;\t\326\232;\206P\236\273\022T\237;(\203\231;\013_\250;\233\211\242;c5\243;\001\330\240;ub\241\273mQ\232;\030hx;\240N\225;\225\245\242\273\013j\232\273\013\257\241;\035\030\235\273\373\303\242\273(\331\225\273^\202\245;\202\307\237\273\265\222\235\273*#\240\273\355O\244\273\2306\243\273\301B\241\273\035\020\236\273y\206\236;\006\253\240\273\206\276\234\273?\367\241;\027\337\236\273"
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "-\345\006;\t\\d\273\270\022\206;\341\240\237<\236\006\365:t\227%\273\257\"\265\274\210:\332\272\326\216\2148Z~T;\346\351q:\036%\326\273\267_\310\273v8\226\274\354\337u;k\340\364\2730\201\217\274zp\023\274<\020\033\274\376\341\224<\0141z;\212\024[;vWj\274\"\005E\274zT\233;\301\033\025;b^\341\273O\353\242:f\016*<[\"\331;\261\000\243:pU\201\274\324\215\031<\346\223\311:Fl\211\273\341\214\306;\211\025\270\273\243\261\325;\365\246*\273\346\361 ;\323em\272\325gt;t\233|\274\336z\355;vE\032\274\022I2<\270\0066<\317\n$\274\350\"+<4o\341\272"
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "g\360#?\316\253\014?p\036#?\001\271-?\342\304\032?\014C\036?\034j%?\\\230\034?\315&.?\320\030\035?*\372\031?+d\023?r\340!?\214\3007?\317\311\'?\t\253*?\361\017\'?\224,,?\376\352\023?p\257\023?n\242#?\r\345\006?\205A1?8\n\034?\316} ?>\262\005? \236%?\311\003-?\342\310%?7\250&?\201\307\036?Q\225\033?\264j\023?\212\371(?\352\342>?\232\220)?\022\231)?4\346*?\363k ?\377\302\000?,\225\035?\031\312\025?\305\252-?#\213 ?~\004(?\203\3173?\276\200\014?\242\302(?\014\2639?\"\252#?"
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization_2/batchnorm/ReadVariableOp"
  input: "batch_normalization_2/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_2/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_2/batchnorm/Rsqrt"
  input: "batch_normalization_2/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul_1"
  op: "Mul"
  input: "dense_2/Tanh"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_2/batchnorm/ReadVariableOp_1"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_2/batchnorm/ReadVariableOp_2"
  input: "batch_normalization_2/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization_2/batchnorm/mul_1"
  input: "batch_normalization_2/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "likelihood_ratio/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\245\275|\276ze\020>\356\342\320\275\361^%>\210\\\260\275\t\n\302\274\262\301\215\276D\215\014\276\024\322P\276\372\200Z=\324\235\224\276\317\220\014>\356\302\251\276\247\310\216>s\262\354\274\232q\333\275\322\272#\276\276 \367=~[\014=\314\341j>\240\322\215\276\266=\234=\341R\000>\231\240\317<\016EK>0r\025>\347hD>|\231\370\2750\014\250=\373\206\357=\332~\306=F\375\'\276\343j\207\276\262\016?>\226\367\212\276\2748\376\275\305\324\312\275\321P\322=3\001_\274I\327Z\276\231[\231\276p\221p\275\317\023y\276\312\\o\276\021D\237\275~($>A\205v\276\033\305R\276\320\243\203>\244K\217\276"
      }
    }
  }
}
node {
  name: "likelihood_ratio/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0048691569827497005
      }
    }
  }
}
node {
  name: "likelihood_ratio/MatMul/ReadVariableOp"
  op: "Identity"
  input: "likelihood_ratio/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "likelihood_ratio/MatMul"
  op: "MatMul"
  input: "batch_normalization_2/batchnorm/add_1"
  input: "likelihood_ratio/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "likelihood_ratio/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "likelihood_ratio/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "likelihood_ratio/BiasAdd"
  op: "BiasAdd"
  input: "likelihood_ratio/MatMul"
  input: "likelihood_ratio/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "log/Log"
  op: "Log"
  input: "likelihood_ratio/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\300\014\244<\203?\030>\214\370\306=W}\'\276\003&\200\275\352J\017<\016\005\273=\304j\232\275\365\n\027>\223\234\252=\356\316\300=\261*\244<\267\004G\275M\031\312=r\303\032\276\027\032\352\275\323\234\203\275\002\277w\274\337\231\233=\243\207\344=\306\3112\275k9E\275\"\207\007>75M\275\024F&\276r\311\222\275\314\260^\2751\240O=\325\343\376<\243B\240>\271\277\333=\203\211\342=]{*\276o\225%\2769\3534\276\322W)>\255\210\261\275\316\355\200\276\326!\210\275\270\037\202\274\355W\257\273\304o\267<hYB>\331\264S>+I&=\003\023\237=F\260\210;[\033\000\275h\222\014\276psn\274"
      }
    }
  }
}
node {
  name: "MYOUTPUT/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.13732092082500458
      }
    }
  }
}
node {
  name: "MYOUTPUT/MatMul/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/MatMul"
  op: "MatMul"
  input: "batch_normalization_2/batchnorm/add_1"
  input: "MYOUTPUT/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd"
  op: "BiasAdd"
  input: "MYOUTPUT/MatMul"
  input: "MYOUTPUT/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MYOUTPUT/Sigmoid"
  op: "Sigmoid"
  input: "MYOUTPUT/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "score/gradients/Shape"
  op: "Shape"
  input: "log/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log/Log"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log/Log"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "score/gradients/Fill"
  op: "Fill"
  input: "score/gradients/Shape"
  input: "score/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log/Log"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/log/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "likelihood_ratio/BiasAdd"
  input: "^score/gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log/Log"
      }
    }
  }
}
node {
  name: "score/gradients/log/Log_grad/mul"
  op: "Mul"
  input: "score/gradients/Fill"
  input: "score/gradients/log/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@log/Log"
      }
    }
  }
}
node {
  name: "score/gradients/likelihood_ratio/MatMul_grad/MatMul"
  op: "MatMul"
  input: "score/gradients/log/Log_grad/mul"
  input: "likelihood_ratio/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@likelihood_ratio/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization_2/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  op: "Shape"
  input: "batch_normalization_2/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Shape"
  input: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/add_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "score/gradients/likelihood_ratio/MatMul_grad/MatMul"
  input: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Sum"
  input: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/add_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  op: "Shape"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "score/gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Mul"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/dense_2/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_2/Tanh"
  input: "score/gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Tanh"
      }
    }
  }
}
node {
  name: "score/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "score/gradients/dense_2/Tanh_grad/TanhGrad"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization_1/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Shape_1"
  op: "Shape"
  input: "batch_normalization_1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Shape"
  input: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/add_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "score/gradients/dense_2/MatMul_grad/MatMul"
  input: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Sum"
  input: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/add_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape_1"
  op: "Shape"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "score/gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Mul"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Sum"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "score/gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "score/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "score/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Shape"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "score/gradients/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/add_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "score/gradients/dense_1/MatMul_grad/MatMul"
  input: "score/gradients/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "score/gradients/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/add_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Shape"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "score/gradients/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/batchnorm/mul_1"
      }
    }
  }
}
node {
  name: "score/gradients/dense/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense/Tanh"
  input: "score/gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/Tanh"
      }
    }
  }
}
node {
  name: "score/gradients/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "score/gradients/dense/Tanh_grad/TanhGrad"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "score/gradients/dense/Cast_grad/Cast"
  op: "Cast"
  input: "score/gradients/dense/MatMul_grad/MatMul"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/Cast"
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/truediv_grad/Shape"
  op: "Shape"
  input: "Feature_normalization/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/Feature_normalization/truediv_grad/Shape"
  input: "score/gradients/Feature_normalization/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/truediv"
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "score/gradients/dense/Cast_grad/Cast"
  input: "Feature_normalization/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/truediv"
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/truediv_grad/Sum"
  op: "Sum"
  input: "score/gradients/Feature_normalization/truediv_grad/RealDiv"
  input: "score/gradients/Feature_normalization/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/truediv_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/Feature_normalization/truediv_grad/Sum"
  input: "score/gradients/Feature_normalization/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/truediv"
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/sub_grad/Shape"
  op: "Shape"
  input: "Feature_normalization/Cast"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/sub_grad/Shape_1"
  op: "Shape"
  input: "Feature_normalization/sub/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "score/gradients/Feature_normalization/sub_grad/Shape"
  input: "score/gradients/Feature_normalization/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/sub"
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/sub_grad/Sum"
  op: "Sum"
  input: "score/gradients/Feature_normalization/truediv_grad/Reshape"
  input: "score/gradients/Feature_normalization/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/sub_grad/Reshape"
  op: "Reshape"
  input: "score/gradients/Feature_normalization/sub_grad/Sum"
  input: "score/gradients/Feature_normalization/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/sub"
      }
    }
  }
}
node {
  name: "score/gradients/Feature_normalization/Cast_grad/Cast"
  op: "Cast"
  input: "score/gradients/Feature_normalization/sub_grad/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Feature_normalization/Cast"
      }
    }
  }
}
node {
  name: "score/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "score/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "score/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "score/strided_slice"
  op: "StridedSlice"
  input: "score/gradients/Feature_normalization/Cast_grad/Cast"
  input: "score/strided_slice/stack"
  input: "score/strided_slice/stack_1"
  input: "score/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
library {
}
versions {
}
