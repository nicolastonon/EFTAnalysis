node {
  name: "MYINPUT"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 9
        }
      }
    }
  }
}
node {
  name: "Feature_normalization/Cast"
  op: "Cast"
  input: "MYINPUT"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Feature_normalization/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 9
          }
        }
        tensor_content: "\000\000\000\200uOT@\000\000\000@\0353\217\277\000\000\000\300E\024\000@\000\000\000@\335A\007@\000\000\000\240Z\037Z@\000\000\000\340\376\232\371?\000\000\000\200\275d\n@\000\000\000 \374`\010@\200\r\3455\224\327\340\277"
      }
    }
  }
}
node {
  name: "Feature_normalization/sub"
  op: "Sub"
  input: "Feature_normalization/Cast"
  input: "Feature_normalization/sub/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Feature_normalization/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 9
          }
        }
        tensor_content: "\000\000\000@\216_n@\000\000@\335\301\351\005@\242\231\231\031{\357\000@lff&\332\274\001@\246\231\2311mfp@<33\303\356h\013@\000\000\000\300\010\330\003@\000\000\000 \3148\002@\330P^Cy\r%@"
      }
    }
  }
}
node {
  name: "Feature_normalization/truediv"
  op: "RealDiv"
  input: "Feature_normalization/sub"
  input: "Feature_normalization/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 50
          }
        }
        tensor_content: "\307\204^>\'\036s\274.\367\323\276\376\252>\275\351\351/\277N\2473>\253!v\2767\232\275\275\275\312\347=V\360\006\276\211\256\203\277\272\2770?\263\255\252\276)c\356>0\014\255\276m\027\247>\353\245\204?\033*Z?\n\303\276\276\250\t\335\276<\221\036\277\252\327\247\275\027P\356\275i\357,\277\003\177f?\252\367\032\276\\L\324>\tf8?\224J\027?\2016\362>\350\031w\276q\376\230=\353\t\222<\207zr>\204/\022\277\260\252\331\276\343\344o\277\240\016\236\276\247\230Q>\220n\232>\035\276,\276\270)\214>\035\013\252>Tf)?\025\370\206>\242\317?>\346M\220\276\336f^\276\223\211\232>p\006\214>\252\026\303\275\261\200\245\275\277\327V\276\t\021\017\277\325\337\234\276W\311\033?/i3=\'`a\276\223n\225>\213T\313>\027\342v?\352!\000\277\0360\016?F]\000?\200\n\010\277\366\257\244\275(\363}\277!\371\340<\244n\217\276W\345D?8\325\021\277\327R\177>\310*\256\275F\364s?\364\000\215\276/*\030\277\001\036B?!m?\276\376?H\276|\325\362=\241\374l\277\365\321x\276y\233F>\366IZ?\240\241\032>\234\377Z?\3112X?\274\374E?V\313\032?Cx\r\276\023T\360>\013\344D\277\0337!?\275\211\023?\340],?\266l\220\276t\351\332=7\003\020?\3248\254\276\274\367w\277\263B/?\001\014\006\277\030X\'>\301\320\242\276\004\324,\275\253,\004\277R\251m>\003:V\277\252\345\027?\326U!?\013\304G\276?\222\020\277\237<\034?\010\343\263>WT7?$\243\000\277\264\304\272>\276\260^?\351\242\304\275\241\314T\276z\026\007>~\233\244\274\302\270\363\276\350\361\262\276\372\271\266\276\234\331:\275!0\000\277oi\352>\"\364B\2778\254\275\276X:l?\3427Z\276\357\370\3508\326\031}\277\346\366r=\326\263\207\276\272\000n\277<\037\252<\212~(\275\213x\363\276\315l\314\275i\372>>I,\370\275\376\230\241\2764F$\276+\326\005\277:\230\024\277\265~.\277\351VB>A\201\r? \250Y>\363x\320=\344T\254\275s\256*?9\267\025?\237\276+\276n\020B\277\024.3\2770\356Q\276\240\002\203>\331\330}\277#\242\324\275h\216\234>]\335\340\276HZG\276\177dB?\nx\036\276\227u\352>\305\021\274\276O!\021?\223M\200>\375\255\332>\277\314`>\333\010O>\t\214r=1\270-\276\232\374\247=)\212\370\276\024\330\032?*\360\267\2767\374e\276l\025Z?\352\037)>\367\316&\277\261\215\361>oRv\277t\376\330\276\021M\365\276fE\242\276\300D\324>r\t\205>\216\006U\276\220I\020\276h##\277:\214\214>\276+\217=V\255X=\217\267]>o6\365>\252\221\240>Q>\037?\213Q\312>\335\306f>\2278\024?\000\366{\276P\210\">\\\030\241\276y<r?\346\006U>\346?\313>\246\315\320\275\223\375\n?Lg\\=\375J\312>\247\374\245\275\341\3455\276f\020\233=\260$\210\275\004\312\001\276\341\375\341=\276\t\316\274}\250\212\276\023\200\377>^\t\014\275\034_C?\212\313\332=r\200\243\275W\223\314\275\274\233\221=\257\230\313\276_\320\222<ys\255\276\346\326m?U_\356>\266lL:g\200L?\367\346\"?\307|\216>\003\023 \2774;$?\373QV?\373\034\223\2769\257\240>e\002\257>\315\242~\275\312\3714?8X?\277k\222\365<\264\235\004\276_\327\315>\tKd\276\201#\345\276nF\247>\307OS\276f:\241\276K\207t>\304\270\022?\212\250\242\276\302\027 >wrv=\016}7?D\335M\277\354F_?\n\362(\277\310\031\271>\223\203\255\276\242r\016?3\035\242\276+\314^?\306\242\034?\355jd\275\260W\247>iNg?u]\276\276\232\330\203=ni}>q\270\376=\361.l>R\343(\275\035\214\214>*]R?xAH\276\316b\320=\301\257\215\276\333\010\314>8q\273\276i\223\010?\035@\210>\',\217\276\000\020\260<r\235&\276I\255e\276\304\312\206\276\037\024\">t\031~\276\037 \207\276\323\275\370\275O\264\024\274\336\204R>\375\356\007\277\"\010\007?pab=\376\261d?u^\n?S\311F?\177\316\354\276\253\273\353\276\247\306V\277\352\224\010\277%\002\246>\222\010s\277N\034 ?DDq\275)\3052>\275\260\025>m\335g\277\357\212\273\275\206\002\023\277\223bg\276\277\206M=\263^\340>\262^\244\276\2159\201\275\320\326)\277\214+\027>\250\246\262=\351sO\277\214a>=d\350\016\276\271\256P>\262:\034\277(\224|\275\321\005\"\276m\271\261\2763(1\275SX\245>\202\243H\277`T:?\001iz\2752\210g\276\201i\227>?\225|\276\261\037H\276cl\206\276\036^\264\276\350i\261>YW\323\276\316\353\354>\314\374A==\331\200?M\272z\277b\002\342\275-\334!\277sh(\277\t\235K\276\350\311\275\275\2364,?\201\001\005\276\201\261\'?\307\335\271>\313\367\004?\\\350\360\2759\200\332\276[\2632?\344\000\271<\221\223\363>sB\205\276H\323\361>\236\225w\277\006G6\277\334n\323\276fNV?UH\013\276/\036\344\276cH\211>\354\245.?\027\265\236\276$\214.?\327\216\227\274=`^\276\307\031\336\276\313\232\317>\307\241\026\277e!/?v\022p>2 k=\364:\201\276\3502\317\274Ev)\277B\235\n\277t^\212\276\315\320k?7\336w>\371\321\202\274\274\341\277\276\337\273\002\277\213o\205\277\220:X\277ON0\277\006i\305=\314\253\026?v\347\010\276Ion\277\321s.\2770\372[\276Yt\234\276\344\323\255>e`%>\222a\223>6\225\211\275\212\2767\276v\371\215\276\264=\326>g\275R?1\353-?\377\354E?\232V\213>\352\2310=\362Oo\277\205R\216\2769\026\345>j\305\225\275\374\025*?~\230\240\276\200\225\274<\016\266*\277%9E\276Rr\020\277\322\243\267\276\355\274.\277\032Pg\276(\267E<\312\320\\\277\031g\000\276J\036V\277\332h<?\242\206V\275]\371\365\276\010Q\340>@\304p>\227\036\266>\361\'\034?\211\021\343\2764\310\245\274\213\022)\276\216R\266\276\"\007m\275\352\326D\275\360\346w\277\321\002O>"
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "=\204\210<Dw\017=\360o7=\216\033\214=hF@=\272H\001\271\353B\210=\200=\262\272]\2322;\374PU=\362:9=\350D\3169O\271\217=\374r\333<\365\272\235=R\301\376<\255W\t=\342\230O=\017Lt=\201p_=9\211\020=\016yN\274\276<\221\266\313\020\223=\370V\377;\022\221o<\005U\013=h\270\221\275\222]\317<\252\316v9\356\270N=\243\200\225<ms\375\274\217\265j\275\252\273a=\243\327\276\274h\025\212\274i;\313\271m\341R=I\223\210=\224\232+\275[%\021\274\234\326\225\275\263\017\343;\231\032\022=n\306,=ud?=\356v\263;r\3308\275\373\232\273<"
      }
    }
  }
}
node {
  name: "dense/Cast"
  op: "Cast"
  input: "Feature_normalization/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "dense/Cast"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\"\245o?\221\225\177?\367\215\204?~/\205?:\177}?\275?\203?\311Q\210?\230.f?u\035\204?\0169u?I\300\206??\357{?\275\000x?\033 x?a\nz?f\334~?+\013\207?\231Xf?\017\023v?\"\033\210?$\251{?\235U\203?uMp?\221=\201?\207\023\201?\201b\205?\373\200x?\203\355\201?8J\211?B\225u?\001L}?\004\256\200?\240d~?U>\206?\262ht?_j\204?\377\267\217?\237X\206?\031[\206?\016{\202?\376\375\203?\227\225x?\036\264\215?\242B\206?o,\177?\n\007\205?\273,\201?\201\346u?sK|?0o{?"
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\343\373k\274v/\352\273\230=\030\274\241j\316\275\312\206A\275ra\276\275\004\261\264=p\030\317<\235N\026=\316D\r<\262\334y\275n\242\005=\276H`\274\370\350\353\274\344J7=\311\242(\275\224w\255\275\303\323\032\275\322Q\\\275\352\326\221\275\005\256\211\275\322\340\2559\263f\006\275#\001\024=\352\225c=\265P\262\275\324\027\024;*\177M=z\r\246<\256\316\263<R\'h\275R\247\3469\235R\212\274\353~\257<*\213\264=\262\217\362=qW\207=\211\324\205=\300n\324\274\303G=\275\004\306\247=\246\261\025=\016:j<Se\304<\275\t\235\275X\241M\275]\355\231\275t\'\t\275\211(\201:\327B\026\275"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\304\342\224>\343\2566>H\346\232>\220{\242>O\350I>\252\233b>\'\376\227>\024G\305>\311\206\204>>=\222>\027p\261>0\323\224>\303\354\250>T\020\276>\346\356\261>p\357\245>/\206\323>,\266\220>^\270\260>\021X\212> \003U>\334\017;>!\'\211>\306[\243>\313\345\211>p\257\203>F+\243>\363N\221>X\211z>Z\312E><w\275>\035\3660>Q\322\213>sm\215>\213\254}>\331\337\263>\310\013\246>\253\215\220>|:\212>\366G\237>zXI>K\271\222>\234*4>\023m\217>\330%s>\026{\207>\251\252\241>C\231z>\006_\200>2!\277>"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "@$\006>\277\320W=\367\0223>b\035I>\266P\351=\351R\275=\266\3160>\240\212\203>\010y\376=\016& >\226\216\213>s\367.>@\rP>\316\355d>\207\317\\>\\\276Q>7hr>\272\225\037><;i>pa4>\332\213\306=\312\354\256=]s\361=\230\342k>j\341=>\002\273\016>\0374@>\016\t?>\227U\350=\000\243\230=\277\005\201>\0317\303=\013:\">;\034.>\023)\003>\244\347z>\3527i>\201[#>\036F\017>?\001\034> 5\267=\030Q%>\203\247\225=\276O\001>\336\007\335=\221\035\002>\334\365W>H\302\016>@\010\017>\215\212\212>"
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization/batchnorm/ReadVariableOp"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "dense/Relu"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/batchnorm/ReadVariableOp_1"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/batchnorm/ReadVariableOp_2"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 50
          }
        }
        tensor_content: "E?\202>\200z\202=\037a\206>\177\020G>\223\000\304\276{\310\206\2760B\244<\316\000>\276z\261\177<\373\005\306=[7#\275t\017\017\274\373;@>6\335\013\274\024\321\325\275\216\033\207\276Q\367\247\276:\364\206>q\235\263\275G\222F>\326Y\022>\302e\016\2769m\327;\217\223\311\274\330\032E>+\202C\276\204\267\336\275wQ\374\274\317-P\275\202\377\021>\374\353\271=\347\036\312=\266\363\260=G\326\214\276\323\377\027\276\033\002\357==\232\005>\214h\256<ln\277\275\0065g>\215\311\205\276\236T\252\275\t\327\242\276\022\326G\275\r\361\253\276{\031\225\276\t%\211\276\024\215L\2766\004{>\304\302<\276\243\034Z>p\216\033\276\3271\210>\200[\202>\213\334)\275\340\227\360\275\336\233\232\276u\260\347>\270\024\017>U\027.=\301o*>\023\324;\275\252\')>h\361\005\276\257dB>\301\216z=:\201\211\276\267\242\347\275n\200\266=\234zP>\322\226\210\276s\250\200>\301\225T\276\254g\322\276sl{>\324\215\317\275\306e\370\275\341\371\'=\345\226S>\312\302\300\275\310\006U>?8a>\204\013\357=\365\006\222\2762\025`\275:\010\r\275\034\2545=F\374\344\275\204\'^\275\\\334I\276\005\346D<^eo\276\320G\316=\216\352\252>\001>p\276\2239g>s_\003\276\202J\017>\366\2549>\355zE=\235\252\022=\212\0307\276`\273\221>\022\200\177<\272A\271\275\350\255n=4\365\231\276l\236-\276\330\023\274>\025\367\022\276\003\035\233\275\r/\312<\334$\323\275 y\233=\334\276[>\n\334\206=\332\257\314\276HQ\304>\201c\223=\242x=\2765\204I\276\017V\254\276\006\261\371=\351\\<>(c1=\305\236\221\276\345^\314=\006`\360=}y\307\274\033L\225>\006F\233=\007\210S\275\235+M\276\213vP\276\261\034\274=\017\232\001\276\340\\\221\275\022\311\226>\265uo\276Q\250\364\276\2424\264\276]U\354\275s\200\000\276\260T\030\275\262\243\311=\'\242\237\276j\202\003=5/\240>}3\213\276qjz<\355`\034\276c[\244<\313\366\262\276I\024~\273\321\326<\275\3332\031\276U90\276\232%5\276\3269Z\275\212\265S>\222p\234\275\r(\255\275\n\364\231>\361\251\211\276\237\211\360\273\363\270\t>\366\344\037\274\355~D\276\007\236)<\371\240G\276\340\370u\276j\233\233\276\243\026\200\275%\241\330>\260\"\017\276\304a\202>\212\261\321\276\030d\342\274\003R\345=h\371.\275\275kH\276\205u\236\276\301\020B\275\277\323\306\274\244 ;\276)k\t\276tr`\276\222,>\275\3241\214\275wx\266\276\215,\216\275\037\320\354\276\037`\\=yo\241>\307s\245\276\245\027\231>c\022\035\276h\336->\027K\315\276\021\272\300>wO\255\273Kcq\276,\0221=\334\202<\275\2104\276\2738\203\377\275\013Y\231\275\357\225\261\276\353\276D=\010\356\322=f\357\311>%k\327\276\026\325\006\276\231\014\306\276\177\016\375\275\315*}\276y|\205=\224T\'=\266\343-=(Y\332\276K&\273\276qD\272=\334\235=>lt\024>\220\025\306\274$Z\215>\270\004\r\276(\362\037>\201u\321\273\215\364y>}\001\343=N+4>u\305/\276\250_\263\276sz\004=\214M\327\275/6\215>K\000\267\2760\330\252\276\340\337\245>\272\026j< \221\261\274e\266a=\207\333\300\274\326\260:\275J\304G\276k\377\314\275?\037%>\375\007\000>\203\275\237\276\242I\203>\340y\317\275z_g<\224W\022>kX\237\276*J\216\276\013a\225=\330\326\273>\372\242\370\274\025c)>8\304\211>p\312\301\276\212\221\242\276\372\023\275>\212\353\276\276\223Z\210\275\307\240(>\316\244\030>\024\033\261>gd{>\304(?\276\353\355\206>\002z\005\276\233\242}>(m*\276\207,\245\276\307+\247\276\330\344\216>\3513N\276\"\247\235\276\241\\H\276\214\367\211\276\227\016\266<Dl\255\276gp\016\276\r\321\r\274\031\212J=\204\250M>\022\270\241>\222\277\267>\333\350\250=7O\303\276f\333\245\276E{T>w\002\031\276\025l\235\276?Bj\276F\3129\276^\305\345=\233X\307\275\354ga>\3240\255\275l\035\332\275\3634\374\274Q\2536>\337\233\245>(Z1\275\271\002\316=\223d\205>\340\346)>\357\350^=\201\226\204=\304\262\035=\254B\030>(\202\004\275\313\262U>\3732\264\274\334\222\232\275\277\205\307\274\355\311\310>\244g\240>f\216\355=r\324\274=r\313\315>\333W\305\275\027\302\222<\247G\'\276\004kX>\277)\016\275=\237i>\331\003->n\276\321\276gd!>F\317(>\365\010\245=a\210\266\274\253\310[=\361\217#>\221\312\037\274S\344-=0_\006<\240t7>\373%*\276\206\314\304\275d\345\246>3\222\222\27537{:\032\013\025>\345kP\276@\026\220\276\317\304\271=0+?>)K\033\2764\227\260=q\250%\276\274^\260>s4\031\275\261\305\201\275\312\341<\274\345\'%\276\331\321\255>\032)\373=\330\017\214>\023\244\241\276NF\235\275t<\261\276\203\034\"\275\2630\333\275\351]\204=U\224\234\275\025\357\036>J\177\035\276\310\032\263>}#X\276G\202\363\275\333:\226>_\252\263>%\271\225>^\016\036\276+\341\025>\254|\354\275&\306\235\275\303k\2309\004\371\004\276\332#:\276Z\022\223\276\223f\217\276L\215.>\327\254D>\007\237\223<pO<\276\353\244\026\275\242\356\344=\277a\300\275\353\317%=\337m\206>\360\276\233\275\023\226\031=6?\200\275\270\312\241>\371\204/\276\026>\243>\323C\225\276\277\353\234\276?\371P>L\346\274=\353/\022=$<>\276\375\216\232<\273,s\276\036\366V=\3245\247\276\245Rd\275\036WU=C\200\220=(\022\210\275\227H\350;d\320\003=+\360\332\275\263\347\023=X\334\267>pG\343=st6>y\0043\276.Y\200\275\326\265\335>\324\354\033<\200\026[>Y\032\346\276U\214\234\276\2117\250\276\367})>\350\301\214>\275\024\033>_\316 \275\321\007\206\276\376\262\025>\032\326\030>\303\214r\276t}l\275d\007\313>h\231R>\\\t!<\332\347\253\275\035L2\274e\005\243=\344+8\2762\273l\276\263\342\307\275V\246\202=z\352\255\276rL\026>\364\320\257\275\227Y\367=\243\303L=\223\340X\276\367q\267=\255\333\037\276~\254\236\276?\\\217=\027\302\262=\307#\007\276.\246\205>\223L\000\276\021\034g\276_\374\233>\005l\030\274\301\244=\274\2355b>\357\220\233>\334\221\037=\372\276\335<[\243\264\276\271\002@>\327=R>\203\237\222;\354\352@\276\226\254\350\275z\324/\276\237>\234\276QS\025>c\335\312\275\307\000\341;\226\310@>\277\251q>\r\372\307\276\301\363\264\275z\230\223=\333\000\236\276L\364\351>\306\320\234\276\324\372A\275\373)\200>\321V\232>@S\266>M\212P=\356km>\351\235\311\276x\270r\276lB\\<\256\311\014>\307\346\273\274P\252\236\273;6\027\276\343O\363=`9\340\276I\243\325\275|]*\275;\355*>\235\310\214\276\335\217\363=\304\274!\276.12>\236\221\372=\032f\266\276\177\302u>^\254\002\276\356r\030>Sd8=\001\271\200>7\204G\275\266.\323=g\020\241\276}\365\221\274\300\006\017\276(\332N\2760W&=\351d\311\275\361\301\265>\302.\240<\2170\207>\2305\354=9\241\232\276]\361\271\276\020\241\242>\014\260\004>\240\"\252\275\334GI>\343v\345\274y{:\276\360\222\002\276\242\034\";\307_!\275\373\336\365\275\333\344#\276TjL\276\324\310a\276\'X+=ro\242=a\302\245\275V\213&>,[y\274a\007s>>\335\213=`3\247\276s\323<>\340\002?\275\322ZB\275\001\033\205>\252$\276<K\323S>f\033\034\276o\220[>\n_u>H+\223>\320\307\317\276\212\013\275\276\251QC\275\342\254C\276P\251\234\2762\023\243<\342\275\202>\225G7\276\027\202\201>\213&\212=rc\323\276\326\341\374\275\236\316w\275\311p\'\276\330)T>\221|\227\274`NK\276\200s\320=\'S\221\276\277\316\342=\316\020n>z\211U=T\323\216>X\036V>o~\244\276\366\030\355\274\210Eh\276\334\3544\275\240\025\023\273\204\013\203>\325\033\300>*\"\304=\374\274\014>\007\266\351\275\252\334\006;\236\265\264>#\222L\273\350\212\264=E\274\240\274\251\022c\276\203B\271>\022\361(\275\223\202\272=\342_\236\276WN\226\276\203\215P\276\245\323\235>0]\\\275<\340\201\276\317\237\030\276\367m\351>e\356\225>\346\375\035\276\364\340(>\374\312\336\274$\270\320\27597\253\275\n9\356\275\np6\276\375\255X>\352\331\263\276\323\213\375=3\020`=\323Z\361\274\377\267\322=O\026\212\274\033\017\033<.j\301>R\370A\276\341\376(>\313\3624\276WJ\215\276b,\277<ylV=p?\203>\t*\230<\307T\367\275\277\272\022\275\223\035o\275\316\rB\276~\3636\276w\313F=\033\"\271\275\200\372\334\275vrH>\275\026\306>\3532z>T}T\2769\t\007>\322\256\031\275~\245\356=\354\331e>\212\031\345=X\253g\275\272.\203\276Q\021\034>>\320c=\264\3617>\n\205\312\275S\300\333;Y\370\252\276?\027)\276\352\264\033>\314\353\347\2753m\337\275\215Z\326\275a\313\211>\244\344\316\273:(\251\275i, >\250\231d\276\304\223y\275(/\306\276\361\264\034;\256\222\253\275\252\024T>w\277\022\276\311\237\236=5\275&>\352\245\276=?\372\323\276@P\233\276\341\223\331=E\300c\276\230\207t>z=\376\275\032Y\324<\361c\210>\031\030k>\247\363\230=\224.\024\276\300\024\321\275\356\266\034\274\002\325\201\276Q,\235\275\263lo\276\235\320\342>EX\t\276\377\233y\274\220\267\037\275\002\310\273=\220\242\333<\361\235F\276\rg\204;\270.\177\273\032i\316=\325\336\001\276\0252\203\276\377\336\335\276BS\270>*\227\026;N\013N=i\033-\276\005\210#>\341\343\261\276\256\007\t\275\250\312\233>S*d>@\372\351\271\007\210\223>K\221\322\275\240,\255\276%\003\236\276\306\235>\276n\307\264>\327}t>\226\336\231\276\356\275\206\275f\373\235\276rs-=\253u\216>\204\013\027>\251\317\220>\216\313\020>\326e\226=\004\366m>\020O\347<\376\300\024\275Qd\233>\254\364}>\254\260\001>$\302\243\274m\200\317\276p\243\r>\t\223\006>\304\345\211>\347\327\230>\274\356Z\276 \317x>\326\'\216\276Y\311c\276\321\351\312\276_u!=\336\3545\275\354\254\265\276\365\374\335\276\264\351\245\276\302\005J>D6\357\275\225{\236\276^\030e=\252JG=\237\307\217>\203y6\276\333}c\276\331L\016\276\362Di>\357}Q\275\0134E\276\223\370\241\275\256DG>Ip\315>\325\032B\276C},\276\307\316\303\276\222\336R\276\305R\210\275\201\2011>\263\213\306<\220\267n>\030\002\360\274\264o\020>\354\360\256\276\356\316\241\276U\025\225\275\343\3422\276\276\365y\276\337\362\247>\323\373,\275b\313\223>=$\235=\220\034o>\n\\\206\276d]\023\276\351%\261=\236\"\t\276V4\030\275:(F\276\253\371|;\244Q\027>\r\232\\;Dg\371=\037R\023=b?[\276\221\252\324=>\313\005>\234\344\312\2750\246S>Q\335\201>\225\212\262\275r\333P=\222\242\240>\036\210I\276H\221|>u\221)\276\232Q\361\275\377w\020\276<\'j>\000\271\001=$\030\200>\021U\250\275%\004\361\276\312\255\330>\024=\344=\335\314I\276\200\327\234\276D~\300=\225/7\276v\201\352=\317\257%\276!\017\207=\257p\322>L>\205\276w6\213\276\356[+==\231\031\274\246V#\275\365\350+=\354\352\361\2742p\374=\231|(=M\243\332\275?C<\276]%\002>\317\260\214>\2756\310\275\367\337\360=<\262\312>\217\177\255\276h\252#\275\025\326\003>\213)p\276A\215q=\327\235\346\275\376\344\256=\2528B\2769\217\023=Q:<=nkx\276\000\225\374<:\006\001\276\005P\271=\242\264\246\275\334ly>\271\215\016\275\033\242F\276\215|(=\016]\334\273g\212\362>\027\n\302=\346[E\275\274\002\027\275E\323\326=\333{\027=\275b\027>\356\367\235\276\300\331\025>e\025\345=\340\274\331\276\t\031/>\025\270\243\275\304%n\275\006\330\311\272\227Kv\276\355\214\223>S\003\267\275bf\036=\340\'\252>\277\025\253>,7|\276\205\227\216=\023\030\235\276\324\230\264\276\251\272G\275_\331\326=\2314\224>\340^v\276\234\002\230<\331\024\216\275\233R\242\275\254\245g\276i\001\013\276\t\263\230<\237\022\337\274Y/\016\276\022i\365\275\200\314\225\276o\033\211\275\350\273\033\276\2132\305\275~\034\255\276\300(\205>\'\331\244\276\327\037\321\276\357:\001\275\204\304r=\362\242\300<~Y\214<^\032\214\274(i\347=\026\005^\275_IR>I\220\300\275\017-\257>\375\373t\274\355WO\276\016\310\336\276\377\3062>\317q\021\276\342\253&\276,\003\223\276\366\030\260>\226\242P>\361\030\235\2762\355>>\214Y \276\334\270\223>\020\346\306\274m\204)\273)E#\276\213a\270\276W\013\022>)\026%\275U\322;\274gi \276\341}\276=\257\324x\276\356\240\210=t\301\315=Q\2338=\231\020N\276\312\347\361\275\031\275\212>\366\374B\275\010\016\276=\210\373\250\276\353\267\372\273T\256\242\271]\2373\276\014/\352\276\002\032\375>=\270\300>\320\376\235<\354\232\267\275`\350\250:\307)x<\r\001\206\276[Y\031>\027\373>\2757H\311\276\036\033\350\275\266\304\252>MX\345>y\203;>\362\214\305\275-{~>\000\224\222\275\0049\313\275\301\254\210=#\316N\275\233-\241\276\221&\025>\367\347\317\275\371\223O>iJ\305\276\205)\343=L\350\365\275\312\003\337\275\260hS=GY\003\276f \343=\263k5\275v\361\261\276\0144\275\276k\t\231\276\3450Y=\220\243_\276#\315\313<D\252\312\276\342?\326\276@Q\324\275:\027=\275\334v\224<\225\354\254\275\250l\226\276n\177[\276\275r\"=\303\215\261=\357\243\344\276\0219l\276\002K\206\275]\227\004>\323\377\266\275\341\360\361>)\205\255\276\356\321\376\274\316\244\034>\032\367*\276\036-\207=+\t\323\276\363\265\320\275\341G>>\036\324\304\275\025pV>\235\210\225\276?\312\247\275I>u=\271\324V\276j\232\355\275\233\201^>\023~\030\275\300\374\303\276\021qN>\225\357\204>\335\225u\276o%U\276S\035\274=\316\350\222>\300\255\264>dK\202\276[\025\206>\320\373\001>\274\311\245<y{\354\275\026;\366\274A\226@\276\212\361\252\275B\276\331\275\215y\334=\317\262\246>6\357\227\276\334\340!>\\\026q=\306\341\351\275\324H\304>\322\\\266\275\332\333\270>wp\360\275\242\177>\276\321\213\307>^\002n=\014fn=8d\276\276\036\352I\274\332\362\212=\032v_\275\277\016\030>\336\366\245\276\364\0221\276\252(\007\276\0064\304<\344\352->_\352\360\275\343\314\224\275x\303\234;\0321|>bA\266\275\231*^\274\240\202\032\276>\340\244=?\307\370=[\266\344\275\021Q\035=\350\030\232\275\335\335\302>\r3\217>I]\216\276<\217\235>\241\201u\275%\032\217\274G\364l>4\340\r\276\345\305+>t\221\217>\247u\035=.\334>\276\265\223\344\276D\024C\274`)\233>s\344\370\2754\302\240\274|\227\314\2745\3315\276^\213\334>s\314\013>\357r\005\275rf6>\221\225\335>\006\033C>\24401=\301\330\330\275nHc\276:&\304\276)\271\237>\243[\330=\341p]=\024\334,=f);\275\377\270\214\275\'b\351\275\360/\254\275\022\320A>\247\3540>\271\255Y>\2542R>\350T\341=h\264[>\025\020\255=5\225\032\275\275gh=lW\r\276\204\205\217\276RkE=\305\252p>\254\246\315=\3051\374\275\275\357\232\275\235\201\364\275hgB\276\307X\322\274\005\235\271>\324\004F\276[v\364=\272\333\226>\242D\374\275\016\374,\276\262\362F\276F\274\235={\205\322\275HS\317\276\333&\220>\026\205U=\3325\352;\301\277\273=\317K-\275\306\310\366=(\225\336\276\212\021i>>k\223\276\306\236\023\276K_H\275s\3513\275\343\353\014\275\352\201\204=\360\254\032\276F)h>N\267 \276\272\377\316>\316\257\204\274,6\026\276\357z\271>\366\244\216\276L\304#\275a\244\263\27526\372\275a\374\214=\203h^=\263\242\240\276X\272\351\275\316\001o\275\253sV>\262Q\213\276\'\010\032=\"5\025\276b\020\314=T\367\260=\220P\014\276)\310}\275\372$\001>\234\272\206\276O\317\303>\202\271*\276\272\312\220>[\220\026>E\3013\276\347e.>\327\250v=t\374\334\276\256\265}>\235G\222\276\213\311\005>4\253\212\276\342\264\236=\005\324\002\276\177\376U\276\342\355{>1\344\025>\204s\">8\212->\213\004\267\275=n\236\276\013\353J>\253;\357\274\010g\215<SD4<=2>>\321\357N>~I`>\237\262B\276\317O\346=N!\221\275vW\206\275\221\'5\275\366~\216>w\034\307\275G73\276\2612\226>\014\237\271=\\\256\245\2766\005\232=\214\304\274=3\200\236\275r\001]>\216\236\004\276\346\\\215>t\360\363>\241\357\305=X\346\225\275=Y\300\275\002#\"=\003\240K\276brO>{\023:\275\356\022\006>\373\247P=\000\225\274\276d\303\245\276\200\314\3437\014,\323\275\3743\344\276\357@\000>\211\312\270=SE\344\275\201c=\276\037\366\205>A\272\310=1\312\356=\325\314\025\276;\273A>d\311\306>\256\312G\276\250<q\276\311\342\252\276u \250\276V\036\221\276\"\242\237\276\316:\r>\250Y+<\00776\276\300\351\332\275\245\342\027\276\367\336\320<\354p\361\275l\365\243\276q\020\314<a\031n=\243\331\331\274\313\0378>?\276O>\310q\360\274\031Z\333\276TQF\275\234\223\242=Q\313\014\276\377%\037\276b\344\271=\363\2751\276f\021\024\275A\271S\276\375\325\202>\364\350{=\212\344G>\220\246\277>\020\243\000=\020\207\260\274X\240\234\275k0\325=\210\306\326\275\'*\205>,\314?<<\205&<[\032\232=\220>\203\275\3459\350<\241\251\363\276\212\267\022=\272\254\336\276\217\264s<\245q\263>\204oD>S\261\023\276\032*[\275K\272\354\274-\354\274=\032\353\035\274\263\275\262<\365w\244>\257\236\221=\002b\021>\351\334\257>0z1\276\355\260 \275\222\336\034>\362&\247>\230i\225\273Vg\354\275\005\321\203>a\245\343\275\305P\273=l\253p=3\355C=\242n\027\275\251\321$\276i\177R\276\245^\033>\330j2=\350S$\276\354\367V>p\246\236\275\237}\207>\373\350\"\274\331\004\232>\312\003\262\275\222\357\230\276\220x\217\275\n\352\016\276\"\342\272\276\314VE>\340\202\265\276fu\310>\360\0047>\300;\210\276\354\224\034<1:\323>\177\204\033\276\014\227\325>&\334\230\275\032\257\261\276\247\360\017>\010\362\020>\3518\341\274r\315\023\276\030\354Z>\213\337\030>Wf\232<>\203\'=$\006\202=\021\302\234>O\315_\276\247]^\2765\0171>\377AG\276\363\235\377>\343\252 \272\234B\233\276\210#3>\354a\331=\226g!\275\320\223\243\276\314\022\003\276\202\002^\275!\016\037\2766\301_>\263\374u>)\370h\276\325\335\243>\035\223\206\276P\036\313>\033>q\276e\007\243=\270\352s>1\002\004=\317\302\260=\227\233O>\340\252\247\2725\353A>\255\356\266\276\007\013\203<\2105\230\276=\306\316>9\323\025\275\351\215\022>g\252\020>\'\242%\2761\007w\276\354\\\017\275\312\316\263\276hL\365=9\374\361=\023R\231\276+\371\201\274\351t\346=\231\324F>\000M\272\275\317aM\276~f\204\276\265\002J\275\251m:=\251\342\362>1\025\"=\014\253\206:@\212\203\274n\201\022\276\030\215k\275zz6=\345Q\217<\376\203\265\276\017\334\254>\306]\313\276%\224y>7E$=\247E\3729\267+p\276\270C\211=R\215\264\276\"\363\304>\231\200u>\262\256c\276.?\203=\202\037\016>\230u\311=\334*g>@d/\276\203o\352<\t\232\273=\222\210\223=\332\326f\276\207\016\'=\031B\311>\246\230\233\276\364\016\010>\021\210\251\276<\222\005>\354\330\213<\324b\023\276\236\022 \275\003\236\321=\367\241.=aq\216=x\n\220\276\304\325\375=gi\231\273\241[\214>z=\314\276\356\270\226;\352\203\367\275S\317\211>E\027\014\276\356\335]=?It\276\265\237\372\275\227\210\251=68\022>\273\370\220\275\227\377\001</\372Z=\2217\013>\333\210\005>;\203\200\276\243\360Y>\221\320\275\275e\271\274\276\2434\247\276\025\312\277=&3\323\275\243\217\306>J\\\315=\022\366V<B^[\275\277\233\031>\356\206\006>\252\225f;\235\301\223\276T\256$\276\252f\024\275g\2621\276\272\207.\275Z\222c\276\214\311(\275[xD\276x\351\001\275v-A\276\320\260z>:\204j\276k:+>\320\311a>u\361E\276\216\345\202=q\311\213\275\273\257\321>\025\263\316\275\344\020\">\257\222\223\273\355\342p>r\310\236:4\201~\276\001\037\337\276p]\001\276\364\243\235=\276\302*>>g+\276\007\367e=\320{u=\333}\014>\314Qt\276\213z\313\274\314<\035\275\000\271\207>\000+ \275Y;1=Y<\234\274RNw>&\021V>[\376\245\275\360\325\247>Z4\373\275i\272\206\276G\331?\275\333I\221>u\220\237\275\321m\337=8\027\242\276\2248\234=\177za<=D%=\230c\275>\244.\017\275\031 e>\202\276\245>\263\261f\276\276\017\026\276\010\256\224<\365e\255>\230X\361=\017]\371\275?\235\220=b\037\362\275_\337\210\276\254\3770>\035\345\240\275p\377g>8\255;=(\\\340=\000\271E;(\003h<\306\324\245=\304\016-\27544\020\276F)\032\276\221\rL<W\236\326<\247-\007<\340\232s\275\256\345\273\2760_\027\275[w:\276\027 \321<\361\253\203=\332\200U\276\373\006\206>Z\206\342\276\t\361\017>\005\306l\275\026m>=\247\235\326\276\007)\035\276\265\264 =\305?\256\276\235`\257\276-\357N>\315O\204\276\372\365f<I\322\363=}\256g>\314@\274\276<\204\207=\217w\311=\006\232\236>,\322F\276\034<`\275\006\233\211>\311\267I\276\252gM\275~\316g=\354\030m\276\010\3045>GRZ>\214\2748=#\025\217>\263\341\307>\032\306\000\276_zM>\224\333@\276\024\276\207\276\333\332n\276Q\216\256\276\0208\\\276\317-\244\275\242\035g>v_\244>~\025\227\276X\305/=\342\000K\276\347\000\241<\372\240-\276C\034\253\276\\\325\227>\245\225a>\332\200%;\240&\317\275\340gG\275\316V\313\276\rU\202=\2122p>9\356\'>\235\023\212>\276\005\031\276\375}x>\234\241H=+\356\027=\213\230\304\276o\034\306\275&\216\364=\364\036L>\212\366\006\276\303\254\275=\256%\271<\312\260\217>\340DJ>\364mO\276\t\036\343>\244\037\257>6\305\321;9\325\006<\300\250\302\275\302\036\311>\262\326(=\275\230\260\2754\241F\274\341e\036>\276FA\276\177\303\212>u\016\324>\030E\005>\010f\346=\t\307\306\275\211\373\021\276\354\276@\276/\265\301\276W8\312<\237\342\214\276*\326\016=\036Q\276>3\3621=x\037\320\275\321\200\016\276\254\371&\274\311\2153\275\270]\354\276B\016\201\276\005F\214=e%\255>tX\246=\362\275\213\276E\024\023<\345\304\310\276e\301\341\275B\313u\276\034\336#\275\226k\353\275\366#\247>\202\312\220>\232`\323>\216{\216\276\334J\262<\317\274S\274U!\352=\377\305\010>\250~\274\276\033\264\212>\313B@>>\277\023\2765\270\245=\255\325\336;\305\241\357=\317\313\374=\223\376\353\274\253\322\034>D\031>>6@Q>\034\365\245>\365Ie>v\031\270=j\306(=\362\361\251\276\313\302\324=\376n\343\276\375\234\304\275\234/\000\276fZB\276\\M\342:\010\342\316\275\364\237\313>\030\225\005\276\343mK\275~\212\n\276__\366=\344r4>\353\370\365\274\231g\017\275]\365\275<\347\301\245\276h\343\225>\233\t\237>U\240\340=}\035R\276T\252t>\021e!>\035\"\223\276\216\032\204>\316X^>\r!I>\037x\202>\'\317\203>\315\267\363\274=p\264\275\206\003\234\276\022\244r>\220m.>{\002\312>\301\257\237\275e\327\002\275T-\t>7\0350\276j\037\226\276,\225p>\027\221C>\023\335\353\274\373nW=\353\255g>\263N&\274\370\256U\276?\245\231\275\200<E>\375E\217;.o\213=\201\351\232=5\017s=\251?I\276 \024\021>\367\372.\275\354\222\253=\213\256.=\203D\033=\037^D=\227>@=\370\334S>\024\274\215>8\272\203\274e#\025\276i\000\004?\275(\032>k<\220>\305q\257\275\364j\216= \224x=\216U\036>\001\025P=\243^\234>\354`]\275\335F\216>\331\220s>\212\340\312;KA&\276\000\234\023>\306\010\310\274S\202^\276X~\030=\\\035\347>\322\361\327\276J\235\346\275\374\2714>$\253\326\276\001\210\306<\300\334\027>\376*\247\276\224\023\340\275O\351\315\275a!\252>=\314W\276\264\271@>\246\265\236<\270\224\350>\254<P\275\"w\220\276\370\027\361=+q =\036\027\007\275\261_:>\201\206\037\276\017sp=)\226\244\276\254\201s\276\317^\263<@\316_=\225\244\27292\202\024>S0\350=\007\343\237\275\225\273\231>i\257\326>\201\343$\276\230\256s\276\270\014[>\022\302\004\276\236\330\177>\305\323\222>K\234\032\275i\t\341\276\34456=\247\350\355>\340\254*>\004\2147\275\3043K>\210\216\010\275\247\n->\004U\270>[*p\275\n0B>L_\025=\371d.>\253\237\372\275\010E\022\276\253b\274\274\362\031\256\276z\326\355>\275\310\r\276\2756\177>\231\355\334=\234\233\202\275*\372\201>\330\303a=D\337\022>\201VL\276\0066C>\017t\216=\357\272\214>\222\344\272;;%e>\r\213B=&\002\243>;u\331\275mVA\276&x\351\275B3a>\212\026y\275x\024h>\277m\356\275\263\035\251\274\252L\342>E\010o>W\366\224>\3230{\276}\207\241<SNr\274ir\230\275\303\234X\276\314W\366\274\"\216~=\275\253\314\276\013\343\253>|\343t\276\354\354h\276\307#\303\276\236=\310\276\215t/=\350>\366\275\306\177\361>\227g\321\275\262\325\275\276\304\351\226\275\370\313\333\275\302\024f>\032\354\224==.\271<!;\303\274.\276 \274F\334N=\250\220\254\274lo:\275\255r\033>\310\322\226\274\320\351\013\275\241:}\276\326_+\276\200]\t\274\241\234\211\275m\335S\276b\0100>\272\034\203\276\340\3623\276\215*\010=v\341v\275\206\325\274<p\305\305\275\026(\217>E\345\213\276\356s\334\275\241\340\215>\332\205\361=\246\327\373=\336\367n\276\"\022\017\275P.\255>/\300y\276\244\212\367=>\3322\275Bp\200\275\275Q\303\275\317W\211\276R\263\273=\"\257\235\276\372/\320\276\331\030\201\276\022_9\276\227\316\257<\231a\306>\240\244I\276B\001\030>&>\261\276\265\324}\276\261v\257>\023\373p>PNb>\303\323\026\276?\013\016=,c\240\276p\030\307\275\236z@\274\305:c>X<G\274\254<\212\276b\022\367\273\307n\010>\244\224\304\275\014\000\364\275p\305 \276.\323\332<\033\331#\276\207\332i>\311 \224\276$\343J>\017\251\275\274\023%]=]U\213\275\300\305\024\276\036\3300>\315\263\243\276\033\036\204>)\027\346\275\227\320\234<\205\036\177>1]\n>k\221i>`$\355=c\350B<\'uz\276P*\224\274|?|=+\267\334\275\245\000\356=\0235\226=\022\030\225\276\'?\367\274q\211[\274K\231H>RU?==\013\255>c)\223=\262,z>>\273\235=#\032\235\276\220\373\266>\267c\003\276\230\031Q=6\321\363\275g\310\235\276\312\\\033\276\205\364\021\275\020\n\226=pN-\276\304\326~>\362u\267>\273}\213=A\261Q\275V-\036>\000\210;<U\257\210\273Xa\357\275p@\361\275\350\346\033>J\2761\276\2460\366\275>w\'>\274\370H\276^\037\215\276\317\251\264=\302Z\034<i\264\370\2756\351\202\275PP\352=\357\t\250\273Y_\254=[TE>Y\366W\276\363\371\342=P\311\304>\000\t\022\276\217\004y\274\374\2636\276\203l\243:1\344\376\275\226\301k\275\221\017\247\276\304~\032==\335\260=\320\203\307\274d\322\276\276W\177\034>%\337\035\276\245\247\002>V\027\310<\251\317\200\276\244A\'\276\003N\224\276d\323\003\276>,\205\274t\025\251< )w\276,\316\310>j?I>\357\2628>\373\333\317=\233\'\036\275\3705\271\275\257\216\033>\320)\357=$\311\306\276\030Ab\276\243\304\036\276\240q\244>N`\307\275\232\367\327\275\n\341X\276\222\217F\276\301O\246\276\3155\315=\306\225>\275\037\004\205\276+\277\205\276#\347\037>\205\252d><w\244=!\"\035\275\307\364\214\276\351\nE>z\301Z\276\210\313\207\276\311C\341=\n\261\307\275l\302o=\016\004Y=\\\270\020=\345\253\333<\271V1=2\275\177=a\260\271\275]S\262>\003\r\247\275\020\274\257<\320\226\264\276\342\tF\276\304\234\267>\247\347;>N\221x\276M\347\325>u\324\033\2754\025\373\275\236\246P>\007\211\327\276\003\021\204>\343<\224\276\257eb\274;\310r<\343\017\037\275f\313\026>\234\235(=\352x\301\276\303b\236<\350\004\221\276t\240\241=l\356\327\275S@G>\310\210u\276P\267\316\275\265[\025\276B\030\327\275\031\222\024>\347$\270>^4\232\276q\t\263>\261\034\201\276\267-\001\275\300\246\330\276\374\320S\276Z\275x>\371WN\276\357Fy\275\006\247\262\276\300\305\324>\241\002\217\275\227\221q\274\300\214\231\276\007\266\211\275x\330\233\275\374@a\276\0037Y>-\301X\275o\273c>>\201\320\276I\3276\276\027\355<\276\027`X\275B2\266=\017\244\017=\214\351\023>\020p\326\276\351\r\353<U\337\003=p5\320\276\377\336\305=\027E\214=\250\213Y=,\237\266=l+i\274\320X\323=\362#7>\313D\244=\311d\177>\336\300*\275\337d\240\276\023\260Y\276\347\340\307\275\"\352\276\276\321p\221>\'\362Q>W\347^\275\224\242\230;z)8\276\271\374b\275|Qz\276W\372\327<\'0-\275$#\216=\374<n>l\234Q>\226\361\330=\010 w>\035\316(>\3725O\276\233y\210;;\251\336>\251P\256=\230\376F\276\220\252 >v\260\004=A\314\'=dki\276\224\201<\275\002\305n\276\010\017\240<\365\366c\276\344..\275&\330\241\275\261{\354\275\026>\035>\264\216D\2762\006\000\276\225@\233\276\372\224*\276?\002\253\275J\216\004\276F\233\267>\016\235:=g\353\246\273.\2433\276\363\221v>i\243\233>\031\327\310\275k\327~\276\210!\276=\025F0\274\005\276%>*\312\244\276y!\253\276\262@\317\2764\203\302>\037<\017\276\373\232z\275\345N4>8\334\317\276\227\305k=\222\021\'>U\274H\276\272\376\325\274C\252\275\276\023\002\304\275/\330(=\224,\277\2764\250\n\276\2241B>\315\236\n\276\036\365\036\276C\030<\276o\317\'\276\363!\205=\375\254\242\275G\325,\275\036C\366=\377\233x\276`\0272>\027\347|>q\034y\276\271\005O>\357t\204\274LI\223\276\321X->zf#=\375%\335=\036:\211\276NJ\251>#\356\326\276\2700\315=p_\200\2764\313\006\2740\022M\276?\014\203>\203\335\220>\361\037\032\275\355\301\243=\177\247\235\275QJ*\276\264K\271>\336\253\343>rY\212\273\246\2039>\270\030\230\275\307\211\235=\356\303*\275,}\002>\250\345\220\274\237=\270=\324\202\275\276\337\226\327=\367/\363<\256\3547\276F\2578=\024\320\337\2747\230\335\275A.\224>\2602c>kA\214\276\375\372\021>sCg\276\361@\300>\367\004\031=C\250\255=\320\213<\276\024\342\t>m\013\302\275\234M\352\275]\253\222\276X\0063>TSL\276oW-=X\204\316\276\020\307\326=\370Z\252=RzC>x:\005>|#m\276`e\270=\230nj>\202`:>\\\313,>/~0\275\025\032\371\275\035T\027>\323q\315\276\031\325A>\277\265\225\276\267\263\366=\242\317\275\275}h\013>\340Ql\275\261\007\375\276\2711\352\275\330{\331\276\366\031\355\276\363\337\232>\372\013]\276#\001(\276*Eo\276\356\277\240>\227\007\244\276\023+Y\276\037j#\276\223\222@\275\232z\273\274\340V6\276T\273\276=\265\366:\276>2\023\273\345\237\257>\036\3207\276\365c\311<k}\253=\002z,\275<\201\250\276Lsf>\\`\241\274\005\317\t\2769\t\241=oKl>\210-\024\276\313\351m\276\024\246\340<\006\341\203>\021\243\327=<\210B>cT\261>\333D\205>b-\205\276F\0008>\353Z\211\276)\243\223\275v`\006>\017\035\302<\275\331O\276\237\327G\276\'d\275\276\320\315P>H\320\212\276L`\341\276O\017\337=\343\325\323\276\017Yd>\'\367\010\276\307&\350\275\240\354\031>G\226\022>\355\371\373>g\325E\276B\024\261>{\210%>\316/\223\276\315\214\264=\353\364\217\275 \242\234\276\001P\336\276\010x+>\241\200:\275\350\321\027>\330\2762\275P-6\275n]\232\274\3232\276\275N\256\003\276/\037U>j\331\326\276IO8>n\023i\276D\202\212\276\022\r\364\275\344-\253\274\265\007!=\3308\375\275K\2365\276,\271\336\275\264T\352\275]%C\276(\3526>0\262\227\276oz\375\275eX\207>\257\330X>\340F\035>\343b\245>\037\230\322\275\326\225\263>\311\322\227\276\354\017\247<\n\0319>aP\220;\302\200\227>\r*6\276CD\257=\204/\367=$\244\350\276\021\305\214\276\336\361\3648k\017\274:\003\377\256>\260\206\020>\213\367\353\274\340\326H>+p\014>\226y\205=s?\350\274\376/\334=\235\254B\276\273\365\205\275\211h\236>\266\224\232\276\256\'`\275a\321\220>\261\t\020\276Y\323;<\262-\r>-&\214\276\353\315\347:\304\000)>\302\316E\274k\370\232>\325\020\236>pd\215=\243\304\325=\360\034\230>\246I\005>{R\267\274\301\370\225=\343<\321>m$u\276\204\224\003\276q\333/=\366\310\214=W\321\211=y\364\226>\366\372\007=\376\242\325\275\264x\356\274\3313|\275?G\303=W~\332=>e\243\276*\244\350\272\232\201G\276\227\217\216\275\001J\321=\020\3739>uW\310\276\373f\002>\0319\214\276W\0024\276\217&\254\276\322\003b\276\212\'\010\275~\177\\> \307O\276\000I.>6\220H>-\362Q>\316\244\303\275\367\262\017>\006\177\227="
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\350\033s=\326P\231\275\tx@=\270\020.<\226yF<#@\351<\004\354;\275GU7=\rc8<bz\346\274\325\237-=\350\316\255<\317\327z=\305;\r\273\"\360\230=g8O=c\331\266;\020B\235=^4\327=\317\374\032<l\350\220=\300P\026\272\371\273\217\273\030\356\370<\351\247\246=<\263\263=QX9=\013\3663\274r@\267\275\334\016R=\335\244\214=\336\345\307\273[<Z\275\333\\\003\275\357\251\024=\035\267\n=z\300\351;\272\350\331=\245K\331<Y&\264=:\363?=wE==\2019\266<\177\205\303\274d<\014=L\377\375<$\245\216=b:\021<\014\t\326\274\225\277k<"
      }
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "batch_normalization/batchnorm/add_1"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\260\203t?\372\232~?\375\377q?\316<x?h~t?\340\242o?\244Ru?\276\276{?R\334|?hV{?N,n?K\367j?,\274\177?\275Su?\026\374r?\206\313f?\360$r?\251\275k?r#\210?;\350v?`\014n?\256\023z?(\313\200?\351\252\203?\211\234n?\001\274k?b\336~?\2623\203?\353\342{?G\np?\363\267t?\351\025v?\377\222\204?\303\000z?\017`|?\350em?\220B\206?\223\264\201?@\311y?\224x{?9\330g?\211zr?\242\214z?\2534\177?\350*q?b)l?\271\353\201?\372ps?\216\001x?u\222}?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "2\022\2559\225\374\2629\n\321\2249`\202\223\271\340Y\2179\206\232\302\271\361$\3279\341\237\260\271\226\230\211\271\277\036\000:z\253\236\271O\252\246\271\026\t\207\271.{\2279$)\2469\263`\242\2718\211\236\271\314i\243\271\252\'\270:&B\277\271\324\\\2409\221a\2649:\207\3319\354)\035\273\"\322\241\271h\304\254\271\367*\004:\017\370\2109Wr\3379e\256\2429\237\376\2429{\022\2529.\342m9\031\262\337\2714\317\3059]\024\231\271\316\377\'\271\257\0378\271q\266g\271>\251\234\271\246{\250\271\003;\257\271\313\252\2239\363X69G\332\254\271\377\002\2509\030\340\2169(\362\224\271\235\032\2759\014\250\2509"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: " 4\023?\307\216\031?9v;?\'S6?\272\201\214?p\375\031?R\033\t?\220\242\026?\010\312\324>\211\303\022?\250\212q?\271kP?\023 \353>\371\242;?\213ju?%\341A?\000\344\000?\373\366Y?\376c\036?3\333\033?\315nW?\023\357\020?\241\001\354>,\243\365>N\256\033?i\304b?\200d\001?j\260\t?\341>\357>\277\350\014?wlD?\354~\360>\230<\030?7a8?\005\004\353>\3731O?\277\003\314>\324\2325?\007\225:?B\tI?\203o$?K\336\021?qP\322>E\302\363>\372\031^?\335?(?\\K\374>\366yB?d\034 ?\007U\037?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        tensor_content: "\231\'4?\305\3535?\2468\201?\356\343\253?\321\355\005@\204\026\030?1Q\322>\304UZ?\016\363\307>\222))?S\020\010@\3551A?\231\343)?d\372\223?#q\327?\327\'\321?\223\2510?P\201\314?\251\215/?\234\0169?\377\242i?\324)5?AU\361>\212\310\365>\"j5?+\355\204?p\346\007?:\372<?\026\315\026?[\021\366>\233mq?\230\254\n?\030\223&?v\3212?\033|\017?\\\327\213?/\223\251>\366\244}?\222C\263?\310\000\222?\305;r?\'\212\371>ck\017?\254\325\322>\2744\217?L>\226?\240\014\310>\026}\267?rp1?\001kR?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/ReadVariableOp"
  input: "batch_normalization_1/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_1/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  input: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_1"
  op: "Mul"
  input: "dense_1/Relu"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  input: "batch_normalization_1/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/mul_1"
  input: "batch_normalization_1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\031^5\276)\377)\275\016\271?\276$yt>\346\022\222\276\2644I=\001n\027\275\303\353\220=\324\'\334=\314}*\275\344\300;>V\322k>\020\305.>j\347\247\276\343\231}\276a\021\200>h\327\221<i\263\236>\230\017\030=\351B\201=\340.\302\276\362\2059\275V\253)\275P\351\260\274\"\226\363==\367E>v,\027\275\316\327\271\275q!\201\275\010c\321\2756\256\263\275$v#\276G\253\224\275\210dq=Ac\005\275\235x\026>u\320b=\"\001\217=i%\336=\004&\341=}4\234>\2429=>\340\256\370\274\376!\353;\335x=>\030\216d\276\337\345\370\275\224\004<>\334`\220\275Mr\356\275"
      }
    }
  }
}
node {
  name: "MYOUTPUT/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.00030127845820970833
      }
    }
  }
}
node {
  name: "MYOUTPUT/MatMul/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/MatMul"
  op: "MatMul"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "MYOUTPUT/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd"
  op: "BiasAdd"
  input: "MYOUTPUT/MatMul"
  input: "MYOUTPUT/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MYOUTPUT/Sigmoid"
  op: "Sigmoid"
  input: "MYOUTPUT/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
versions {
}
