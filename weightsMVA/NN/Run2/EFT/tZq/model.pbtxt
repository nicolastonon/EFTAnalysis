node {
  name: "MYINPUT"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "Feature_normalization/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "\2609\312B\036;\377;\\M\331C\002!3C\216\347\216C\354\247\252\273\236\020\014@lW\370B\320{Y@\3069\217?"
      }
    }
  }
}
node {
  name: "Feature_normalization/sub"
  op: "Sub"
  input: "MYINPUT"
  input: "Feature_normalization/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Feature_normalization/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "\321\203\344C\332\362X@\'Q\222DO\242\033Dz\352\225D\254-x?4S#@]\006\367C\267\3057@v\252\035@"
      }
    }
  }
}
node {
  name: "Feature_normalization/truediv"
  op: "RealDiv"
  input: "Feature_normalization/sub"
  input: "Feature_normalization/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
        tensor_content: "<k\253?\252\030\200?\376\220\r\275_4\251\276Fnv?c\240_?g\335\030\277\375\244f\275\356\362\252?\027a\201?/%\213\277\374\027\254?z\230i?\227N\232?\016\232\306>}e\212\277\017\334\232\277\235aC?\200\373&?o\213w\277Q(#=\320\035M={\216\242<1\210E\275\022)\252\2757\214_=jr \275~r}>$\224\315\275|Na=\374\344\t\274\213B\r>\246\225\017\276;rh<\345\300o>#\236 \277?\342\010\276s]~>\020YD>\010\313\213\275\004u\207\275@<\223\276\251N\335=\020M\034\276$\343\273\275\023p\034\277N|z\274\243\206\246\275a\373q\276M\031\007\277!\375\336>\010\365\314=\301\303\342\275\\e(=\212&\033\276\327\211s\277~^\033\276\314).?\267\240\350>\244\255\343\276\367\244\372>9\366\215>\274\230K?\'\327\272\275\333\201/\277a#c\276f]!\277t\263\312<\365\030\222=72\201<ya\311\275\332\233\006\277\370\350|=\373\227\307>GQ\014>\"\217%?f\351\323\275\306n\\>2\260R?\224\022\271\275\035\332)?\'\222I\276\234\235\307\275\342C\311\276r\207-?Ss\\>\314L\370\274\362\230I?p\277\265>(w]\275\331B\000\276\'d\270\276\207\302\006\276\265\333\233>\203j_\277\2704\016?\361\320\245\275\350\n\003?\336/\001?\303\243+\277V\315(>\274\321\336\274\2131\350>G2\001>c\360M=b\351\200;?\272 =?\321\265\276\324K\211>\350K\265<\373\317\301=-\231Q>F\n\000\275\353\274\266=\214\263-\277x\201]>N\013\340;\311jF=\314\357\237>\377bW\276;I\212\276\246\270\r\276x\341\307\276\254\354\031\276-\257j\276>\356\201>\252\304\346=Q\277\362>\017\023\n\277)2\355\275<Bl\276Q2\001\276g\326\236\276k^\260>\261\234{\276L\0105\276\252\234\210>`\362\010=7\246\336\276a=Q>P\345\027\277{G\233\276q\014\'\276:\365\010\277~\233,>\237\022\311>\350\353l=l\353\240>\261\320x\276]w\017=\262\254\353=\220\355\274>\356\367\260=\251\3249\276\241\267\344\276+\214\300<!\374\024<\271A\206>e\302\217\276zeB>|\000\">\306\224\207\274\315\323\006?Np\326=&wA>\375\234\316;u\270\016>V`\214=0\334\356=\036\251\021\275\024r\221\275\312\337\245>>\335\035>4\272 \276M\330\234>\230,3\277\351\350~=\007\251\212>f\262=\277\356\251\327=\224\314\246>\306MN\275\337\276\271\276u\267o=\244qT\276`/\215\276\236\250\207\275+\201`\277\034\325\"?V\311\312=\232g\233>\032\324\"\276\207\241\247>\272\036\025\277\371\300S\272!B\240\274\344\263\261\276\000j\310\275\227p\213>]\217X\276"
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\340$U\276\331\234\207\275\350B\371\275\204S;>C\360S\276\017\335`\276\032\376\312=\243Q\314\274\330\201}\2760?f\276\256\371>>\006\024p\276u\377U\276\re\001\276\\\200v=|e\246\275iO\244=8\255K\276\366\000\020\276\001\216V>"
      }
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "Feature_normalization/truediv"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Tanh"
  op: "Tanh"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: ",6H?\305H,?NGK?\373\223\\?\241\032E?\313\235a?\253\r(?\212\323\324>\034\024)?5\254\200?]\203T?2\0137?\376\320M?\024\342(?\314\220\020?w\243\013?MgW?{\341\036?\221\360J?\377\242J?"
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\344\327\020\2751\250\033\274\315=\325\275\344v\020>CN$\276r\024\304\275~\275\336=\221\025\360\275\0336\033=\032.\242\275\350l\207\275.H\246\275)Y\224\274\275\303;\276\352w\005\275\335\250\212=]^v=\221\241\236=\216\260\230\267\250\211\316\274"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\365\"\222\275\367\030\302\2746\340\265\275E\324\275=\326\346\010\276^\2170\276YL`<\3447\006\274,\033\335\275\t\246*\276\266y\003>\034\331\035\2760\337\373\275|8\036\275\341;\360;\353;\372\275\315\307\026\275\327\371\203\275\030\341\273\273\020I\231="
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\340\2467?$\236J>~\2308?1\267\306>a\265\034?\231y\245>s|\226>jd\r?1\354-?\364\265\226>g\335\256>?\210\037?=)\246>\335\3001?\254\220B?\211TS?b#\375>S\361M?-l\212?\004\3558?"
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization/batchnorm/ReadVariableOp"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "dense/Tanh"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/batchnorm/ReadVariableOp_1"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/batchnorm/ReadVariableOp_2"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\301\314W=C(\233\275\352\207\250\274\035\267O\275>\006\341\276{\335\307\276\270@\010\276\377\307]\274\251X\363=\313-\377;\214\333\362>\242O\032>F\226\317\275_\250)\277[v\223>\033\314N\274S[\016>\002Mx\276\217\260\020\277\272\305\346\275wmB\275\254Dj\275\330+\222>\030&\273>\301]\014>\272\377k\276\214\017~>q\225\037\276{KA\276\317B>=\216U\030\276\335\016\203\275]\231]\276\006\357\020\277\354\314\217\276\275\214\234<\246Z\014?YA/\275\375a\315>\366]Z\276\253\3761>\245\021\235>,Er\276\354d\232\2740lP\276\327\232Q\275\3667\373;\254r6>\310\312\270>y\203\217=\262\226t>\014\254\r?<q\331>\255^\305<\233\2605\276\241\246\215\2762\335R>\002\261\375\275x\030\340\275\025]\234>\266\223 >\315X\027\277\333_\254\276\216\340\\\274\243\354A=\212\353\260\275Px->I\034\t\276E\232\375=\303\220\200\2760K\305=/\253\261\275L\325\">\341a\371\276\303\3512\2764\313(\275K\014\244\276\016\322\216\276\311\342\026=@\3020\276?\260L>\334\025\025\276\"\240\035?\3442\364>`M\223>\330xA>\032,\213\276\236k\207>\236\rq=T\032\214\276\262\214\030\275\315,\236\276Vj\213\276\203\022V\275\250\254\267\276\'\330\014=\323-f=\240[k\275\326\274P>9\231!>U\367\345=\354\345g\275\241\266\027?\275\013\245=}=\017?\267E\335\276X\342:?\203\263\027>\241\255\340<{\237\010?T\020\251>\033\270\320=\331\030:>PA \275\037\250\022\276 \2716=\273\321\022?\314\230i=\237\030h;K\3702;:G0>6\315\222>\0035\037\276\306\235\336\276M+J\276:\001\205>v\030\216=\2005\310\275$\2125\276fK\004\276\032\000\333\275\005:1\277Z5$?1\230\014=\243\014!<pu\270>C\032\324>uw\356\276\352\257\236\276\327\227\033>$\230\366=\364\017n>\336Q#\276\226Z\245>]\225\370>B\256\235=(\356\305>\333\000\225>\275\204\207>k\352\270>+\332]=\366f\247>\273\200\022=\272\014\335; \251c\2761\326\240\275\377\370\223>\352W\205=\265s\243>T\241m>\340\301z\276i[\017\276\032\027!?\265\314j\276v\005\231>\362\356{\275\030L\242>M\351v>\373\322\230\276\316\364\373\276YdX\276\353c\013?\277\037\333\275\030\364\317>\035|g>\262!\034>\300\374\262>&\366\233>\n%\355\275\215,l\275\367\035\232>\277\274\250\275\223\273%\276\272\3523\274w\002\204=\374+S\276\225/\037\276\311\371\314\276\237\330\026>k\357\252<W\251\022>\024u\337>\321T\250>\2171\277>@]\031\276\2634\300\274\305\027\273>\366\240\375>0g\036\275\226{\021?w \337=Pr\023=_Q\244\276\261\217\260\276a\337\001\277u=X>\276\317b>=/\026\276/\322X>(\301\227>\305>\351=\254\020\217\276\256\237\335\274\000\025\001>\354\262\344\275\201\001\354>\267\002\271\276\0318\215=\234\322\251\275\035\337s=\242;\005?\376\031\370\2753\240\271\274H\307\201;\034Z\310=z\207\325>\366\004\324\276\203C\366\276\240\304\304>\273u\221\275h\244\241>\274\305\206<\321\222A=\024<\027>\002\363\366\275g\202\247=\276\215\314>\036\022\235=\022J^\275wY$>\326\306\235>-\030\341\276 \312\210>\342\341\017\275S\201\003\277\241\223\256=O\233\216\276\247M\250\276\317\000G>F\345\374\27611\335=NW\204>2\203A\275\220\230\317\276My\204\276\212\233\245>\363\254\006?zC\266>]j\336\275\251\037\264<C9\323\275@;\004?8\036\362=\327\336\245\275\340\006$>\321K@>L\004\322>a\317\240\275\367J\270\275\253^\357\274\357w\017>\277\347\217\276\307\375H\276\252\215M\276\365k\020=n\020\364>m\247U>Y\201z>)\245\000<\214NY>\252\203-=\276\005M\276i\034\342\274c\001\306\276\230)\'>_<m\276\361\r\034\276\203\023V\276\217\221\256>\341\032\366>\366\223\014?1\263\207\276\022\236\321\275\205\007\215>\177-[\276WH#?\330\345\313\276\003W\217>\271\007\213\276RGO\274\033\257>>\216L\013>\263<\327\276\237\264P\2760\257\032\274\270\026\361>\033\3637\275\317\003\266\276\370m\212\276\223\347O\275\200\225\372\274\2275\307\276\231D\345>-s\013>\231zx\276rm\273\276,@\013>\313\027r\275\271n\177\274\312\220u>\366O\250\276\356\177\206\276B_\252\276\352\324+>\233\306\005\271`7\026\2765\346\212>\334e\013>\030\352\232\273f\227\232\276j\216\230\276i\342\253=\357F\004?\300\341\272\275kAR=\322\337\204>\024\233A>m\366\261\276)\354\230>\306\260\254>\\\372O=\2573L=\330\251\032\276\0325J\276\353\224\n>\n\313\270>\032\361\263\276\200\312\361\275\252\313\314\275\021\252\201>\242\275\324\275\03352?\2537\243\276\370\304\236>\237E\223\276B\014\270<\241S\251>\366\026i>g\360\211\276\352\343\230\276e\352\260\276\273\036\312\276v\204\000?G\215\035\276\tSh>\254v\205>\234\177\265\275\227\023\346>\345@\322<\235\276G\276\335c>=\226\342\007>d\241\274=\336}\354\276\r\254\235\276\202\376\227>\031\314;>\332\202\300\274!\366\025\277\212\344@>\365\232\374\276,\235\260>\300~C>W5u>\331\351\262\275Y\260\214\275\355\0236<\352\\_\275Z6\017=@\257\325>tC\377=\377\320%\2762EV\276G\276\247\276\320a\361>\003\"3>@\251\003\277S:,>b\351\372>}\334\001\276"
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\243\335\037\276\231\346\'\276\343\347\024\275\310\216U\2769\205\352<7\376\242\274\341\002\305\2762\251\021\275\3139\013;?l\373<\027\304\325\275\035\340\001\275h\321\335=\345\\:=\362\032=>G\355\304<\262\2524=\277\341\300\275A}\002>\014\213=\276"
      }
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "batch_normalization/batchnorm/add_1"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "j\023\375=n*\006>?V\272=%-\227>`s\262=\237\324m\275h>\341=\265\020\010\276\351n\211\2763D\207\275\317_\253>S\207\002>\202Eh\276\316\304\275\274\321\265H\275]\006\246\274P\274A>@\035\371=yK!\276\274\213\215>"
      }
    }
  }
}
node {
  name: "MYOUTPUT/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.0929267406463623
      }
    }
  }
}
node {
  name: "MYOUTPUT/MatMul/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/MatMul"
  op: "MatMul"
  input: "dense_1/Relu"
  input: "MYOUTPUT/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd"
  op: "BiasAdd"
  input: "MYOUTPUT/MatMul"
  input: "MYOUTPUT/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MYOUTPUT/Sigmoid"
  op: "Sigmoid"
  input: "MYOUTPUT/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
