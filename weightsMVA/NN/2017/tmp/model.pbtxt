node {
  name: "MYINPUT"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 27
        }
      }
    }
  }
}
node {
  name: "Feature_normalization/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 27
          }
        }
        tensor_content: "\\\226\310B\202}\263;\340\217\257B\302N\016@\327\016Y@~\324\235\274\3758\271B\326\261MB\235v\361Aq\341\240;\276\007j\273w\242\360;\237\247\301;\257\277\242\271j \350\274\320\321\340B\266\025|B\344\240\014Bp\357\315<\322~-:+=\212\277\017B*\274a\021 \273\364\354\232\277\000\000\020\301\000\000\020\301\000\000\020\301"
      }
    }
  }
}
node {
  name: "Feature_normalization/sub"
  op: "Sub"
  input: "MYINPUT"
  input: "Feature_normalization/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Feature_normalization/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 27
          }
        }
        tensor_content: "C\020\343C\203\277X@\021}\351C\200\313\032@\316\2247@\253\342{?\003\362\303C\271\331)C\'\210\337B\031%\025@\304\272\025@*\326\025@\251^G@\301\031G@F\310H@\344\264\001D\224\t\212Cs\'\027C-\313\205@^\343\215@\265p\375@F\265G@\267?G@\303D\371@\253+\366B\216oTA\213\343@A"
      }
    }
  }
}
node {
  name: "Feature_normalization/truediv"
  op: "RealDiv"
  input: "Feature_normalization/sub"
  input: "Feature_normalization/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 27
          }
          dim {
            size: 20
          }
        }
        tensor_content: "8\351\314>5\241\215\276\'\346\t>\241\224*?_\360I>{J\216\276j\"v\276\246\202\326=\237\326\306\275\3029\270\275\360\362\266>\204\370\201<\322 \306<l\365\367\276\366`\252\275\337\'\360>mr\212>\264\246T\277\0148\251\275cv\304>\275\264\301\276[\333)>\343I@<S\010x\273\335\247\341=\t\022\270>\016\300\020\274\354`\367\274\224\006\355=\307bT=\312&\350=4\2450\275a\304\005>\311^\t\276~\332{\276 cG=\030QY\276\000\365c\275<\241#>\242\017b>e\331\216\274=\036_>\037Dk\276\372\363\332=\005?\236>{U\254>\002\203e\276\373\246>>\337\026o>\353\234\034?\347\206\303\274\231\020\004?\361\244<>\252J\227>\227\006d\276\234O\256\276\003\321-\276\375\223\224>\222\353\025\276i\'N>H\217R<\003;B=\316\017\002?\222\030o\276H\246\370<}\021r=\325\030y\276\223\224\251>D_\230>K[\356\276hV\005\275\274\'\210\274\032\215\337\274\374\201\245>\326\307\267=\206#R\276\254\227\013\2751B\342\275,\333\315\276U\037\331>\001H/\276\335\013L\275F\252S\276\374<\253\275A\310\247\275Tx\213\276\313\313&>\317U}\276\252\274\000?P\256C\2765\"\234\2752`\323\275H\025\322\273\325\257\274\275\006\027{\276R\355\364=\247,\256=\314\224\007>\206\337\321>\274x\255\275\005\363\002?\306\331\025\275u\357\264\276\217\360{\274\241\324(=\021x\032\2765\227\016>\023y\270\275\351k\357\2767\237\230\275\3551\211\276\333\237\007\277\004\266\226=O\r\000\276Ma\325\275\217\245\223=\353\211\333=R\016\001>%\257<\275\010,$>sd\026\276\362\350\007\276w\313.\276\241d\020?\217J\307=T|7\2778M9\276\t^{>b6z>\334\231\212<\354\2224?\216e\301> \373\367\276\200\2505\277\337\243\346\276M\013M><\r`\275\331z1\277j`\327=\025\002M\276Nr&\277\327\203l\276\350\002\220=\254\354\'>*\351\256\273\317\307m\276\247\014j\276\220\032G>Y\177\016\276V\313%\276\0208$?cx\270>\3500\235<\244\350f\276{\200\347\275G:I?A\376;>\345\000\302\276\333\000g>!\302\027?\"\347o\275\\\002P\276Y\314o\275a\314\317>\351\2217?\005\222R\276t\333y\276\376\271\016>\253\250o;\332\037\006>\372p\203>y \211> \021\002\276\242\032\270;\273C[> \207\373=\253\n\317>\013\007\215\276\316\360J\276M\'\352<\027\033\t=\342\341\243>\217=\215\276O\320\266\276\216\234\035\275\177v\214\276\177\247\332\276H\245\217>C\222\222=\027\274\321\276$\226\243\276\3118\020>\217\021\245\275\352\335\325=^\016\217>\325\330\222<\2038\212>eT6>\215\335\n;$\225!>\013!\326\276\330\327\204>ds\374>]\316b\276k\316\333\275\020/\256\275{\361\002>\217:\316=B|f\271\016\244\201>|:h>K\255\202\275\007i\227>=6\324\275\207\332\267>\377\306\350=&\203\034>zX\330\275\323\001\213\275V\327g\276\346L\212=xVD\275\226\373Q=b\033\304\276\311\325\334>\374\3350\276\240\007k>(\266A>\335k\267\275\207\020\334>\264b\235=_\346-\276\262\241L>u\022\372=Fz\244\276\275\220\007=q\222\251>y\221\247\275)\353\002=\322\210\262=V\340\207>m\305\014\277\032T(\2750\247q>t\341c=\323\352:<B\021\256=\223h\357\275\027@~>h\013\230\275\265M\233>\027\264\221\276QM\342>z7p=w*\245>\233a\343\274Z\340W\276\347\233\232;\351\275,>\n\216a>9\374\n\277\333\220L=\202{\351>\036\316\205>\212_d\276e\253<\2751\326\234>6v:\276\002\254\253=h\217\320>\342\206F<%&\030\277!\025\356<\344\230*\276\331q\215\276M\353\005\276\334sz\276\324\266\207\275\005~\225<+T\253>\004<\021\273YH#=!\014\000\276b\302\207\276\224\236\337\276\346\250\224=\'\205\327\275\255\202\330>\346\271\n\276AI*>\305`\336=B\372\221\276;\020Q\276\342M\245\275\235\360\002=\177\347z\276\273\345\261>\247\237\351\275X\004\272\275\337\200Q>\271\207$\277\377]@>$\356\323\276wHs<dZ\241>\000\016\304\2760\275$\277]\312\262=\032{\245>\006\374\330\276\0023P>\020\202\002\274\236\"\351\275mi,\276\321p\'\276}\311\010?\375B!\274\247\027K\276\263\375~\276<\232\302=E\nk=\246\2640>x\243\255=\346C\355=\366S\270\276\316\264\026\277k\361\004\277#\310\202>U\250\201>\272\276d\275\000\322\333>\023\253)\276n\344\246\276\3475\272\276q\334\227\276\371\276\004>\007\350\232\276\202nu\276\n\346\210\276\342\371\203<\003\200\200>\030>\231\276\007%\233\276\356Y\247=^\323}\276\355\267b\276K\210\302\274V\344\352\275\325\347\003?\343\357\203\275\371\212%>\331\302^\276\\\335~\276a\267=>\007\257\347\276\225\370\230\276\027V<>\274r\356\276\223\253\202\274+#q>\353\344\216>VL\r>s\377\324\276E\213\265\275\314-\320\275I\032\036\276\352>?\276\341\"\000=}\204\250\276\303\235\212\276\356\204\336\274#\217\205\274\003\255*\275\254\022\256=$4o>X\013\212\2761\243\020>\366\301\255:\332\355M\276\247\215!>\023\350\t\277\027\313X\276i\022\264>)\224\\>\273H\007>a\246\000>\274\270\273=\322>\326\276\241$\367<\250\260 \276l14>\200\266e=,\234\256=\030\010\204<\334\320\266\276\234\322O\275y\3224=\021]\013=\245@\210\276\rA)\276M[Y>\325\331\357>\2729D\2765\242\201>\343Q\246\276\257R\362;\232J\314>\2031\002?\344A\021\276\241\016\006?\271v\013\276\327\377\026\276\251\271\330\275\270\260\273=\274\374\365\276\315\266\327\275\213t\226\276fQ\226\276\'\324\024=WB\033\276\362u9\276x\024\217\275y6\026>\rHF\276\347\326\334=\010<\013\276JM\335<=9\261>\276\300\313=\230\352Q>T\367\201;r\220\367=h\354\342\275\244{\032>\346\2054\276\316rB\274\257\275e=\r\327\216\274\211u\365\276\370\222\033\2768Ju\276\230\020x\276\256\320\227>\300u\212=\220\377\036\275\266u\310\275AI\355>\020\2466>l\333V<t}G\276\364\200H<\"\377Y\276\353\251\316\275\340Xw>]K\205\2769\325\252\272%\022,\275\315p\225\275\2128E=\266\367\253>}I\211\276\025\020\341>`\n\333\276\324\372&\274\346\036\t?\243\3010>\010+\226\276!b\373=b\261\332\275a3\362\274\2773\273>\2471\377>\023\344\024\276|\274\016\276\305\214\001?\265\374\260=\262\223\250\276v\255\340>\215!\312>C\337\n\276\367\010o\276,\204\016>\327\374\375>#\342\261>\351\240\254>\0347x\274}\344~>t\302\021\275\273#\277\276T\366y\276\013;\233\275\301\246\006?\207\334\244>!A\223\276\330O\206>\217\205k\276\276\300\260\275\273\307\236\275\225\371\023>\274\302s>I\317\354\276\027?\010=\007\223\336\273\006\357\006>.\372\232> \300\000>>\210\010>g\0044\276\016w\304\274\241\267s\276+\224\324\276(\001\035>\010\rU\276\220\264\034\276\362\365\037<\023\017?>&\277\232\276\353~\017=\320\301j\276\003Y\030>\n8\244\276up\270<\223\307)\276\231\212\020\277\303Nu>O\007\257\275\354T~\276\003\366\267\2769\336\224\276\310\240\322\276\304\345\237\275\033\253u\275Kr\036\274\361\334\212>\333)\001?\r\tH\275iz\203>`s-=\243( \276\224G\016?"
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\267\006\314;wF\016<]Z\236\273RyT\275\307,r\274\206yO>]\033\226=\003J~\273T\032\350;\322~\326<\325<\306\274\357\2478\2742\325n<s\2051>\207bU\274\367y\322\275^*\217\274\'\0036>Uk\002<\370\261\001\276"
      }
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "Feature_normalization/truediv"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Tanh"
  op: "Tanh"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "j\231m?\255\317i?W\235r?\207\337t?\262 w?K\371\224?jn\204?\221\304t?\207\202l?\271\351j?\005\007\220?\272xv?\307\363y?\370\036\205?\325\202r?\021\\\223?x\341p?\360\224\233?\213iz?@Kn?"
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\277v\215\274\257,\027<\356|\306<K\216\035\275\373F\212\274]3\234<H%\322;\226Y.\273\353\365%\273\304\002]\274\251\200\305:\220\235\234\274R\333q;\267\316\216<e\261\333:\307\213\016\273\016\203\\<j\201\271<x\343\232\273^\320\305\274"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\004\251W\276,\225\267\275\265\257Z=\336\253\003\275F =>:\207@=\201Yd\275\306{\"\27624n\275\211\321g\276\203\325H\275V\316\264=T\303v\273\332\\I=\204J\257=\327\202\223<\305l\226=\nZ\r=v\021\r\276[\317>>"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "#\034\263>\242\215\247>\250\177\252>\005\030\227>\302\304n>E7\031>\256\335h>\336B\214>x\tM>\245}y>\305\232g>b\316\231>w,H>\230\215\'>V!s>g\351\031>\320xj>O\346M>TWS>\354\232\200>"
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization/batchnorm/ReadVariableOp"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "dense/Tanh"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/batchnorm/ReadVariableOp_1"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/batchnorm/ReadVariableOp_2"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        tensor_content: " \315\202\275\321e\302\275J\"\254\276T\212\201>\222\236\255>1\274\004\277\374=i\276\212\366G>\233J\020>]\362b\276pw\343\274bK\304\2758\334\232\276\256\204M>1\200-\276\001VO=\367\230\003\277\007\245\376<4\254\242\276\263\251\277\276\265\201\207\276\3042c\275@d\357\276#:\023>\370\017.?\256w8\274h\265\020\277\330\230\347>\030\366\"=\177\\\032>\304\350\331\275k\365\212>d\224\230\276 \244\304>z\207\354>\\\231\231>i\317\270\275\000\037\003?8\371\330>\0147\263\276\300r\370\275\307C\216\276(\'\223\276V\003\261\276\001\260\255\276\256\177\207>\210\353\337\276\240\010u\276m\271\227=\037\260\250=^&\266\276\300-\261\276\356\017\371=\270UT\275\2035*>\247\031\'?G8\217>\230\352\372=\324\366\264\276J\210+\2765\002V\275\264\317\257>P\312\006\277\236w \276\334\334\327\276\323\007\223\276\270\351\254\2759\234\213\276]\262n\276\322\333\265\275\207\342\367>2\375\324\273t\000\246\276\'\343\276>\227\367\267>E\365\304\276\001\370I\276\334\277\200>\204\227\320\276}R\272\276\013\204.\276\322\343z\276\313\322\257\275!A\272\275#\314\305\275t\271\340\275\177\'\016?\3461/\277\366z\354<\202R\352=*~\241>\247\310s\275\252\353\021=\355\010\244>\370\331\325>\014\007\253\276j\354\363<\375\'\261=|\021\247=\236G\337\276\313\367\027\276\330\254\334\275W+\255\276\004\333\204\276\225\210\273>\n\026\316\275\377\306\346<\231\215C?\013\204\241\276\307[\262\275\014\344\212\276S7\362>5\227_>\035\267\323\276\242\304A<]<\225>\235c \274`\202\322=\177\017\003?\352\210\357\275\024-1>\322\326\334>\233O\335\276\252\331m>VI\237\276\310\250?=;\363a\274\021\213\225>\3347L=\036\001\"\276Tnf\276\224+\261>\036d#?J\311\217\275\270\372\n\2758;\001?\346B=>\223E\224\276\024\211\026?5\254\224>\305\307\302>\310\342\326=F8s\276\036Ii\275oS\031?S\364\226\276_\203\207\276\246!\215>\314\213\006\276\325\303\344>\211R\241=l!\375\275\245\372\013>\243\030\266;\204\007I>_a\021\276\311T\337>\016;\335\275\244s\247\276\\_n\276\275\226\270=\205D\316\2769\357\216>U\325\001\275\263R,>\t\370>>\304U\367>\324\001\311>\340f\224\276X9\030\277\177\302\211>\tC\275>\207R\272>\211j\037?\216-\245;\023\301d=\237\304\300>\202\232,\273\377\203\242<\006\316\376=\243`\'\276\352\244\244\276l\272\253\274\366a8\277\226\035t>a\355\356>\323\006\334=\302\0316\275\222\306\001\277\203*\371>\032z\241>Q\346\232\275\235\307\262=-\331\252\276\360\227\025\277\365\246\327=\254\246r\276\026\231\230\275|\211\003?G\324v\274\227\003\320\276\005\247\005?}H\265>\233\001\026\277\235\221\227>\274\356\240\276\364\246\241\276@\276\255\276\261\317\027\277tg\220>\333\247\361<\337$\312\275*\372\326\276\324\2442\276\003\215i>K\177\021\277\235q4>\260\002\'\275\372\n+\277\307\230\027\276\233\300]>\255\240\374>K;9\276\177\371\002\277\301,\205\273\317\310\257\276\277T\013\276g`f\274C\337\341\276\257\354\261>y\032\260\276:a<\276\264\222\333\276\0322z>\301Wv\276jc{>7\373\026\277\365TJ>4\010#\275\032a1>\334\342\372>\007\251\003>\230\214=>\017\3046>\234\232>?\374\302\250>\207\206\255>\377\270\n\277\240;\036:q\331\210\276c\235\344\276Pf\210\275\311AQ\276\334Ju>yS\004\276\207hJ\276j\210\350\276\261\003\210\276\274\267\202\276\373\246\n\277R\336\302\274\347\241\216>Np\202>\017?2\277\320z:\275\335\312\272>\360\034$?\374\310\215\274\222\263D>|\312\234>\336J.\276[\274;?\322p\210>\275\263\024\277\002Z@\277\324\276\236\276\364=\t?\005-T\276\232\370\277\276\331\326R>\301\221\377\276W\030\217\276\337\027\303\276\250\027\265\276\247!\336<\\\243\206>B\274M\275CJ\213>\2302y\276z\203\021\277XWu\275\200\277\247\276\321r\272\2753le\276\312\357R>,9\222>\367+H\276\001\021\363\276\225\332t\276]\006\005?\242\003\321>}\313<=\265\020\276=}\010\200>E\347\336=\223\223\222\276\244\215\267\276\022\262]\276\230\230a\276\326\215\242>\344\242K>w>*>:\016i>\217t\207=\317\203\003?\255!\016\277\306\312c>v\356\344>\364\361\216\276I\331\265>B\304\225\275\330\212\002\277\320h\355\275\336\235O<Z\014\353\276\276\335\024\277\304rL\276\273\024\254>\256\224\024\276RV\305>E\013\264=C\335u>\256m\233\275\313\251\222\275\000\200\352=G\305?\276u\206\032?\221\375R>\327\356m>\320q\327=\363:\346\276\374/$\277\272<&\277\301\033\351\275\r\200\013?\327F\320=\363\247\355>P\376\210>\035\267\214>\240>\316>I\257\321\275\014Nr>J\217\205<,\332\026\277\357^.\277\311\376d>G\216]<I\330\224>\254\004U>\337\002\226\276\0208\326\276\242:\321<\276\030)\276\202\017<>\310\327\301>\322\024\221>\021\345\'\276\034\272m\274\212<h\275:M\270\276\301\307|=\0243\255=\255AV=3K\353>\236ml\276\004\026\336\276S\026\326\276\314`\212\276:\265\240\276[\211\362>\327N\301>i\005;\276^\'\211>\245\001\273\276\244\265\031\276,\376\274\276 \"\034\277\337\300u\276_\364\270\276\350\233\332\276\276\316\237>\001c\237>\202DO=\223\225\342=8X\013\276\213\237\216\275\206?\r\275\302\000\014?\014*}\275\231\353g\276"
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "f\224\205\274\306\220\203\274\030N8<B\353N<\357\341\267;DZ\223<\211\267X\272\313\264\017<\2414x<\240r\232<\230H1\275z\333I<mz\355;\025\201\204\274B\276f;+\220\020\273\032\376q<\0054,;7\325U\274\001A\'\272"
      }
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "batch_normalization/batchnorm/add_1"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "b\262u?\224F\201?\355\277\202?\354\263q?\022\\\200?P\247\200?\007G}?\217O\201?\036\355x?\226q\200?Of\211?\300{{?]\000z?\203t\207?\371\256\202?\331\242\213?o\347\177?\372\271o?,\273w?2\036q?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\212q\266\272\277\326\037\274L&\2618S\324\010\274\212\350\244\273U\205o<\346}*<)\243\255<`8\032=y?\216;V\200\252\274\222tw<\225I\246\273\330\300\256\274\374\030\017\274\347\372W;\317@h<\201z\'\274TC6<\017d\261;"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\223O#\275<\3046\275\004\314\231;\240\312\204<\023\367\306<\346]W=\332\236\261<x\005s=\333\177Z=\024\310&=lb\270\275\376$\022=0\030\024=Z\351\211\275\t\304\234\273\243\352\004=\026B\203=\273\202$\274\201\271\030<=\337v<"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "g\230\001@\022\374;@\301\nF@\342\266\026@,Q\211@\013pl@\323\241\231@\223i\274@\326\320C@\262\225_@\213;.@\275\314\022@E\210!@\001\303\223@\016d\306@\236\315\254@P\251H@\272c\325?\302G\233@]\235\217?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/ReadVariableOp"
  input: "batch_normalization_1/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_1/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  input: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_1"
  op: "Mul"
  input: "dense_1/BiasAdd"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  input: "batch_normalization_1/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/mul_1"
  input: "batch_normalization_1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\325(r=n\320\237>\005\373\327\274\007\026\203=\265\252\001>\246\305\362\270\351Z\254>\006d\003\277\221\221\023?\350\361\301=\221\262\232><\232\341\275\215\314N>\257\300\332>A\330#\277>6\353\275R0\200\276\352\2658?\211\237\007\276c[\223\274j\201\003\277\274\220\010?H\3618\276Y\256\017=S\0230?\036\304\233\276\211#8?\003P\006?\2170\010\277VF\245\275\226|\354=\001@\264\276\300\266\000?1W\t=\306]o\276\t \215\276`\275e<*\316\036\277\205S\350>g\254);\212\201\366\275\344\020\004>\372\351d\275\221@\376=\375`)\2774\203\337\276\264w\r>\305\313.?\022\242\022?W\327\256>\n\222\004?\270\313\352\276Q\234\220\275X\230J>\300\335\266>1\236\\\276\262f\034?\232o\366>\027\347\334\276\320\261\322\276\333kP\276\215(\250\2766j\020?\213x\255\276\023\237\'?\"b\023?\241\330q\276Y\363\006\277\'\316\016=\272\266\036>*/\210\275YiY=\265\2752\276b\232{\276\345\327\247>\224\304\036\277\000\241\343\275\375>\274\2769z\004\277\307\327\307=\351\253\301\276\360_\255\275\370\204\345>\317d\016\276si\250<a\346s>\330;\021\275\302\321\374\276\252\251\270\273V?\252\276!\242\273\276\353\217\377\275\3073\357\275\352\207\027>w\000\325\276\317\3211>\204,\021>\031\307:>*\037\235\275\271\336\250>C\r_\274\363]E>\226\353\241>\257\204\243\276\014UF\274\017\3745>\000v\315\276\322\021\n>J+\026><$\226\276K\361\355\274r\336\026\277\'\372\007\276AZ;\276\267Y\263\276\271\217\005\276\252\347\240\276z\353\013\276\377\374\016?\354\005\271\276\221\263\231\276hui>\260\002\n?_\003\222\276\241\223\t\276\230L\317>\265\027\377\276u:<>\017\017\323<\r=+>\274\314\272>\211\036\331>\356\275.?\241\177F\276\334|/\276\237\307g\276\227o\312\276\226\362\023?\212Y\004\275\325~\334>\234?h\274\\}\005\277\227\300\243\276\366/\230=\362\\\013>\246b\361\276j_H\277;2\303>2\275\307>\335=h\276.<\005\277\366\230\363\276\2251\224>\205v\355\276\036\335\275=\203\263\021?\316c\034\277\306\316\304;\034A3\276xe\342\275\255=\255\276\257\200\260\275\256\273\370>\003\020\257>\237\242\257\275\203\214}\273\030\356Y=\013\266\277\276\203\353\r\276\207\355\371\276I\2265\272\352\242\305=\373B\007?\235[e\276n\354\217>x\206\364>{\300\024\277w\222\235\276\221\200 ?\037\354\244\276\205\312\225\276D\252\272\276\0007\354\276\251<\277<\333\301\016>n\226 \276q\241\204=d6\205>\231\313\333=i\203\307>\344\027\020?\330\354\304\275g\371?>\373\031\344=Du\024\277\211H\257=E`\325=\300R\353\276\346|\262\276#`\213>j\276\305\275\271f\232\276\352}\212\276\364:\215>\363\360\357<`\254\037?\264@\306>\237\314 \277\340^\333\276\016\264\216>Rs<>\216\236p\2767\224\220\276\224V\354>\215\226\211\275\306o\307\276\030]J>\"\360\240=\317P\217\276\201\333\252>\332~\024\276\331\205\345\276m\371>?(G\264>\322\345\010=\\F\216>mT\224\276b\203K>\364l\201>;\250\243\276\302\322\225\275\334\205Y>\002\n\321\276\020#\230>\266B\023\277WS\335>\014\td\276>\213l\276J.l>\377\250\335\275\013\0353\276\236\3465\275<#\372>*\3357\276\r)a\276\010\246U>\305*\n\277R\264\025\275\336N\310\276\331s\312=\252\035\344\276\3737\223=h\344\314\276\003\324\034\275F\025\000>\3211\020=s\022\333>\021\316\237\276\226Vt>\211%C\276\224\250=?\352D\360>\254_\275\273\344\334\036\276\312\235\"?en\n\276.\243\251\276\225\213\226>D\n\010\2773\231\004>\215\216\354=\335\271\242=\324`\215\276\267W\013?\336\344\322<\030\367\370>\220\001\032=\213/\252\274\020\270\007\277\255\300\226\276Ml%\276j\232f>\0340\000?\000\2660?\326\276y>[\n\n?\213\'\354=\325l\021\277\317\205\246\275\264\254\014?\227D\244\276\030\246\350\276\253\300\020>/\240\331\274\304\340J\275\316\203f>s1;\274\341\023\252=(g{\276\330\225\241=\350+8>\224\202\032\277Ii\014?\227\256\007>\030\245;>\341<\353=\277\212\354>\344L\031>\"#j>\255\262}=\273_\306\276wEW>5\317\200>h\363\n\276\005n\274\275\372\256\026\277\n.\034>\222\212\327\276\245\375C=\322o\244>\367\216\376<\342;\320\276\373\344(\277\374\221\306=\343\246\305>\314p\253\276\373h\346\276M\363\273>L\310\222\275\343}\352=\005T)?\346H\375\275\244\267\023>\323\260\000\277\234$\221>\337\010\006?uY\247\276\031\220\263\275\205\342\002<\255l\365\275\206\023\345>hLt=\007r\254=\265\032\325\275z\204\032?\241\322;\276\252\312\226>\322u\024\277+\177\026=62\005>\023?[\275{\246p=\221\205\373>\226\263\013?\2410m=\033z\247=\276[&\276\312\021\2319e\354\233>x\351M\276[4\215>GR\347\275\035\247\243\276\254\210\216\276z\336\325\276*y\224\275:\177?\277!=\r>\340\032H\276*K\224\276\311S\007>\237\245\004>-\336@\2766\351\236>\2271,>\243\354\371>\363\037\007\277\275X\256>)\2467\276T\014\034\276,\357\036\274/\315\304\276\257J\200\276\ru\211>\370\216\330\275+\030\025\275\245\242n>\305\357\237=\256^\251\2767\312\265>\225\210\314\275d\255W\274\3018\253>\374\033\206\276\357\264\000\276\232\220\273=D\313\306\2760\"\345>;<\332\276T`\257>"
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "pe\256\273\215\0315\274?\277\303;\201\n\360;\313(\004\275\226JS\273\376\034\311\274\3316\351;\230\242\013<\343\232\023\2758 O:\210\301x;\005T\257<\217a\246\274\232\023\226\273\'\212T<\302\327x\274\204\320\030\274\331\345\374<\347\341B\274"
      }
    }
  }
}
node {
  name: "dense_2/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\372\003g?\236\317i?\371\314l?\374\370\\?D\351U?tfe?\354\341U?\222\346g?_\266c?X3]?p\232k?\216Te?\232_j?\nJb?\275=n?\336\010E?7\274j?\217\354e?\221\351I?\036,e?"
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\025\346\206\2718\270,;n\336\365:\254\335@<\360\200\370;\253\230\207;\031\'T\272\230\337\305;\274\350\371:q<\241\272=\020\266\273<\255\241;\361\253q\273J>\261\273j\314\346\273\233l\331<\345\203\335\273\301YM\274qA\310<{\243\024\272"
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\273~\340\274\033\363I\275\0344\204<a\277\235<r\203\200\275\232x\265\274\377\013\255\275\0240\335<\247i,=\210\340\241\275\022\211\207;z\022\353:n\364X=\230#\211\275\r\326\200\273\237[x=\303\263\235\275\361cg\274\342\376\225=\321\016\350\274"
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\033\357\320?S\326\341@\344\341\346@}x\326?\337O\206@w\201\355?\366\3548A\370\360\203@\372Q!@\250\010\330@`\261\235@\300\251\013@\031\'\272?\027\t\274@*^\306?\013\205\026@\3772\252@\221\237\002@E\313\240@\243e\201?"
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization_2/batchnorm/ReadVariableOp"
  input: "batch_normalization_2/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_2/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_2/batchnorm/Rsqrt"
  input: "batch_normalization_2/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul_1"
  op: "Mul"
  input: "dense_2/BiasAdd"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_2/batchnorm/ReadVariableOp_1"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_2/batchnorm/ReadVariableOp_2"
  input: "batch_normalization_2/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization_2/batchnorm/mul_1"
  input: "batch_normalization_2/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\370C\365\275\356\037A\275\256\231(\276Z<\202\276\272T\205\276\004\360\t\277\235\206\336\276o\326\035>\305k\271>\230\347\311\276\025\220\312\276\325f\037\277\342\201\354=o\306\376\275\263\376$\277b*\001\276\226e\223\275\354(\235>\270w\310=sb6>\320\237\354>\222\373\275\276.u%\276\021\320Z\276A\030)\276\257\261*>l\371\007?x\324\252>\356\332f\276\030\314\211\276\231\306o>^4\025\276\252n\373=\246\350j>f\310\300>\302A\353\276\355\317*\276b;\"?\334\323\242\276)\264\315\276\031\343\311:\320\303\323>U}#\275\3436S<\351\252\222>\027A\331>Z\032\332=\337\"=\275I\235\217>x\235\037?\226\001\000\276o\2103\2769\201\220\276\3342\307\276\234\310i\276=\023#?\357<X=\"\215=>\374\302j>\235\016\257\276\261k\001\276\210\376\030>{\246u<\302r\313=\314\335\362>X\337\300>UK,?\353\371-\2766\316\215=\204\371/>\253\024\244>@\021\206\276\036\325\033?\212[F\275\033\330\327\276\322\210\337\276k\036(?o\354\304\275\016\221\035\276N\263\303\276HjA\275b\212\265\274\207\030#=#$\367>\267Wb>\\\260\272\2755l\023\276j\027\344\276\221@\007>\005f\230\275\2168\033>\354\234\212>h\346\235>\222\000\234>\005|H\276\021\006\342\2767\305\364=N\236\241=V\030\234\275Xd\242>\337\206T\277\230\001\000\277\317\214\223>e\356\250\276~L7=\375Ir>7\031\024>\225\333z>\331Y\341>\240N\224>\255?E\276m\337>>6r\020?\364\304\345=u?\271=\211m\345>\301r\212\276sX#>\005\362\236\276\301(;\276\215\233\017=T\365\317\276g\206\261\276\307\247\035\276\335\025\013?)\313\227\276\017\333(?\244\360\\\276\331\223\207\276WV\244\275g1\255\275\023\022\301\276\302\335\241\275*\371u<,(\234=\342\n\336>\323\357M>\275y\250\276\314\320\005\277\035\231\276\274\t\271\306\276\263\221\353<\203\211\201\276\310F\002\277\325\037\341\276\034\036\023?\337T\000?\312\307\002?\345g<?\016\327\020?;\030\004\277\030i\302>\365fH\275@u\024>Q\227\361\276\242\023\003\275\002\341|\276C\262\300=o(\036?]\r+\277\255p\335>\365/\312\276@\374\217>W\205\205\276)E1?\346\216\250>Bs\353\276\000\224D\277\307\2764?\345b\036\277Z\264\254\276\251\364X\275@p\360=\350\235o\273\352C\202\276\265\216\030< \357\361=(K\344\275^\317\030>X\214\206\276|\327\027\277\316\344\211\276\257E\367\276(\200\225>\352}\021>\036\274\240\276n:\271\276`z+\277*\262\307>p\311\244><\352\010\277:H\235>\313\215w>\314\010\244>\314\006\275\276\n\367\250\275(S\343\276\207\221\177\275\304\2433>D\317\325>;L\326>\002\313\241\276wX6\276\020\220\003?v\206\224=\371y\250\276\311\347\201\274\231\235\250=\217\217E\275\324\251\022\276\307\261O>X\336\005\277\n=\222\276\243\016\222\275\'W\004\277\005\020b>\002\013\205>\332\340\247\276\215\"\334=pS\206\276\260\371\003>\032\231\267\276\320\005\305=\261*\236\275\2326\035\277X\234\024?Rz*>\311\036\206>\375e\004>\275\257\321\274>\006\304\276\006(\032\277\017\022Z>a\230\224\276o\254I>\021_6>dM\235\276\332\r\325\275\332\235\213>6\021\035>s\016s>\271f\342>u\311\177=\230\331,?@-~\276\0169\241\275\260;2\276G\'\277\276\233\314t>%.\n\276\345\034\206>\340r\327\276\316\220\272\276\210\376\367\276\\G\234\276\363\256C\276l\t\207>H\352\311>\254V\220>\262\213\260>\0168\324\276.\336\224>y~m>\310\362\205>)i\202\276\311_c<fJ\227\276Oq\214>\003n\303=\316\'\253>\276\277\346\276\360\037\344=\302\256\335>\205&M\275?\014\016\277\365S\n\275(\n\001?h\314F>\'\323\212>v,\030=\232\321\017?\321\313\025?5\310\007\277\215\355\343>\"\330\231>\r\002\241\276\032\375\242\276\0076\200>\335\226\372\275#\316\351\275\367\350\230>\322v\277\276\272\020-\276\004\333\027\276\256\212\027?L*\333>\0235\005>!\214\263\276\030>3\277\346\324\004?\353\030/>\334t\342\275AA\207\276\006g\252\275Y\340\034>\300\300:>\304\212\213>=\330\227\275\200\303*\276\010\024T=\206\212\352<\373\245\275\276\210\354\352>~\372\353\274L\035\026\276v-\253>\372N\201\276\003\365\311\274\371\231\212>k\263G>\035\017U=\250\350r=\'\211\372>\014\217u>_\203\374>bz\207>\375\037\206\274{\237\234\276\256\013\225\275\203\215\261\276Cy\312>\007\276\"\277\374}\001>s\257}\276\261\245\034\277\037\342\346>k\362#\276a\376\306\276BcO\276\33313>\2560{\276\311\365g>\217\371\027\276\260\254/=\257\030\336\276\030:\031?\273\014)\276\333\372,=\375\255\020?v\025R>\037\245\026\275\361\036\214\276!\\\352\276u\346\002\276\247\037K>\267\260%>\315\224\240\276\177\257v<V\264\237>s\314\212>-\210\301\276\257/\032\275\343Z\177\276+\307\003\276:\234\017\274\367h)\276dS\377>\016f\256\275\3278{\275\264\360\006=\220\333>\276\234M\014>\250Z\t\276#\004I\273\3715\363=d\325\302\275\265\366\002?*\325\214>>\357\304>+\257\263>rt\201=\027s\205=\302\003\376\276\243G-\276\272\032\242\276P\210\220\276\374\014\356>\260>8\276\264c\275=\277r\235<2\256\206\276\236S[>\377H\310\276\030l4\275\321\204\036\274\205\305\207>`\261\026\276\244\254\244>\215Y\346>\216\037\225>"
      }
    }
  }
}
node {
  name: "dense_3/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "O\372\356;zY\356\273u\361\000\274|\255\354\273\035 A:\265\231\355;v\335\347\273\252\314\361;k(\322\273/\365\374;!\210\375;\002\201\361;\231\333\331\273+0\371\273\256\214\371\273\"\306\357\273\266;\002<\354\315\342;\236Z\353\273\n\337\374;"
      }
    }
  }
}
node {
  name: "dense_3/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/MatMul"
  op: "MatMul"
  input: "batch_normalization_2/batchnorm/add_1"
  input: "dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_3/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/BiasAdd"
  op: "BiasAdd"
  input: "dense_3/MatMul"
  input: "dense_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MYOUTPUT/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "5#*\276sV\376>\331\374\262>\216\023\243>\352\254\277<D\203\256\276QN\200>\317\330\016\276\245\364\325=GyH\276\311Aw\276\273\306\331\276\310\005\310=\276:\'?\013b\323>\235\037\363=X\264*\276\036\226\032\274\355\333\221>\202\267\315\276"
      }
    }
  }
}
node {
  name: "MYOUTPUT/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.0074965194799005985
      }
    }
  }
}
node {
  name: "MYOUTPUT/MatMul/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/MatMul"
  op: "MatMul"
  input: "dense_3/BiasAdd"
  input: "MYOUTPUT/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd"
  op: "BiasAdd"
  input: "MYOUTPUT/MatMul"
  input: "MYOUTPUT/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MYOUTPUT/Sigmoid"
  op: "Sigmoid"
  input: "MYOUTPUT/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
versions {
}
