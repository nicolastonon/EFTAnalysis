node {
  name: "MYINPUT"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "Feature_normalization/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        tensor_content: "2\353\374B\264\206\022;4\361\264B,\352\n@\212\302S@\363\020\267\273"
      }
    }
  }
}
node {
  name: "Feature_normalization/sub"
  op: "Sub"
  input: "MYINPUT"
  input: "Feature_normalization/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Feature_normalization/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        tensor_content: "\326\241\254C\363\005\035@\336\020\241C\272\037\006@J\375\031@]Ke?"
      }
    }
  }
}
node {
  name: "Feature_normalization/truediv"
  op: "RealDiv"
  input: "Feature_normalization/sub"
  input: "Feature_normalization/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
        tensor_content: "\265\266\261\276\274\td\275\372\240\226?i\245\326>\341\355c?\333w<\277i\201\331\276\000\263\032\277\035k3\277_\2133>Z\232\236\277BI]?\014]f?i\032\213\276s\315-=\366\020b\277N\245\231\276\321Ol\277zK3\276\323\201`?\206l2?\213\345\221\275\007\323\243>\224E\224?KR\004\277\330L\244?\210\0274?_\\\211\277Ph\237=\313\373\311>x\240&?\233\262\231\275\tU\332>\235\250\202>\263\004\213;v\337i?\243\312\351\276tj\270\276\321\243\030\277\252089\027\262)\276\376;]\276aN(>71\221\274Nen\276$\264\000\277\306\252\010?\347\000\264>\250\221:>\304\354\202<\"\016[=b\1771>\233c\321\276\036\367\342>\343Nc\276,\301=?\346\267/\2774\203\366\2764y\t\275NV\271\276\232;\224>\"A\251;\354-\356\276\271I\217=\002\257\021\277HQ\317<A\275\177<\344&b\276 \347-\277\212\365%\277`\243\001?f\265\224\276[\177b\276\326\237\250>\344\376\010\277DjW?\376\347\003\276\275Sa>\326Wq?e=\\>\345\253\010\276\325q\300\276gO\267\276\333\"\317=\376\035\315\276R\216U\277\366\354p\277ts~>l\232\210\277K1Z\277p\034[\274\\,\222>\317\0227\277u\271\t\277\255%\223<\306\031\371>p\213|>\'\311{?\223\"E\277\373\260\023>\360\317\032?}\333W\277\252Y\246>\245Z\205>!\257\203\276uY\371=\332\305E\277\2772\346\276\177\326\244>6!&?\226o1?\017\322z?\036\376\"?\226A;\277^\336Z\277J\327&\277dd\201>\351\313\376\275\\\253\242?\360\024\010?\372d\266<\023\024\301\276L\010\002\277\024\356i>q7\212\276\003o\005>\224F\027?\304\300\305\275\351&\372=\352[/?\301m\224\276\220b\347\276z\355\221\276B4>=O\354L?\212\005h?T\033\361=\020&\216\275\352.\022\276\007\213\233\274=_\374<|\252x?\024\024\236\276\013w\353>\325K\016\277\327\232}?\352\353\363\276\204\326\243>\313\240\036?\331~Z?wFl\276{a\333\276\257\225.\277r\017B;I\373_=\303G)\276\262\246[\277\332\244\241?\373>H?\240\264:\2772\346&\276\305E\000=;\366\032\277\021H\'\277\232\316\252>\323vE?\036\245Z\276Yc\366\276v\370\032?\225.\014\276n\271\031?\244A\377\276\035\322\034\277K\0207?G#\260\2741\244$\275\274\325`<\037b\027\277}x\327>\202\345\304\276"
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "(\023/\275\t0\014\275?\363\027=,q\266\272#\205\350<\272\317\026\275H\016\266\275\217\273\020\275\330-\335\274\373\324\313\275\036\311\271:\373\003j\2756t\217=\222\002\214\275\210\326F\275\344\350\364\274\236\370s\273n\235\224=\326\307)\275\274\026&\276\357o\370;p\270F<N\243\207\274\261\316+\274\253)\270\27435\020\275h\317\207=\362\240_=\215\257\220;\316\020\203="
      }
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "Feature_normalization/truediv"
  input: "dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "j}\200?)%x?\342\247\207?\205\tl?\336W\212?_0p?\327\310\207?\275m\203?\3007\203?\347\364g?4\242\214?.\316\203?u\013\203?d\352\214?Bru?ov\201?\247^v?\257\337\210?\245\256\177?\264\374\223?\276\301\177?\3452i?\377\357f?\373\215o?L\256\200?x\361~?m\355f?\331\230\214?\211{u?_p`?"
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\337\264\002=dZ\007=a\234\263<C\375p<.\001E=%\331Q=\032\245\274<\245eS\273\212l\364\274\251\325\002\274^\247\"\274_BR\274\323X\000\275\3037\204\274+\247\202<e\371\243\274\340\272\n:P\335 \275\360\370\272=Z\372\205\274\334a\230\274\005o\242\274\235\327\237\273$\271x\275\261~\236<(>5\274\212\263{\275E#O=\326q0<)(G\274"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "1\206\017>\203\273\365=\353z\304>\306&<>\332\320<>\022iN>Y\233_>?\020\252>\001\215n>p38>\001p6>\274\013\206>\205\016\227>;\333\023>y (>\306\002\236>\035yG>\276\200X>`\376U>\373\236&>\2007\205>\320\327\242>*\030g>\355\210\306>\017!6>\237\256\266>c\306\207>\263|n>~8\251>H\022\225>"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\320\267\314=\253\225\204=C&\013?Y\323\362=\315\370\032>\347\244n>\304\251s>\027\337\002?H\361\223>J\215%>j\317\010>\265\\\226>\375\013\227>\235\211\272=\362$\006>\3342\332>p\031/>\034>9>4\201G>\244u\022>\244\222\204>\237\357\331>\311{a>\035\021\014?\263\262\">_z\003?\035n{>{\207n>\006z\362>9\026\243>"
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization/batchnorm/ReadVariableOp"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "dense/Relu"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/batchnorm/ReadVariableOp_1"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/batchnorm/ReadVariableOp_2"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 30
          }
        }
        tensor_content: "z+\022\277,\236\t\276W`\300>\233\2614>\232\306\356\276\362y`=\303\316\374\275Q\2647>\2260\230>s\233\245\276\300\245\266\276\026\303\316>\372D~=\246\013\325>\\\365\333>oU\315<\373\'\333\276#X\024\276\263\276\345>\034\025\231\276 8Q>\241\261\204>\203\305\216\276\264\263$=)\221\221\275E>\200>\363\230\320=\230\354\311>\273\317n\276JP\014\277\301\305\265=\346c.\276~\003\017?\017a\274>\330\376\241\276M\224\214\275\205\217]=\361m\270>\3268\256\274\206\256\342\275\261\215\205<\0319\247\274\266M\227\276\027\006\357\275\333\261\033>U\021E\276\262}[\276\277\356b>Y\016\001\277g\007H>\034\205n\276lv\266>\317\377\234\275\024\345?>\332\314[\276\334wy\276=\031\325=?\354\274\275\256x\273>\374\026\217>\233\005\315\276\303\340f\275\311d\003?\037F\027\276}\321<>/\242\272\276\342\276t\276\300{\177\276N\r]\276\354\327\r\277\315\024\223>\275\250\275\276\202\205~>h\353f>\313h\326>c\267\265>$\376p>\276\232\035>\354P\271=\321[\271<qm\212\276\207@\323\275\316\316P\276\350\277\013\277\320\377&>\240\302\236\276\034\232\024\276W\343\360>}\272\250>\326X;>\214\336F=\362X\272\275\254\n\006>*\337\313\276\023ZM>7T/\276\236q\343\273$\375u>?\034\2579\214_I>\343d\025>\030\252\035>\2376\007\276O\271[\276\2446J>\276V\014=w5M>\035V\252=@\366\307>\023\3202\275]*\367\275\216\300\034\275\324\"Y;J\017#\275\227\352\261\275 -U\2768N\203<\342\312\201>/t\244\273\017P >\022\203\342>\352\273<=\'\230\270>\261\274\255\276\364\266\347=\240o\371\274G\362,\276\262\357\216\276\366l\220>\305K\004\277\246\232\235\276cm\366\276z\226\335\275\341m\271\274?d\000\276\'\331\233=\336\271\241\274\303\303Y\276\tr\265\276\r\356\355\276\334\r%>@\022\211\276\242\227\344\276\322\342W\276\345\225\347\276{\304\213=\014f\205<\252V\236<\203B\304\275\033b\036<\210\206\232>\004\272\206\276\001\374\206<G\231\220>\330\202;>?\217J\275\236\336\210>\375\034#>\217\030\023\277\367\350\352\275k\2023>P(v>9H\013?\\\366\031\276\343\210\001>\345b\305\275\376+\212> Z\316>\362G\341=\017\247\337>/a\263=C\203B\273a\265\232\276z\'8\276[\354\316\276\002\337\277=\337\277\234\276\263/\311\276\365h\337<\214\241\255\275\250\257\202\2762%\007>\322\005\264\275\234\362\r\277\227\274d\276O\n\254>\235+\002\276M\2471<\346*\356\276v\353\225\276v\027\320\276\345\271_<\326\032\246\275\032\037\030\275\226l\232<\201\221\n\276\005\0148>\\\206\247=\276v\367\275=\022\022?\326\304\273\276\201.\207\276\201Y\272\274\222$m>!5\010?\007#\371>\371%\242\276[\037\322=]\357\\\276\013\354\221>\307\023$<\372\3453\275t4H\275\022\035\321\275sY\274\276A\211\333=\342\255\257\273\245\272\016?\202\271w>\016\300\244\275\326U\374=\327\350\207>\r7\013\276\311%l>\367t{>\307\023\342>\004)\202>\304CE=\275\\3=\301\204\355\274F\021\257>\177\020\037>\226\244\021\273\334\264\014?\014T\200\276\320_\303\275\213\201\211>9\263E=w\305\277\275\255|\341\275[\235\307\275\030\336;\275\226)\307\275PY\304>\322\377\300=\033\3466=`\025`>g&\305\2748N\236>!\224\326>\016\271\037>\214\261\247<hc\322>\253\322h>\031r\366=]\221\271\275\215Ju\275\236\263^>\207\250\311\276\263\377#\275D\372\010\276=^\240>\267\230G>\370\333\330=\364\323\240\2762\377 >\325\322Z=\223\305\013\277\n\260|<\351H_><\316\211\276B\354\267\275\337\374\326\276\017\376D>\325\t\037\274JTj\273Z\343\022\276\261;\204\276\362Vr\273\005\005\216>\323r<>M.\212\276\233\375\017>\357\277\206>J>\213\276\r\237\035>\330\275\360\275\342\321\033>\267\241\305\275\345}m\276c\345\224\275u\261\200=\307\306#=\336\2741>.\345B=\316\034n>66\225\276\262`7\276\315^E\272\303\317\026?\202\205\244>\314CJ\276\227\352\007\277\007D\335>\360\033\205\276J\362\273<\367\204\233>\026\3517>\265\253\000>\244\273&\274e\346\357=w\206\311>w\247\257\276v\220\030\276\337\327\245\276M\350\211<\211\3575\275\004\004\226\276\215-\206>B\037\303\276\374\252\373>\311\216\325=B:\004?V\327\001>[\223\312\276]E\240\273\342L\257=\306*l=+\320f>\233\276X\276,\236\004>\020\272\335=\r}\215>\003\326\311=\320\322\201=\016\001!\273<S\201\275\270\203\326\276\310p\004>\251\263w=K:b\275\321\331\345=\364f\323\275\312\372\346\276\353\336\331\276\352\272\334\275\312R\215>\013\037p\275\326cE>@_\010\276B\377\013\276G\007\231\274\261%\034\276\373h\007\277#*\317=n\007|\2767u\241>\304\324;\276\354\\\312\276\253\310\263\276\275\325}>\362l\212>\237ZC>\316\026\344\276\242\217L>\207\211%\276\264O\367\276(\336\031>\347\014*>\336\247\222\275\021\234\240\276\353\327\017\277\314\373\352\275$\217\356>\254\242v\275\322I\305\276wJ\035?\214\353\262\276zy\325\276\246\263\271>C.\220\276\270\324D\275\312\343\221<M<\355=\2552\230;\0173\036>\302\327]=\005\247\001?\340\372\334=\305DU=@\311\240\274\300\352\214\276\n\355\027>0\tM\276\243#9\275\276\301\031>x\262\247>\200>\215\276\220\246q\276\210\341\324>\324v\223\276\335V7\276\214\232\215\276\\j\305>\247\030j\276\323.\271=\202C,\276d\347\357>\236CV>\2130\221>b\345\366=rs\001\276\031\331\346\275\211\354\247\276\353\255Z>0\023\000?\026\300\021\275\200\273\353\275\326\007<\275\206\005\027>\026\260\006?\'`\301\276\321\252<\276\353\206\303\276\326\350\r\276<\303\320\275\007\021\252>\037\003]\276\217%\350\276\274\256\362\275\231\346s\276\310M6\2755\224\226=\231\354\217\276\272C9\276hv\253\275\2727\233\272\000#\201\276>\356\001\275\226\353\243>\331bm>\336\345\345>i;\226>\337z\275\276\377\353\003\274\225O\231\275\344P\365=\000S\245>U\367/\276\274n\n\277X\260B>[\346\024\275\n-\202\275\317\331J\275\025y\235=:\260\204>\357\340M=\222~r=\020\274\200\275\266Z\215\276\2331\362=T\352\236\275R\031\346>\017\320\336=\267\235\360<\n\201I=\224\210\301\275\271U{>\304lQ>\236\265\252>`\224\365=\3535 <\321\026\324\275G\342<=\362\242\333\276\300h\342\274\200P\356\275\345\227s=0\232\257>\342w\327=\346\220.\276O\304\356<E\362g\276\177B\351\275\254Zx\276\214\264\247=-_\355\271m,\332>\342\312q\276\021Yq\275\323\220\313=\314\337\340<%!\275\276\014\353\273>\302\202j>\216\312\322\276\224\232\206\276\331\266\325\276z\344?\276\351\346\022\276\027<\214=e\206\373=\024:\245>\361\"\337=\t\313\254=\230\377/\275S\013\227=H\241:>b\353\013\276\021w+>\377]u\276\320E7\276\017\264[\276\320m\006<\3702\304\2762\331\307\275\263\273\212=\355=T\2762\324\202\274\302*#>\220\020d>\206\354X\275V\335\224>0\231\350<\241\365\334>^^\024\277\375\3441>\260\240\322>\354\275\244<\360\307\r>)G\340=05\341\276\247\030\001>.q8=\037\261\331<\001#\347\276\261)\004>\231\375\242\276\034\356\275\274\345\014\222=\366\335\212\276Q;\316\275\332Y\326=O\005\267>\014\251\030\276>A[>\000uB>x\272\357\275Q\256\276\276\321K\203\276{\362\217>\312Qw=#\331\200>Lt\014\276\340\233\307\275\277\273\036>1\311\r\276\177d_=\201\211\225\276\033\310\303\276\323j\013\277\332 \304\276\354\301\315<\264\300\001\276\230Z\246\275\367\354\232>/\200\211\276Q,\245>\212\002\255\276\273\234\313\275\315Nt\276\037\303\270\275\2155[>\0232\366\275 \235\224>e^\222\276h\276\202\276\233\271w\276\373j\030\275\216\266\363;X|O\275\277\035#\276B!\263\275\317\003\337\275Ij4\276\245\237\031?m\007\005?\315\265\202\276\212\3671=U\001\244\275\361g%>\374\263\323=i<U\275\273uf\276\315)S\276\273\005&\274\002\212]>|\010s\276\233\261\226>\342\330\000\276\217%\314\275\3253\246\276<S\211>\370\223\265<\374|\225\274K\337\266=\353*\205\275\256\230\000\276\242\365\301>\033\031\025<\366_\245>\254\020\251>\267\024\224\276x^\225;V\353\203\276\024\035\301>\024S\005?\2109\331\276\367\3767\276\007\037 >\333}\007>\235z\357>mb\316=\373\021\017= \326D\276\037i\017\276\036\224\301>\0320\036\276_\344h\276]\t\260<\245\262\010?\006d\325\276\302/m>D\350A\274\377cC>g\014\370\276\377\226*>V\265\252\276/yz\276V\240!=\273H8>\244\332\255>\262eX>\357o\237\275S\027\006>]\235\352\276\241\224*\275\362\363@\275\213\334k>:XI>\365\005\356<\003\345\355\275\257{\036\276*\005\227\276\205\3030\276\235\270\225\276\r\"n>z\220\001<7\032\275\276\343\247\020\276j\356E>\205\017|\276\262q,\276oW_>\326\320\250>\306{\377>\272\020\341=\346/\240\276a\377G>+\314a\276\320?\361\275^+@\276\330\327\337=\372\034\231=}Z\r\276\274\216\273>\rm\220\276wq\326\276l\246U\273F\004\005=;\004\371>\201\254\377>\341\357\222>v\373w\276\032*\347<iy\201>\212\242\214>\3466(>z\233\033>o\315\357\276\352f\357=\343#\002>\307):\276*\256\177\276\361\215\000?\354\341j\276\244\207\354\276c\346u>Z\212L>L\017\r?\275A\026\276c\216\251\276\241\032\357=m\345\004\274E\200\207>V\234b>\223\310%>\"p\341\276|\336p\276\001\327\367>wH\370=\004&2>\233N+\275\224`\256\276\377&\036>uY\230>\362\324\244>\354\235\246\274P\274\261=\317-^\276\310\007i\274F\246\332<I\353.\27642K>\344\\]=;<\213\274\354\326\022\275\243\033\313=V\332_>\322\345\304=@\235\315>\022$\374\276\342\233\253>\235\243\233=\253;\263=\244q`=\"Q\021=Z\354<\275\021:<\276F\314\220\276\013\332\260>~\"-\274\332-\301>\227\005\266\275y\006\025>/\345\217\275\363T\213\275\317\\\375\275\201\0165<O\335m\275\nH\260\276\355\003\327>\014\010j=\340\346\023>\230\227\007\276\001r\250\275\207\3029>\350\376\214\275?\322\246>!\330\210=\311bF>\257\275c\275NF\267\276\315G:\276K\352\336\2740\375B\274\220~\020?\307Z\210\276Z\027\225\276\240\253\267\275I\353\005=uOA\2761uV\276\367\351\010>\016\312[\276\201\301#\276\377\026\257\274m\337\242>z\262K>\354\241\222\276Fp\241\276\276\217\323>)F\223;1\311\031\277>\361S>\373{\210\276P/\315>vo\222\276\216\2771>[o\255=V\230\210\276\302\226[\273$\277\370=\312\351\206\275\307y3\276\366\212^\276\260>\361>\337\273\250=\252T\361=s\312X\276\213\342n>\241\n\002\277\020\016\212\275v:\336\275\246\244\337<\204\202v\276\272*\332>\352\002P>\367i \275C2\302>\311\267\237\276\253\013\242=\240O\205\276\342\320\207>\201\362\365\276\246\316\327\275\206\244\210>\225\014\347>\362\337f>\255G\311\275-\001\203\276\001\007Q\275\002\243U<\373\374\315<c\260\366\275\243\237\255\276\315\233k\276}}6>L\223\227<,!\n\274\221,\244\276\214\321\025;\205\'\360\273:\275\002<\002]\202>\225\017\277>\360\006G\276\240\227\262<\234\230\214\276\003\302a\276\002}g>\024K\020>m7V>:#\264\275\364Y\347\2751\'\232\276\000\331/>V\310\206>+7\266<\372\334\010>okH\276]I\035=\304><\276C\277\254\276C\374\346>hU\262=\254\235B\274h\210Y=MM\025=\3137\013\276\376\351\305>\366\362\265\276\263O\264\276\335V\256\276\326\373\264\276\327\274\317\276\255\031Z>\216\353\224\276\n\2656\276\366\355f\274P\037S=\346\213Q\275\205\232\312\275\306g\220\276\355\031\363>a\3378\275\277\351\253\276\307-\252<\223\241\235>\267\202\250\274\276\341\003\277\215\321\020>o.\232>\210\002\260=\001.\030\276\035\367\246>\000\245E>L\3757\275\037\304\274\276\265\2206>\303\t&\276k\277\217>QU\303\276F~\243\276\216\226\225>\0325Q>\205Q\032>\315\230\226\276\237a(=\235X+\273"
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\317&\335\274\253\306\232\275Li\221=\003\334\304<\313=)<\233\357\270<\372\036\267<\213\005\201=\255K\222\274\307<\016\275P\360\\\275\332\\\250\274\333q\200<<\321<\275$#\r\274:\222j<&\321\357\273\220|L\271\343]\340\274\327uN\275\247\256\221:\026\260\020\274\236\007J<\314\n\335:\365\200<;\352\375#\275\365\354\247\275\227\025\301\272\370(F\275\344\334\357\274"
      }
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "batch_normalization/batchnorm/add_1"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\215\322P?G\252f?\244ei?b\027d?[*v?O\326P?BRq?\267\255b?\022\220s?\347u[?\267\321V?\227\035o?\256\245h?\344PY?j\345f?\273Vm?5\013l?\026\257k?IK\\?:o^?\243,u?\323 M?g\334V?\303Ad?i\241`?6Ra?k\017g?2-j?\256\324L?\226\362K?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "X\277\231=\320\210H;\212\321\324=Ih\351\275K\003\247=^v}\275}\243>=\332\225\335<6\362\244=sE%\275\030-\216\275\n\362\351<Q\r\024<\235i\317\274 n{=\351\035J\274\341\377\310<\354\301\322<\270@l<v\335\031=$\204\343=\245i\034<\344\350\264=9i\221\274[#L\274B\307\202\274\354\002\213\273\000G\331=\007\214\232\275\300\367\223\275"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\033\r\016?\250\"\311>C\322=?\241+8?\210\306\037?\222\n\360>\335\254\023?\320\300\037?\326\362\371>m\177\302>]m\017?\027\227+?D[\007?\331\352\331>\372\237\r?aI3?\241+*?\312\223!?\203\235\355>&\217\005?g\376\367>gg\347>] \004?.\222\020?&\334\037?\313\235\013?p\374\324>wq\n?\214\025\273>\343\035\327>"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\275\203\266?C\376F?;\3331@\246\\\351?\223\265\003@\006 L?\336\316\243?\211\277\265?e\302\233?~\"P?\205\331\224?\274S\355?\261\357\252?S>\211?s\261\324?\0329 @\220\206a@n\"\321?\013\241~?\361\220\302?\210`\253?%\220\204??\200\217?l\006\217?\327\203\336?3\322\367?5x\243?\021\336\302?\037\304I?&\026l?"
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/ReadVariableOp"
  input: "batch_normalization_1/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_1/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  input: "batch_normalization_1/batchnorm/mul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_1"
  op: "Mul"
  input: "dense_1/Relu"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_1"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_1/batchnorm/ReadVariableOp_2"
  input: "batch_normalization_1/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add_1"
  op: "AddV2"
  input: "batch_normalization_1/batchnorm/mul_1"
  input: "batch_normalization_1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 30
          }
        }
        tensor_content: "\354)\255<\321Xo>l\003\376<\203J\277\275\212/\211\275G\253\037>\034\311<\274E\376A>\350\0253>\332\257\031>t\245\247>d`c\276\032\352P>VI\247>\177\360D\274\257\004\370=S\303\230\276\325\021\372\276\nbf>\244\006\262\276\376\024\307\275d\017m>\210\367\255\275\202\243\016?\026\257\245>\366\263D>\232g\t\274o\213o>P\235\213\275\311&E>\222\310\222\275\272\242\213\275\221\204\r\276\021+\370;\247\327=>\226\250\373>\327\226`\275]\027\242>z\366\305\2752r\023<\3154\344=\356\274\305>O\205\371\275\206s\027\276K\032i\276\227\224\010\276\245^\000?\3033\245\275\306Zd\276\\\277\261>z#\203>0\216\243=\352x\237>A\036\365>\036\242|\275\366\226\002>\255p5\275\240;\031\276D\211\350>\"L\031\277\322,\303\275\353\005\371>7\035\003\277\2428\257\276bu\255>\233R~>\375\304J>\226v\263<`\247\216>\227\031\221\275\030\257\360\275\203L\r\276J%e\276\2559<\276\254\305\\\276gUP>\241lw>+\374\022>\365\202\217\274y\020\362\274g\274o\275\365\202p\273\264\207\344=_\340\266=\270\026P>G\203\233>\342tY>\204{\300>\352\303\254=#\016\334=t\362\334=\303\001\341\276\311\234\233\276g>\270>\303\335\324\276P\311Z>\223y\363>:m!>6\374\216\276\273>\317<~\016\271\276r\304y>\022(\261\274h\351<>\233\320\034>`D\025\276?\236\235=\254\257A>p\\\200\275\262\340\021<\355T\206=\326\360+>\334{,\275\372E\200\275wT\235\275\257\207\237>I\335\247>\320~\t\276.\354\320;\202G\223\2767v\273\276>\037\035?\271\261\321\276f\342\256\276\316\266h\276\246?\022\276\3118~<\2629m=G\017\322\274Ct\250\275\336%\271\275\233\207\245\276\032\340\262>)h\013\276\031W\222>\332!\234>=\354Z\275\356<d\276\370\310\233=\372r\022>M\217\205>?\240\216\276\337\006\013>\342\3710>R\225\256\274\321\027\020\275;O\032\276/l\324>8\260\267;\023\220\207>x_\243:\317\261\206\276\007\315\006?\235d{=P\306\231=\324M\341\276\t\261\025\275)>\303=\013RF>D\332\257\275yc\357\275\336s\251>N\346\326>\374\334\353\276N\005\330> \n\214\276\270\033\275\275dpP\276\220\220!=\245|\014\276\203\347\365\275]\256\324=>\331\237\276\266z\235\276`S\177\275c\223\234>\265\374\035>\3710[\276\330\021\237\276\030\037\321\276\341\372\324\275\367=\221=q\362\262>\206d\220>q\344\230>0\2630>\347\003\212>,\360`=\373\026\314:\316\305\246>\270\026\251>LS\201>j\205\212>\276\213\020\276\000\177d\276\347\375A\274\352\272k<7\202\344<\245\223\370\275\367>\340\276\324\300\031\277\366n>\273\260\327\270\276\333\2514\276\314\260\316>\313\013\300\276\033\245\022>[\371\234\275J\376T\276\326U\206\275\261\034{\275]_X\276\023@\321\275\337\336b\275|\252\204>\325Q\242>\0001\277\276\035\361\223>\r\306\"\276\\\007\\\274\260!7>J\3054\276}\006\266>\245\202\351>\225\354\336=%s\013=?\317\270\275\300;,\276\203\274\244>\277\213\236>\322\343\251\276Jh\"<\n\322\013\276\203%\306>\322\'j\276\3115\311=\336\245\027\276L`4=J\336\273>uQc<\353\323\273\276C%C>u\342\255\276Y\277.\275\246\037\037\276\256\"\376;\310\024\177>T\347\322\275C\317\213\275`\310\275>yl\304=\303\260\262\276z\334\211\275\344>4\276\361W\007\276\246\213\005>\211\025\353\274\257\305\376=D\202\322\276T\301,\275\311\262\'>E`\316\275gn0>3\n\367\276\001(\365>\320\350\021?\303\014L>\215\367\304\2765\275F>\256\261\230>\364\023\264=}\235H\2764\253\241<\005\365\354\275Y7S<\204Z\255<\242\032\225\276\345a\017\2762I\315\275\301*\221=\305\007\004>#\022\017\275\334G\213\276\351\221\204>\303\331\310=\302HL>\276\213\313=\3679\220>\236\307\330>\235\2213\276\365\213\352\276^4\201\276\371\001\337>\205\264M={3E\276I&\016\2779\344\361=}\224\375>\352\035H\276\205\335\356=7\220\254=\336w\271>\307\311\223\274\014*\342\275B`\032\275\345&\372>\255)Z\276\017\246\220>7\311\007>\245u\373>\302\257\035\275v\274\247=Y\224\312>2\310\252\275\364\300\340>n+\002\277\310|\237\276\346\234[\276\351?\333\276Ny\364=Ye6\276\317\215\203=\023\244\222\275\377\022\314\276\335e\241\276iV~\276\377\314\326\275\232\020p=\326+\264\276t\004\315>\024c\225\276\3247\210\276\211\t\315\276\376\216\351\275C\376\224<\224\364\330\274\3102\207\276]\006/\276\250L\245\276\302\377^>?\354\037\276\313\025\034>\034\303\234=\217\321\\=\257\005x\276\23457\276\027m\222\274\017L$>\017\200\305\276\300\3457\276\232\203\302\272\365\351\307\275\347;\345\275\003\031\031>\377}v=\251\352\005\275\351\305]>\236s\033?\236\354\034>\030^\233=J\301(=}\202\367\275\374+j\275\022\005@\276}\222r>Eme>\316\177?\276\317\200\240>v\274H\276\304y\304\276\323\212V\276\356/\246>N\226\214>\277\001\213\276\215\236m\276~\255\367=\035\220\366>\372\327\227\275=\353\000\276}\267\365>jN\202\276%^?\276\224\377*=U\033\347\276\326;W\276\025\022\362=\255x\344\276:\334u=OBs>\353\311\276\276\330\003\211>\274\022\227\276G\016\002?GT\226\276\002\317\343>4\213\224\276\377\346O\276\031\223\241\276\'0q>Zj\356>\3575\332>\240~\331=Y\007\275=\215@R>m p\276\027\314\201\276\007C\302\275\316\020\013\2769F\230\275T\325\202\275.\264|=\241\221\017\275+n\234\274\236\253\260<zr,\276M\263\313\276\035\243\224=n\023\364>k|K=\316I\370>\r`\371\276\002#\223\275@\024\234\276\371\236\321>%\345\245\276\243{$>\273g\233\276C0b\276\260\340\354=\241\0339\276D\3768\275\212\020\323\275\311\242\345\276\"\331I\276$L\232>\340(l\276\036k\340>A\371,=CHX>\322\013\251\276y\324\000>\344N;>#?\302\274P\365\276>\215\236\332>\224\002\253\276\273\363\344\275\366^\007>\216\256\001\275]x\006\276\274\017\t?~\0317\276w\353<>\331|\203\270\206/@\275Hi\207<{G\370>\023\013{=ol\300>7\002.>\203\355\243\273\247\251\002\277\267Vi\276$\335I;\037H\275=\264b$\2766\304\212>\222\352\354\2766\'\241\275UW\237;\214z\240>%\255\314>\304\322\230\275\342\216\373\274J\275\342\276h]\215=\324q\322<\321Z\364\275w\376C>Y\201\217>\343\0140>\250\272\007?H\005%>~\024/\276\204\240\001=@\342\200>\216\237\003>\226\005\334>r\210/>h\311%>\213\007\244>\223\032`=r\245J=.]\230>-\356L\276\0068\314>W\002\t>\261\233\317\275\025\324E>d*\227<M%\t\276\327X\321\276%;M=O\305\016?b\356\205\275\021\373\350>\254\037\362\275\373|\036>\254`O> C\337\274\364j\222\276\0074E\276\347\345L>}\022\031>(\246\322>\021\201 =\010\036\003\277\376\346\">\000\316\260>\331\225\305\276N\025g>[\006\231>\364\237\001>\330.E=\241\006\307=l\023\345<\203_\253\276\362\337:\274\006\255\206=\323\343\003<\315A\335\275 \313\217=\320\\\270\276\0247\251\275-\336}=Y\306\362\275\240\225\363\276\006\365\224\276Po\270;\035k\273=\344\372\321\276\221Qv\275\014\\\013\276\310\361\331;(\2718<\017\375\006?\313p\213>\221\272\340=\026Y\243>\211KR\276=\267\036<v\000f>\213L\030>z\335*>\227\270k=<\007\272\275\251}q\276V\002`>l\222\">\373G\033\276U\2441>!\334\257>K\374q\276(?\206\276\242\211\266>U\247\271\276\374\236\360=\302\363H\276\023\321\207\276]\025\343=K\267\241\275#\200U\276\241\315\217>\247\320\026\276aW\246=%J\216\276\263\225\315;\273\374\235=\236E\215>{3X>\271v\345>9|\363<\003\023\335>\006\016F>\337)7>\346\255\226>\343^L\275H)H\276\025\200\306\276G\007}>\037Y\271\276\367(\241>=I\224\275\273a:\275)\266\211\274\233\037\034>\335\204h>\373\231\014\276\344 \363=\326\343\236>\212\335\276=\221\r+\276t\320A>=\010\324\276\222\017\026\276\220U\215\275\237\036\377<\367w\030\276uO\017?z\276\242=K=\214\275`nY\275H4\270=sb\252>\271\324\320\276\214t\346<V\326p>\023\365\276\274f\373k=\225/\374>\033Cy\276\2250\005?\251n\213\275\021N\222>\334<\331=\'\332&=Ha\263>\354\354:\275\234\213\016?F\373\351>\373\306\313=k\215\251=\223\024\352\275\301W\220\276J\306\341= 0\036\276\234\264\n?;\324\376\2735\330\307=k{}\276\327?\336>~\000\330>\371m&=\373CN>Qt\212\276\270\031\274\273M\346\344=\260{\020\276\312\314\226=d\231\266\276\022\324\201=z\367A>\020X\013\277\260\217:=4c\233>\254\257\001=\357\316=\276\"\013?>\375\324\365=\306\316\320=5D\214\276(\256\214>\213\316\034>\232_\226\2765z/<\360\263j=\334o\264\276\252\257\223=\216\026\360\275\351\035\004\275\240C\217>u\344\340\275F\252\003\276\016\211\316=Aq\024\276;\016)\276z\251\311>\353\371\001\276\267\237\261\275\206y?<\033\364\337\276\021M\225\2757\031R\275\347\nz\276t \013?\244M\343\272\354\366\022>\226\366\365\275G\272\361>\200X\000?\203\215I=\206\210\302\274\250\226m\276\202\204\263\275\240\354\276>G[\205=\271\371\005>/\221\242\276LW\256\275\264\025\223\275u(\013?)\"@\276\030~\007?ec\240>\302_\270>\376\225\240\275a\266\347>N<G\274k\220\365=\301k\360\275\027u\230\276\256$\270\276\332)X\275P\237:=\212\006\346\276\204\246\323>o\n\341\276*%\007\277\332\307\355\276\t\030\365=\345&\347\275\213;4> \231\276\274\344\337\360=\322\345J\276\366\256\023\276\033r\010>Rib\276\002\366\252=E\031\236=P\240\014>`P\"=\2573\201=_\2073>C\247\035=\256\240W>\2669\005\277\306\211Q>Ni\364\274\361\220A>\322L\274<\311\237\034=\336\237\205;\252;\217\276\245T\305>Ja\201\274\265\205M=;S\010\276\322\332\346\276\032g\013>V2B<\274\350*\276\"\201\215\276\376\2077\276\243lU>\003\250\333\276\360cG\275\2226\005\277S<q\275\304G\002\276\203\370\233>\217\375\267=^=\211\276\241\023\'\276f[\352>\026a\262>\034^\255>\224v\261\275\3230\302>\366\233\027\276w\306!\276w2\206=\364{\024\276\352\242\327\276\233\302G>\325,p\276h\263\207\276\237\226\246>L\3222>Gr\241=?\242\344=\022\337\220\276)f >\001\303\370>m\301\243>UG\226\275y\016\010?$\006\013\276\346\313\322\275\216\253\032\276\002?\304;\222j\246>,J\257=\216\264#>\233\357\212\276\260N\005>\342q\023\275\353\017\316\276d\237\352\276`\271C\274R\251\225>\324\261\264\275\252\177J\275\316\344\277=\010@M\276\302<\334\275\007q\326<\203\265$\275\333\246\336\274`\350\032\276\227z\036;::\000\275`a\341=.\210\205<K&\362=\355\326\262=\266\352\323>\272\347\017\276\344D\310>\257\274\263\276\262\255\226\2762\037^\275\321\025n>G\031c=5.\253\276\307\224\251>S\222\032\276UyV=w\270\243\2769\233\331>\217C>\276K\035\\>\226Mu>\301<\022\275\232U%\276\311\256\267\276J\032\030=gt\336=\231\207\232\276fQO=1\326c\273ht\200=\337\237\020?\336\275 >\212x1>^\316\037= Q\233\276\020\003\245=\020\332\202>[\217\236=\311\226\376>1z\222>\225\'\354>Mt\255>U\303\346=\036\220\307\276t\206\017\276t<\030=\031\"\023>\342u\317\276s\217\252>!\017\310\276]7\317\275\375\034\260\276\317U\335>\310\303\223\275\276\024?\276\007\332^\276\312]\217>\233\262\236=M\247\226>\000\216\331\275\237\264\303\275aI\313\276n\334\233<D@\334\275\377w.:\265\253W\276\356\257\331\274\357:\007>\266D\031>\003\306\313\275\002\004L\275\344T\257\275\017\304\347;k\333\362\276\2230\277<)\377\302=\346\031X\275S\r\260\274\255\320\003>\'\260\177\275d\341i=t\215\006>\216\202\301<=Fk>5\300\260\276(V\314\275\032<)\276=\240\002?"
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\363y\307\275\227wR=\262)\374;<\360\317<\222\270b=rp\013\275\210\016\305<M\211P\273\371k,=\263 \346\273\033\220\"\275\367\237\303\275\350\355R\274\357\232\325;\ny\206\275\010\240_<\254Bv=A\245\034\275\006\344\'=\253\340\337<\346<\003\275\356X\245<\234\241\341\274=\240\017<\301\002m;\3423\300\272\007\330\351\274R(\237<*+<\275\310\340@<"
      }
    }
  }
}
node {
  name: "dense_2/MatMul/ReadVariableOp"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Relu"
  op: "Relu"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
        tensor_content: "E\350\252>447>S\245\324\275\252\265\371\274\220$;\276\227\311y>\376\227a\275\362\343\272\276\257\202$>S\206\016\276\234-\245=\240qI>\365i\236=\373^m\276\347\227x\276%\310~>\001e\037\276M\207\300\276i\274\254=sk\013\276k\264\206>\350\276\201\276\020\026]>\225O\014>-\022\360\275m\342l=$\255U>\037\274\014\276_\311\276=$|\034="
      }
    }
  }
}
node {
  name: "MYOUTPUT/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.026209918782114983
      }
    }
  }
}
node {
  name: "MYOUTPUT/MatMul/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/MatMul"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "MYOUTPUT/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "MYOUTPUT/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MYOUTPUT/BiasAdd"
  op: "BiasAdd"
  input: "MYOUTPUT/MatMul"
  input: "MYOUTPUT/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MYOUTPUT/Sigmoid"
  op: "Sigmoid"
  input: "MYOUTPUT/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
}
versions {
}
