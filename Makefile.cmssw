#-- SPECIFIC MAKEFILE TO RUN UNDER CMSSW ONLY --#

CC=g++ -fPIC #Compiler used #fPIC useful to get debug messages #C++11 option: -std=c++0x
DEBUG = -g
CFLAGS = -c #Compilation options
ROOTFLAGS = `root-config --glibs --cflags`

#-- To find the correct libraries/include paths for tensorflow/eigen/protobuf/... for your CMSSW version, check:
#       scram tool list
#       scram tool info tensorflow
#       scram tool info eigen
#       scram tool info protobuf
#       scram tool info tbb

LFLAGS = $(DEBUG) -lTMVA -lPyMVA
#LFLAGS+= -L/cvmfs/cms.cern.ch/${SCRAM_ARCH}/cms/cmssw/${CMSSW_VERSION}/lib/${SCRAM_ARCH} -lFWCoreUtilities -lPhysicsToolsTensorFlow #Why does not work ? Need to create these lib manually
LFLAGS+= -L${CMSSW_BASE}/lib/${SCRAM_ARCH} -lPhysicsToolsTensorFlow -lFWCoreUtilities #Libraries generated manually via scram

#CMSSW_10_2_24
#LFLAGS+= -L/cvmfs/cms.cern.ch/slc7_amd64_gcc700/external/tensorflow/1.6.0-gnimlf3/lib -ltensorflow_framework
#LFLAGS+= -L/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/protobuf/3.5.2/lib -lprotobuf
#LFLAGS+= -L/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tbb/2018_U1-omkpbe2/lib -ltbbmalloc
#INCFLAGS = -I${CMSSW_BASE}/src
#INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tensorflow/1.6.0-gnimlf3/include
#INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/protobuf/3.5.2/include
#INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tbb/2018_U1-omkpbe2/include
#INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/eigen/64060da8461a627eb25b5a7bc0616776068db58b/include/eigen3

#CMSSW_11_1_2
LFLAGS+= -L/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tensorflow/2.1.0-bcolbf2/lib -ltensorflow_framework
LFLAGS+= -L/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/protobuf/3.11.3/lib -lprotobuf
LFLAGS+= -L/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tbb/2019_U9-bcolbf/lib -ltbbmalloc
INCFLAGS = -I${CMSSW_BASE}/src
INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tensorflow/2.1.0-bcolbf2/include
INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/eigen/d812f411c3f9-bcolbf2/include/eigen3
INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/protobuf/3.11.3/include
INCFLAGS+= -I/cvmfs/cms.cern.ch/${SCRAM_ARCH}/external/tbb/2019_U9-bcolbf/include

SRCS = $(wildcard *.cxx) #Source files are all files with .cxx extension
HDRS = $(wildcard *.h) #Header files are all files with .h extension
OBJS = $(SRCS:.cxx=.o) #Object files are all files with .o extension, which have same names as source files

DICT = myDict.cxx

LIB = myLib.so

MY_ANALYSIS = analysis_main.exe #Name of executable file
ROCS = ROCS/Compare_ROC_curves.exe
YIELD = Yield_Table.exe
SPLIT = Split_FullSamples.exe

# .PHONY : $(wildcard *.o)  #Force to always recompile object

#Instructions
all: $(DICT) $(LIB) $(MY_ANALYSIS) $(ROCS) $(YIELD) $(SPLIT)

$(DICT): Utils/WCPoint.h Utils/WCFit.h Utils/TH1EFT.h
	@echo "-- Creating dictionnary $(DICT) --"
	@rootcling -f $(DICT) -rml $(LIB) -rmf myLib.rootmap Utils/WCPoint.h Utils/WCFit.h Utils/TH1EFT.h Utils/LinkDef.h #-c -p Utils/...

$(LIB): Utils/TH1EFT.cxx $(DICT)
	@echo "-- Creating shared library $(LIB) --"
	@$(CC) $(INCFLAGS) $(ROOTFLAGS) $(DICT) Utils/TH1EFT.cxx -shared -o $(LIB)
	@echo ""

#Obtain executables from object files
$(MY_ANALYSIS): Utils/TH1EFT.cxx Utils/TFModel.o Utils/Helper.o ROCS/ROC_Plotter.o analysis_main.o TopEFT_analysis.o $(LIB)
	@echo "###################################"
	@echo "-- Creating executable ./$(MY_ANALYSIS) --"
	@$(CC) $^ -o $@ $(ROOTFLAGS) $(LFLAGS) $(INCFLAGS) -L. $(LIB)
	@echo "-- Done --"
	@echo "###################################""#"
	@echo ""

$(ROCS): ROCS/ROC_Plotter.o ROCS/Compare_ROC_curves.o Utils/Helper.o $(LIB)
	@echo "###################################"
	@echo "-- Creating executable $(ROCS) --"
	@$(CC) $^ -o $@ $(ROOTFLAGS) $(LFLAGS)
	@echo "-- Done --"
	@echo "###################################"
	@echo ""

$(YIELD): Utils/Yield_Table.o Utils/Helper.o $(LIB)
	@echo "###################################""#"
	@echo "-- Creating executable ./$(YIELD) --"
	@$(CC) $^ -o $@ $(ROOTFLAGS) $(LFLAGS) $(INCFLAGS)
	@echo "-- Done --"
	@echo "###################################""#"
	@echo ""

$(SPLIT): input_ntuples/Split_FullSamples.cxx Utils/Helper.o $(LIB)
	@echo "###################################""#"
	@echo "-- Creating executable ./$(SPLIT) --"
	@$(CC) $^ -o $@ $(ROOTFLAGS) $(LFLAGS) $(INCFLAGS)
	@echo "-- Done --"
	@echo "###################################""#"
	@echo ""

#Obtain objects from source and header files
#NB: only works for .cxx files ! e.g. for .cpp, would need a specific rule
%.o: %.cxx $(HDRS)
	@echo "-- Compiling : "$@" --"
	@$(CC) $(ROOTFLAGS) $(CFLAGS) $(LFLAGS) $(INCFLAGS) $< -o $@
	@echo ""
# @Example :  g++ `root-config --glibs --cflags` -fPIC -c -g Utils/Helper.cxx -o Utils/Helper.o

#Erase all objects and executable
clean:
	@-rm -f *.o *.exe Utils/*.o ROCS/*.o ROCS/*.exe $(LIB) $(DICT) myDict* myLib*
